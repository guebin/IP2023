[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "파이썬프로그래밍\nguebin@jbnu.ac.kr\n자연과학대학 본관 205호"
  },
  {
    "objectID": "posts/2022-03-14-(2주차) 3월14일.html",
    "href": "posts/2022-03-14-(2주차) 3월14일.html",
    "title": "PP2023",
    "section": "",
    "text": "(2주차) 3월14일\n\n리스트 - 선언, 연산, 컨테이너형 객체, 가변객체, 메소드, 중첩리스트, 컴프리헨션\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n강의영상\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-wW76mxmUAXYte6KcUZRpTE\n\n- (1/8) 리스트의 선언 및 연산 (1)\n- (2/8) 리스트의 선언 및 연산 (2) ; 넘파이패키지\n- (3/8) 컨테이너형객체, 가변객체\n- (4/8) 리스트자료형의 메소드\n- (5/8) 중첩리스트; for문 (1)\n- (6/8) for문 (2)\n- (7/8) 리스트컴프리헨션\n- (8/8) 숙제설명\n\n\nlist\n\n선언\n- 리스트의 선언\n\na=[11,22]\na\n\n[11, 22]\n\n\n\ntype(a)\n\nlist\n\n\n- 비어있는 리스트의 선언\n\na=[] # 방법1\na\n\n[]\n\n\n\na=list() # 방법2\na\n\n[]\n\n\n\n\n연산\n- 더하기연산\n\na=[11,12]\nb=[12,13]\n\n\na\n\n[11, 12]\n\n\n\nb\n\n[12, 13]\n\n\n\na+b\n\n[11, 12, 12, 13]\n\n\n\n우리의 예상과 다른 결과가 나옴 \\(\\to\\) 파이썬은 R처럼 자체적으로 좋은 계산기능을 내장하고 있지 않음.\n\n- 브로드캐스팅과 같이 R에서는 당연히 가능했던 기능을 사용할 수 없음.\n\na=[1,2,3]\nb=1\na+b\n\nTypeError: can only concatenate list (not \"int\") to list\n\n\n- 뺄셈은 정의되지 않음\n\na=[1,2]\nb=[1,2]\na-b\n\nTypeError: unsupported operand type(s) for -: 'list' and 'list'\n\n\n- 곱하기는 정의가능\n\na=[1,2]\n\n\n2*a # a+a \n\n[1, 2, 1, 2]\n\n\n- 나눗셈은 정의되지 않음\n\na=[1,2,1,2]\na/2\n\nTypeError: unsupported operand type(s) for /: 'list' and 'int'\n\n\n- 더하기와 곱하기는 원소의 추가와 반복추가를 의미하지만 그렇다고 해서 뺄셈과 나눗셈이 원소의 삭제를 의미하는것은 아님\n\na=[1,2,3]\na-[3] # 이런건 없다\n\nTypeError: unsupported operand type(s) for -: 'list' and 'list'\n\n\n\na=[1,2,1,2,1,2]\na/3 # 이런건 없다\n\nTypeError: unsupported operand type(s) for /: 'list' and 'int'\n\n\n- 더하기와 곱하기가 원소의 추가와 반복추가를 의미하여 편리할때도 있긴하지만, 우리는 산술적인 +, * 를 원하는 경우도 있다. 이럴 경우는 어떻게 할 수 있을까?\n(예제)\n\na=[1,2]\nb=[3,4]\n\na+b = [4,6] 이 되도록 하려면?\n(풀이1)\n\na[0]+b[0] # a의 첫번째 원소를 추출, b의 첫번째 원소를 추출, 둘을 더함 \n\n4\n\n\n\na[1]+b[1] # a의 두번째 원소를 추출, b의 두번째 원소를 추출, 둘을 더함 \n\n6\n\n\n\n[a[0]+b[0],a[1]+b[1]]\n\n[4, 6]\n\n\n풀이가 가능한 이유? a,b는 리스트이지만 a[0], a[1], b[0], b[1] 은 각각 인트형임. 인트형은 + 연산이 가능했음.\n(풀이2)\nnumpy 패키지 (파이썬의 여러 수치연산들을 담당하는 라이브러리) - 이러한 벡터연산은 누구나 필요로 하는 연산임. - 내가 아니더라도 누군가가 프로그램화 해놓았을 것임. - 그 누군가가 자신이 만든 코드를 잘 정리하여 무료로 배포했을 수도 있음. (패키지를 배포한다고 표현) - 그 패키지를 우리는 가져와서 설치한뒤 사용하기만 하면된다.\n패키지를 설치하는 방법 - !pip install numpy # 최신버전을 설치함 - !conda install -c conda-forge numpy -y # 안전한 버전을 설치함\n설치된 패키지를 사용하는 방법 - import numpy 한뒤에 numpy.??로 기능을 사용 - import numpy as np 한뒤에 np.??로 기능을 사용\n\nimport numpy ## 설치한패키지를 쓰겠다고 선언함 \n\n\na=[1,2]\nb=[3,4]\n\n\naa=numpy.array(a) \nbb=numpy.array(b)\n# aa,bb는 리스트가 아니라 넘파이 어레이,\n# numpy.array()는 numpy패키지에서 제공하는 array함수를 쓰겠다는 의미. \n\n\naa+bb\n\narray([4, 6])\n\n\n이런것도 가능\n\n2*aa\n\narray([2, 4])\n\n\n\n2*aa+1\n\narray([3, 5])\n\n\n\n2*aa+1+bb\n\narray([6, 9])\n\n\n(풀이3)\n\nimport numpy as np ## 설치한 numpy라는 패키지를 쓰겠음. 그런데 numpy말고 np라는 이름으로 쓰겠음\n\n\na=[1,2]\nb=[3,4]\nnp.array(a)+np.array(b)\n\narray([4, 6])\n\n\n\n\n인덱싱\n- str형과 동일한 방식\n\na=[11,22,33,44,55] # 0 -4 -3 -2 -1\n\n\na[-2:] # 끝의 2개의 원소를 뽑음 \n\n[44, 55]\n\n\n\n\n\nlist 고급\n\n콘테이너형 객체, 가변객체\n- 리스트의 원소는 int, float 따위만 가능한 것이 아니다. (리스트는 컨테이너형 객체이므로)\n\nlst = [1,3.14,True,'a',[1,2], \n       (1,2),{'name':'iu','age':27},{1,2,3}]\n\n\nlst\n\n[1, 3.14, True, 'a', [1, 2], (1, 2), {'name': 'iu', 'age': 27}, {1, 2, 3}]\n\n\n각 원소의 타입을 알아보자.\n\ntype(lst[0])\n\nint\n\n\n\ntype(lst[1])\n\nfloat\n\n\n\ntype(lst[2])\n\nbool\n\n\n\ntype(lst[3])\n\nstr\n\n\n\ntype(lst[4])\n\nlist\n\n\n\ntype(lst[5])\n\ntuple\n\n\n\ntype(lst[6])\n\ndict\n\n\n\ntype(lst[7])\n\nset\n\n\n- str은 컨테이너형이 아니다.\n\n'abcd'[2]\n\n'c'\n\n\n\nstr의 모든 원소는 문자임\n\n- 리스트의 원소를 수정할 수 있다. (리스트는 가변객체이므로)\n\na=[11,22,33]\na\n\n[11, 22, 33]\n\n\n\na[0]\n\n11\n\n\n\na[0]=111\n\n\na\n\n[111, 22, 33]\n\n\n- 원소수정은 당연한 기능같은데 이것이 불가능한 경우도 있다.\n(가능한경우)\n\na=['g','u','e','b','i','n']\na\n\n['g', 'u', 'e', 'b', 'i', 'n']\n\n\n\na[0]\n\n'g'\n\n\n\na[0]='G'\n\n\na\n\n['G', 'u', 'e', 'b', 'i', 'n']\n\n\n(불가능한경우)\n\na='guebin'\na\n\n'guebin'\n\n\n\na[0]\n\n'g'\n\n\n\na[0]='G'\n\nTypeError: 'str' object does not support item assignment\n\n\n- 리스트 원소 삭제\n(예제)\n아래와 같이 문자로 된 리스트를 선언하자.\n\na=['g','u','e','b','i','n']\na\n\n['g', 'u', 'e', 'b', 'i', 'n']\n\n\n사실 더 쉽게 선언할 수 있음\n\na= 'guebin' # string으로 a를 선언\na= list(a) # list(a)를 통하여 str을 ㅣist로 변환 -> 그 결과를 a에 다시 저장\na\n\n['g', 'u', 'e', 'b', 'i', 'n']\n\n\n첫번째 원소를 삭제하고 싶다면?\n\ndel a[0]\n\n\na\n\n['u', 'e', 'b', 'i', 'n']\n\n\n이 상태에서 다시 첫번쨰 원소를 삭제한다면?\n\ndel a[0]\n\n\na\n\n['e', 'b', 'i', 'n']\n\n\n- 리스트의 원소 추가\n(예제) 비어있는 리스트를 만들고 원소 0,1,2를 차례로 추가하여 보자.\n(풀이1)\n\na=[]\na\n\n[]\n\n\n\na= a + [0] \na\n\n[0]\n\n\n\na= a + [1]\na\n\n[0, 1]\n\n\n\na= a + [2]\na\n\n[0, 1, 2]\n\n\n(풀이2)\n\na=[]\na\n\n[]\n\n\n\na += [0] \na\n\n[0]\n\n\n\na += [1]\na\n\n[0, 1]\n\n\n\na += [2]\na\n\n[0, 1, 2]\n\n\n\n암기법: 중복되는 변수를 지우고 연산자의 순서를 바꾼다.\n\n(풀이3) 리스트 특화기능(=메소드)를 이용\n\na=[]\na\n\n[]\n\n\n\na.append(0)\na\n\n[0]\n\n\n\na.append(1)\na\n\n[0, 1]\n\n\n\na.append(2)\na\n\n[0, 1, 2]\n\n\n- a+[4]와 a.append(4)의 차이점은?\n(관찰1)\n\na=[1,2,3]\na+[4] ## 리스트 a와 리스트 [4]의 연산결과를 알려줘 \n\n[1, 2, 3, 4]\n\n\n\na ## a는 그대로임. 변화없음 \n\n[1, 2, 3]\n\n\n(관찰2)\n\na=[1,2,3]\na.append(4)\n\n\na ## a자체가 변화함 \n\n[1, 2, 3, 4]\n\n\n비슷해보이지만 굉장히 미묘한 차이가 있음\na.append(4): a에 4를 append하라 \\(\\to\\) a가 변함\na+[4]: a와 4를 연산하라\n\n\n메소드 (리스트 자료형에 특화된 특수한 함수들)\n(append)\n\na=[1,2,3,4]\na.append?\n\n\nSignature: a.append(object, /)\nDocstring: Append object to the end of the list.\nType:      builtin_function_or_method\n\n\n\n\n\na.append(5)\na\n\n[1, 2, 3, 4, 5]\n\n\n(clear)\n\na=[1,2,3,4]\na.clear?\n\n\nSignature: a.clear()\nDocstring: Remove all items from list.\nType:      builtin_function_or_method\n\n\n\n\n\na.clear()\na\n\n[]\n\n\n(copy)\n\na=[1,2,3,4]\na.copy?\n\n\nSignature: a.copy()\nDocstring: Return a shallow copy of the list.\nType:      builtin_function_or_method\n\n\n\n\n\nb=a.copy()\nb\n\n[1, 2, 3, 4]\n\n\n(count)\n\na=[1,1,2,3,3,4,4,4]\na.count?\n\n\nSignature: a.count(value, /)\nDocstring: Return number of occurrences of value.\nType:      builtin_function_or_method\n\n\n\n\n\na.count(1)\n\n2\n\n\n\na.count(2)\n\n1\n\n\n\na.count(3)\n\n2\n\n\n\na.count(4)\n\n3\n\n\n(extend)\n\na=[1,2,3,4]\nb=[-1,-2,-3,-4]\n\n\na.extend(b)\na\n\n[1, 2, 3, 4, -1, -2, -3, -4]\n\n\n\na=[1,2,3,4]\nb=[-1,-2,-3,-4]\n\n\na.append(b)\n\n\na\n\n[1, 2, 3, 4, [-1, -2, -3, -4]]\n\n\n(index)\n\na=[11,22,'a',True, 22,'a']\na.index?\n\n\nSignature: a.index(value, start=0, stop=9223372036854775807, /)\nDocstring:\nReturn first index of value.\nRaises ValueError if the value is not present.\nType:      builtin_function_or_method\n\n\n\n\n\na.index(11)\n\n0\n\n\n\na.index(22)\n\n1\n\n\n\na.index('a')\n\n2\n\n\n\na.index(True)\n\n3\n\n\n(insert)\n\na=[1,2,3]\na.insert?\n\n\nSignature: a.insert(index, object, /)\nDocstring: Insert object before index.\nType:      builtin_function_or_method\n\n\n\n\n\na.insert(1,88) \na\n\n[1, 88, 2, 3]\n\n\n(pop)\n\na=['a',1,2,'d']\na.pop?\n\n\nSignature: a.pop(index=-1, /)\nDocstring:\nRemove and return item at index (default last).\nRaises IndexError if list is empty or index is out of range.\nType:      builtin_function_or_method\n\n\n\n\n\na.pop() # index=-1 이므로 마지막원소가 나타남\n\n'd'\n\n\n\na # a는 마지막 원소가 사라진 상태\n\n['a', 1, 2]\n\n\n\na.pop(0) # index=0 이므로 첫번쨰 원소가 나타남\n\n'a'\n\n\n\na # a에는 첫번째 원소가 사라진 상태\n\n[1, 2]\n\n\n(remove)\n\na=['a',2,3,'d']\na.remove?\n\n\nSignature: a.remove(value, /)\nDocstring:\nRemove first occurrence of value.\nRaises ValueError if the value is not present.\nType:      builtin_function_or_method\n\n\n\n\n\na.remove('d')\n\n\na\n\n['a', 2, 3]\n\n\n\na.remove('a')\n\n\na\n\n[2, 3]\n\n\n(reverse)\n\na=[1,2,3,4]\na.reverse?\n\n\nSignature: a.reverse()\nDocstring: Reverse *IN PLACE*.\nType:      builtin_function_or_method\n\n\n\n\n\na.reverse()\na\n\n[4, 3, 2, 1]\n\n\n(sort)\n\na=[1,3,2,4]\na.sort?\n\n\n\nSignature: a.sort(*, key=None, reverse=False)\nDocstring:\nSort the list in ascending order and return None.\nThe sort is in-place (i.e. the list itself is modified) and stable (i.e. the\norder of two equal elements is maintained).\nIf a key function is given, apply it once to each list item and sort them,\nascending or descending, according to their function values.\nThe reverse flag can be set to sort in descending order.\nType:      builtin_function_or_method\n\n\n\n\n\na.sort()\na\n\n[1, 2, 3, 4]\n\n\n(다른예제들)\n\na=list('guebin')\na\n\n['g', 'u', 'e', 'b', 'i', 'n']\n\n\n\na.sort()\na\n\n['b', 'e', 'g', 'i', 'n', 'u']\n\n\n\na.sort(reverse=True)\na\n\n['u', 'n', 'i', 'g', 'e', 'b']\n\n\n\n\n중첩리스트\n\nA=[[1,2,3],[4,5,6],[7,8,9]]\nA\n\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n\n- A는 아래와 같은 매트릭스로 이해할 수 있다\n$\n\\[\\begin{bmatrix}\n1 & 2 & 3 \\\\\n4 & 5 & 6 \\\\\n7 & 8 & 9\n\\end{bmatrix}\\]\n$\n- A에서 (2,1)의 원소를 뽑고싶다 = 4를 뽑고싶다\n\nA[1,0]\n\nTypeError: list indices must be integers or slices, not tuple\n\n\n\n실패\n\n\nA[1][0]\n\n4\n\n\n\n성공\n\n- 성공의 이유를 분석해보자.\n\nA\n\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n\n\nA[1]\n\n[4, 5, 6]\n\n\n\nA[1][0]\n\n4\n\n\n- 매트릭스는 아니지만 매트릭스 같음! - 1차원 배열을 다차원 배열로 확장할 수 있는 기본 아이디어를 제공함\n\n\n리스트컴프리헨션(\\(\\star\\star\\star\\))\n- 리스트 컴프리헨션을 이해하기 전에 for문에 대하여 알아보자.\n[예비학습] for문 벼락치기\n프로그램안에서 반복해서 무엇인가를 하고싶다 \\(\\to\\) for\n\nfor i in [0,1,2,3]: ## 반복실행계획\n    print(i) ## 반복실행할내용, 탭을이용하여 들여쓰기해야한다. \n\n0\n1\n2\n3\n\n\n(예제) 1,2,3,4의 합을 for문을 이용하여 구해보자.\n\n_sum = 0\nfor i in [1,2,3,4]: \n    _sum = _sum + i \n\n\n_sum\n\n10\n\n\n\n_sum = 0\ni=1 \n_sum = _sum + i ## 1 <= 0+1\ni=2\n_sum = _sum + i ## 3 <= 1+2 \ni=3 \n_sum = _sum + i ## 6 <= 3+3\ni=4\n_sum = _sum + i ## 10 <= 6+4 \n\n\n_sum\n\n10\n\n\n예비학습끝\n- 예제: \\(2^0, 2^1, 2^2, 2^3\\)를 원소로 가지는 리스트를 생성하라.\n(풀이1) 직접입력\n\nx= [2**0, 2**1, 2**2, 2**3] \nx\n\n[1, 2, 4, 8]\n\n\n(풀이2) for문을 이용함\n\nx=[] \nfor i in [0,1,2,3]:\n    x.append(2**i) \n\n\nx\n\n[1, 2, 4, 8]\n\n\n(풀이3) for문을 이용함\n\nx=[] \nfor i in [0,1,2,3]:\n    x = x+[2**i]\n\n\nx\n\n[1, 2, 4, 8]\n\n\n(풀이4) for문을 이용함\n\nx=[] \nfor i in [0,1,2,3]:\n    x += [2**i]\n\n\nx\n\n[1, 2, 4, 8]\n\n\n(풀이5) 리스트컴프리헨션을 이용한 풀이\n\nx= [2**i for i in [0,1,2,3]] \nx\n\n[1, 2, 4, 8]\n\n\n- 리스트컴프리헨션의 문법 암기방법 - 집합에서 조건제시법을 연상 - \\(\\{2^0,2^1,2^2,2^3\\}=\\{2^i: i \\in \\{0,1,2,3\\} \\}\\)\n- 리스트컴프리헨션이란? - 리스트를 매우 효율적으로 만드는 테크닉 - for문에 비하여 가지고 있는 장점: (1) 코드가 간결하다 (2) 빠르다\n- 예제: 리스트 컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라.\n\n['SSSS','PPPP','AAAA','MMMM']\n\n['SSSS', 'PPPP', 'AAAA', 'MMMM']\n\n\n(풀이)\n\n[i*4 for i in 'SPAM']\n\n['SSSS', 'PPPP', 'AAAA', 'MMMM']\n\n\n- 예제: 리스트컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라.\n\n['X1','X2','X3','Y1','Y2','Y3']\n\n['X1', 'X2', 'X3', 'Y1', 'Y2', 'Y3']\n\n\n(풀이)\n\n[i+j for i in 'XY' for j in '123']\n\n['X1', 'X2', 'X3', 'Y1', 'Y2', 'Y3']\n\n\n- 예제: 리스트컴프리헨션을 이용하여 통계1,…,통계5,수학1,…,수학5를 만들어라.\n(풀이)\n\n[x+y for x in ['stat','math'] for y in '12345'] \n\n['stat1',\n 'stat2',\n 'stat3',\n 'stat4',\n 'stat5',\n 'math1',\n 'math2',\n 'math3',\n 'math4',\n 'math5']\n\n\n\n\\(\\{xy : x \\in \\{stat,math\\}, y \\in \\{1,2,3,4,5\\} \\}\\)\n\n(다른풀이) 참고로 for문을 쓰면 좀 복잡해진다.\n\n_lst = [] \nfor x in ['stat','math']: \n    for y in '12345': \n        _lst = _lst + [x+y] \n\n\n_lst \n\n['stat1',\n 'stat2',\n 'stat3',\n 'stat4',\n 'stat5',\n 'math1',\n 'math2',\n 'math3',\n 'math4',\n 'math5']\n\n\n- 예제: ’jbnu’를 이용하여 아래와 같은 리스트를 만들어라. (리스트컴프리헨션을 이용할것)\n\n['j','b','n','u']\n\n['j', 'b', 'n', 'u']\n\n\n(다른풀이) 아래와 같이 풀면 된다는것은 알고 있음\n\nlist('jbnu')\n\n['j', 'b', 'n', 'u']\n\n\n(풀이)\n\n[x for x in 'jbnu']\n\n['j', 'b', 'n', 'u']\n\n\n- 예제: x에는 무엇이 있을까?\n(경우1)\n\nx=1 \nlst = [] \nfor x in 'jbnu': \n    lst = lst + [x]\nlst    \n\n['j', 'b', 'n', 'u']\n\n\n\nx \n\n'u'\n\n\n(경우2)\n\nx=1 \nlst = [x for x in 'jbnu'] \nlst \n\n['j', 'b', 'n', 'u']\n\n\n\nx\n\n1\n\n\n\n진짜 미묘하게 다르죠?\n\n- 예제: [X1,X2,X3,…,X100]와 같은 리스트를 만들어보라.\n(풀이)\n\n['X'+str(i) for i in [1,2,3,4]] ## 이걸 4까지가 아니라 100까지 써야함\n\n['X1', 'X2', 'X3', 'X4']\n\n\n\n['X'+str(i) for i in 1:100]\n\nSyntaxError: invalid syntax (<ipython-input-432-4555f37f5468>, line 1)\n\n\n[예비학습]\n\nrange(0,10)\n\nrange(0, 10)\n\n\n\n이게뭐야?\n\n\n_tmp = range(0,10)\n_tmp?\n\n\nType:        range\nString form: range(0, 10)\nLength:      10\nDocstring:  \nrange(stop) -> range object\nrange(start, stop[, step]) -> range object\nReturn an object that produces a sequence of integers from start (inclusive)\nto stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.\nstart defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.\nThese are exactly the valid indices for a list of 4 elements.\nWhen step is given, it specifies the increment (or decrement).\n\n\n\n\n\n우리가 아는 범위에서는 모르겠음.. 이런게 있나보다 하고 넘어가야 하겠음\n\n\nlist(range(0,10)) # 0을 포함, 10을 미포함 \n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n이게 중요한것임. range(0,10)를 리스트화시키면 [0,1,2,…,9] 와 같은 리스트를 얻을 수 있음.\n\n\nlist(range(10)) # 0은 생략가능\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nlist(range(2,10)) # 2는 포함, 10은 미포함 \n\n[2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nlist(range(1,10,2)) # 2는 포함, 10은 미포함 \n\n[1, 3, 5, 7, 9]\n\n\n예비학습 끝\n\n['X'+str(i) for i in list(range(1,13))] ## 출력결과가 너무 기니까 101대신에 13으로 변경 \n\n['X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8', 'X9', 'X10', 'X11', 'X12']\n\n\n(아래와 같은 풀이도 가능)\n\n['X'+str(i) for i in range(1,13)] ## 출력결과가 너무 기니까 101대신에 13으로 변경 \n\n['X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8', 'X9', 'X10', 'X11', 'X12']\n\n\n(딴생각) 생각해보니까 for문 뒤에 올수 있는것이 무엇인지 생각하는것도 흥미로울듯\n\nfor i in '1234':\n    print(i)\n\n1\n2\n3\n4\n\n\n\nfor i in [1,2,3,4]:\n    print(i)\n\n1\n2\n3\n4\n\n\n\nfor i in (1,2,3,4): # (1,2,3,4)는 튜플\n    print(i)\n\n1\n2\n3\n4\n\n\n\nfor i in {1,2,3,4}: # {1,2,3,4}는 set \n    print(i)\n\n1\n2\n3\n4\n\n\n\nfor i in {'name':'iu','age':28}: #{'name':'iu','age':28} 는 딕셔너리\n    print(i)\n\nname\nage\n\n\n\nfor i in range(1,5): \n    print(i)\n\n1\n2\n3\n4\n\n\n(숙제)\n리스트컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라.\n\n['X1','X2X2','X3X3X3','X4X4X4X4','X5X5X5X5X5']\n\n['X1', 'X2X2', 'X3X3X3', 'X4X4X4X4', 'X5X5X5X5X5']"
  },
  {
    "objectID": "posts/2022-06-09-2021년  파이썬입문 기말고사 (풀이포함).html",
    "href": "posts/2022-06-09-2021년  파이썬입문 기말고사 (풀이포함).html",
    "title": "PP2023",
    "section": "",
    "text": "2021년 1학기 파이썬입문 기말고사 (풀이포함)\n\ntoc:false\nbranch: master\nbadges: true\ncomments: false\nhide: false\nauthor: 최규빈\ncategories: [파이썬]\n\n\n# 1. (20점)\nN사에서 게임유저들에게 여름방학 기념이벤트로 진명왕의 집판검이라는 이름의 아이템을 선물했다고 하자. 진명왕의 집판검은 총 5회에 걸쳐서 강화(upgrade)될 수 있데 강화의 성공확률은 10%라고 하자. 강화가 5번성공하면 더 이상 강화가 진행되지 않는다고 하자. (따라서 더 이상 강화시도를 하지 않아도 무방하다) 아래는 이 아이템에 강화를 진행하였을때 각 강화상태를 설명한 예시이다.\n\n\n\n시도횟수\n강화성공여부\n강화상태\n비고\n\n\n\n\n1\n강화실패\n+0 \\(\\to\\) +0\n강화실패로 인하여 강화상태 변화없음\n\n\n2\n강화성공\n+0 \\(\\to\\) +1\n강화성공으로 인한 강화상태 변화\n\n\n3\n강화실패\n+1 \\(\\to\\) +1\n강화실패로 인하여 강화상태 변화없음\n\n\n4\n강화성공\n+1 \\(\\to\\) +2\n강화성공으로 인한 강화상태 변화\n\n\n5\n강화성공\n+2 \\(\\to\\) +3\n강화성공으로 인한 강화상태 변화\n\n\n6\n강화성공\n+3 \\(\\to\\) +4\n강화성공으로 인한 강화상태 변화\n\n\n7\n강화실패\n+4 \\(\\to\\) +4\n강화실패로 인하여 강화상태 변화없음\n\n\n8\n강화성공\n+4 \\(\\to\\) +5\n모든 강화 성공\n\n\n9\n-\n+5 \\(\\to\\) +5\n더 이상 강화시도 하지 않음\n\n\n10\n\\(\\dots\\)\n\\(\\dots\\)\n\\(\\dots\\)\n\n\n\n강화는 하루에 한 번씩만 시도할 수 있으며 시도가능한 기간은 7월1일부터 8월31일까지로 한정되어 있다고 하자. 따라서 방학동안 유저들은 총 62번 시도를 할 수 있다. 방학이 끝난이후 100명 유저중 대략 몇명정도 +5 강화상태에 있겠는가? 파이썬을 통한 시뮬레이션을 활용하여 추론하라. (단, +5강화에 성공하지 못한 모든 유저는 반드시 하루에 한번 강화를 시도해야 한다고 가정하자.)\n(풀이1)\n\nimport numpy as np\nnp.random.seed(1)\nsum(np.random.binomial(n=62, p=0.1, size=10000)>=5)/10000\n\n0.7514\n\n\n(풀이2)\n\nclass ExecutionSword():\n    def __init__(self,prob):\n        self.nuser=100000\n        self.prob=prob\n        self.attemptresult=None\n        self.upgradestate=pd.DataFrame({'day0':[0]*self.nuser})\n        self.failstate=pd.DataFrame({'day0':[0]*self.nuser})\n        self.ratio=0\n        self.day=0\n    def addday(self):\n        self.day=self.day+1            \n    def attempt(self):\n        self.attemptresult = np.random.binomial(n=1, p=self.prob, size=self.nuser)\n    def update(self):\n        # 강화상태 업데이트\n        self.upgradestate['day%s' % self.day] = np.minimum(5,self.upgradestate['day%s' % (self.day-1)]+self.attemptresult)\n        # 강화실패누적횟수 업데이트 \n        self.failstate['day%s' % self.day]=self.failstate['day%s' % (self.day-1)]+(self.attemptresult==0)*1\n        # 강화상태==5 or 강화상태==0 일 경우 강화실패누적횟수 초기화 \n        self.failstate['day%s' % self.day][self.upgradestate['day%s' % self.day]== 0]=0\n        self.failstate['day%s' % self.day][self.upgradestate['day%s' % self.day]== 5]=0\n    def reset(self):\n        # 실패횟수 = 2 인것을 찾아 index_ 에 저장 -> index_ 에 해당하는 유저의 강화횟수와 실패횟수를 모두 0으로 초기화 \n        index_= self.failstate['day%s' % self.day]==2\n        self.failstate['day%s' % self.day][index_] = 0\n        self.upgradestate['day%s' % self.day][index_] = 0\n    def arrangeprob(self):\n        self.ratio=sum(self.upgradestate['day%s' % self.day]==5) / self.nuser\n        if self.ratio > 0.5:\n            self.prob = 0.9\n\n\n# 1 \nimport pandas as pd\ns1=ExecutionSword(0.1)\nfor i in range(62):\n    s1.addday()\n    s1.attempt()\n    s1.update()\n\n\nsum(s1.upgradestate.day62==5)/s1.nuser\n\n0.75551\n\n\n\n\n# 2. (70점)\n강화성공확률을 40%로 수정한다. 강화에 누적2회 실패하면 강화상태가 초기화 된다고 하자. (따라서 강화실패 누적횟수를 카운트하는 변수가 필요하다) 단, 강화실패 누적횟수는 누적2회 달성시 0으로 초기화 된다. 또한 강화상태가 +0인 경우는 실패하여도 강화실패 누적횟수가 추가되지 않는다.\n\n\n\n시도횟수\n강화성공여부\n강화상태\n강화실패누적\n비고\n\n\n\n\n1\n강화성공\n+0 \\(\\to\\) +1\n0 \\(\\to\\) 0\n-\n\n\n2\n강화성공\n+1 \\(\\to\\) +2\n0 \\(\\to\\) 0\n-\n\n\n3\n강화실패\n+2 \\(\\to\\) +2\n0 \\(\\to\\) 1\n-\n\n\n4\n강화성공\n+2 \\(\\to\\) +3\n1 \\(\\to\\) 1\n-\n\n\n5\n강화실패\n+3 \\(\\to\\) +0\n1 \\(\\to\\) 0\n강화실패로 누적2회로 인한 초기화\n\n\n6\n강화실패\n+0 \\(\\to\\) +0\n0 \\(\\to\\) 0\n강화실패 누적횟수 증가하지 않음\n\n\n7\n강화성공\n+0 \\(\\to\\) +1\n0 \\(\\to\\) 0\n-\n\n\n8\n강화성공\n+1 \\(\\to\\) +2\n0 \\(\\to\\) 0\n-\n\n\n9\n강화성공\n+2 \\(\\to\\) +3\n0 \\(\\to\\) 0\n-\n\n\n10\n강화성공\n+3 \\(\\to\\) +4\n0 \\(\\to\\) 0\n-\n\n\n11\n강화성공\n+4 \\(\\to\\) +5\n0 \\(\\to\\) 0\n모든 강화 성공\n\n\n12\n-\n+5 \\(\\to\\) +5\n0 \\(\\to\\) 0\n더 이상 강화시도 하지 않음\n\n\n13\n\\(\\dots\\)\n\\(\\dots\\)\n\\(\\dots\\)\n\\(\\dots\\)\n\n\n\n(1) 이 경우 62일의 방학뒤에 100명의 유저중 대략 몇명정도 +5 강화상태에 있겠는가? 시뮬레이션을 활용하여 추론하라. (단, +5강화에 성공하지 못한 모든 유저는 반드시 하루에 한번 강화를 시도해야 한다고 가정하자.)\n(2) 31번째 시도 이후 대략 몇명의 유저가 +5 강화상태에 있겠는가?\n\n# 2-1,2 \ns2=ExecutionSword(0.4)\n\n\nfor i in range(62):\n    s2.addday()\n    s2.attempt()\n    s2.update()\n    s2.reset() ## 초기화가 되는 조건이 있으므로 문제1에서 reset함수만 추가하면 된다. \n\n\n# 2-1\nsum(s2.upgradestate.day31==5)/s2.nuser\n\n0.36392\n\n\n\n# 2-2\nsum(s2.upgradestate.day62==5)/s2.nuser\n\n0.61803\n\n\n(3) 100명의 유저중 50명이상의 유저가 +5 강화상태에 도달하는 순간 모든 유저의 강화성공확률을 90%로 증가시킨다고 하자. 62일의 방학뒤에 100명의 유저 중 몇명 정도가 +5 강화상태에 있겠는가?\n\n# 2-3 \ns3=ExecutionSword(0.4)\n\n\nfor i in range(62):\n    s3.addday()\n    s3.attempt()\n    s3.update()\n    s3.reset() ## 초기화가 되는 조건이 있으므로 reset함수 추가\n    s3.arrangeprob() ## 전체유저의 50%가 강화성공하면 강화확률이 조정되는 조건이 있으므로 arragneprob 추가 \n\n\nsum(s3.upgradestate.day62==5)/s3.nuser\n\n0.9993"
  },
  {
    "objectID": "posts/2022-05-11-(11주차) 5월11일.html",
    "href": "posts/2022-05-11-(11주차) 5월11일.html",
    "title": "PP2023",
    "section": "",
    "text": "클래스 공부 1단계\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-wukV047WbbGfNIY2kImMj8\n\n- (1/3) 이미지자료 불러오기 (PIL 이용)\n- (2/3) 클래스의 성능 정리\n- (3/3) 연습문제\n\n\n\n\nimport requests\nfrom PIL import Image \n\n- 예제1\n\nurl= 'https://stat.jbnu.ac.kr/sites/stat/images/intro_about_02.jpg'\n\n\nImage.open(Image.io.BytesIO(requests.get(url).content))\n\n\n\n\n\n우리학과 실습실!\n\n- 예제2\n\nurl1 = 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true'\nurl2 = 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop2.png?raw=true' \n\n\nImage.open(Image.io.BytesIO(requests.get(url1).content))\n\n\n\n\n\nImage.open(Image.io.BytesIO(requests.get(url2).content))\n\n\n\n\n\n\n\n\n\n- 클래스를 선언\n\nclass STOOOP: \n    title = '학교폭력!' \n    url = url1\n    end = '멈춰~~~~'\n    def stop(self):\n        print(self.title)\n        display(Image.open(Image.io.BytesIO(requests.get(self.url).content)))\n        print(self.end) \n\n\n규칙1: 메소드(=class안에서 정의된 함수)의 첫번째 인자는 무조건 self\n규칙2: 메소드에서 class안에 정의된 변수들(title, url, end)을 사용하려면 “self.변수이름”와 같은 형식으로 쓴다.\n\n즉 “self.title”, “self.url”, “self.end” 와 같은 방식으로 써야한다.\n\n참고: 규칙2에서 가끔 self의 자리에 “STOOOP.title”,“STOOOP.url”,“STOOOP.end” 와 같이 클래스의 이름으로 쓰기도 한다.\n\n- 클래스 사용예시\n(예시1) STOOOP 클래스 -> school 인스턴스 만듬\n\nschool = STOOOP()\n\n\nschool.stop()\n\n학교폭력!\n\n\n\n\n\n멈춰~~~~\n\n\n(예시2) STOOOP 클래스 -> kospi 인스턴스 만듬\n\nkospi = STOOOP()\n\n\nkospi.title = 'KOSPI 하락'\n\n\nkospi.stop()\n\nKOSPI 하락\n\n\n\n\n\n멈춰~~~~\n\n\n\n\n\n- 성능1: 틀만있으면 여러개의 독립적인 컨텐츠를 생성할 수 있다\n\nschool = STOOOP()\nkospi = STOOOP()\n\n\n함수의 사용법과 비슷하다.\n클래스이름을 쓰고 콘텐츠를 구체화하는 과정에서 필요한 입력1, 입력2를 ()에 넣는다. 이때는 STOOOP(입력1,입력2)와 같이 생성\n위의 예시는 따로 입력이 없으므로 비워둔 상태임. 즉 STOOOP()와 같은 식으로 생성.\n\n- 성능2: 생성된 콘텐츠(=인스턴스)에서 .을 찍고 접근할 수 있는 여러 자료들에 접근가능하며 내용도 독립적으로 바꿀 수 있다.\n\nschool.title # 출력\n\n'학교폭력!'\n\n\n\nkospi.title # 출력\n\n'학교폭력!'\n\n\n\nkospi.title = '코스피하락' # 변경\n\n- 성능3: 생성된 콘텐츠(=인스턴스)에서 .을 찍고 쓸 수 있는 자체적인 함수(=method라고 함)를 독립적으로 사용할 수 있다.\n\nschool.stop()\n\n학교폭력!\n\n\n\n\n\n멈춰~~~~\n\n\n\nkospi.stop()\n\n코스피하락\n\n\n\n\n\n멈춰~~~~\n\n\n\n\n\n문제1: 아래의 클래스를 구현하라.\n- 클래스내에는 변수 a가 있다. 변수 a의 초기값은 True이다.\n- 클래스에는 show()라는 메소드가 있다. show()의 기능은 a의 값을 print하는 기능을 한다.\n(풀이)\n\nclass Klass1: \n    a = True \n    def show(self):\n        print(self.a)\n\n\nex1 = Klass1()\n\n\nex1.a\n\nTrue\n\n\n\nex1.show()\n\nTrue\n\n\n문제2: 아래의 클래스를 구현하라.\n- 클래스내에는 변수 a가 있다. 변수 a의 초기값은 1이다.\n- 클래스에는 up()라는 메소드가 있다. up()의 기능은 a의 값을 1증가시키는 기능을 한다.\n(풀이)\n\nclass Klass2: \n    a = 1 \n    def up(self):\n        self.a = self.a + 1 \n\n\nex2 = Klass2()\nex2.a\n\n1\n\n\n\nex2.up()\n\n\nex2.a\n\n2\n\n\n\nex2.up()\nex2.up()\nex2.up()\nex2.a\n\n5\n\n\n문제3: 아래의 클래스를 구현하라.\n- 클래스내에는 변수 a가 있다. 변수 a의 초기값은 0이다.\n- 클래스에는 up(),down(),show()라는 메소드가 있다. 각각은 a의 값을 1증가, a의 값을 1감소, a의 값을 print하는 기능을 한다.\n(풀이)\n\nclass Klass3: \n    a = 0 \n    def up(self):\n        self.a = self.a + 1 \n    def down(self):\n        self.a = self.a - 1 \n    def show(self):\n        print(self.a)\n\n\nex3=Klass3()\n\n\nex3.show()\n\n0\n\n\n\nex3.up()\nex3.show()\n\n1\n\n\n\nex3.up()\nex3.up()\nex3.show()\n\n3\n\n\n\nex3.up()\nex3.down()\nex3.show()\n\n3\n\n\n\nex3.down()\nex3.down()\nex3.show()\n\n1\n\n\n문제4: 아래의 클래스를 구현하라.\n- 클래스내에는 변수 url이 있음. url의 초기값은 https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true이다.\n- 클래스에는 show()이라는 메소드를 가지는데, 메소드는 아래와 같은 기능을 한다. - 기능1: url의 그림을 출력 - 기능2: ‘당신은 이 그림을 \\(n\\)번 보았습니다’ 출력. 여기에서 \\(n\\)은 그림을 본 횟수\n(풀이)\n\nclass Klass4:\n    n = 1\n    url = 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true'\n    def show(self):\n        display(Image.open(Image.io.BytesIO(requests.get(self.url).content)))\n        print(\"당신은 이 이미지를 {}번 보았습니다\".format(self.n))\n        self.n = self.n+1 \n\n\na=Klass4()\n\n\na.show()\n\n\n\n\n당신은 이 이미지를 2번 보았습니다\n\n\n\nb=Klass4()\nb.url = url2\n\n\nb.show()\n\n\n\n\n당신은 이 이미지를 3번 보았습니다\n\n\n\n\n\n\n- 클래스를 선언하라. [“가위”,“바위”,“보”]중 하나를 골라서 내는 메소드를 정의하라.\nhint\n\nimport numpy as np\n\n\nnp.random.choice([\"가위\",\"바위\",\"보\"])\n\n'바위'"
  },
  {
    "objectID": "posts/2022-05-18-(12주차) 5월18일.html",
    "href": "posts/2022-05-18-(12주차) 5월18일.html",
    "title": "PP2023",
    "section": "",
    "text": "클래스 공부 3단계\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-yAav-nx8zUjabLZXGYRyR2\n\n- (1/6) 오브젝트의 개념\n- (2/6) 예제1\n- (3/6) 예제2,3,4\n- (4/6) 예제5\n- (5/6) 예제 6,7\n- (6/6) 숙제설명\n\n\n\n- 이 단계에서는 클래스오브젝트에 소속된 변수와 인스턴스오브젝트에 소속된 변수를 설명한다.\n\n\n- 파이썬은 모든 것이 오브젝트로 이루어져 있다. <- 우선은 그냥 명언처럼 외우세요\n- 오브젝트는 메모리주소에 저장되는 모든것을 의미한다.\n\na=1\nid(a) # 메모리주소를 보는 명령어 \n\n140193842610416\n\n\n\na='asdf' \nid(a)\n\n140193794777968\n\n\n\na=[1,2,3]\nid(a)\n\n140193794512384\n\n\n- 클래스와 인스턴스도 오브젝트다\n\nclass A:\n    x=0 \n    def f(self):\n        print(self.x) \n\n\nid(A)\n\n94740835761168\n\n\n\nA는 오브젝트\n\n\na=A()\n\n\nid(a)\n\n140193794535776\n\n\n\na는 오브젝트\n\n\nb=A()\n\n\nid(b)\n\n140193794529632\n\n\n\nb는 오브젝트\n\n- 앞으로는 A를 클래스오브젝트, a,b를 인스턴스오브젝트라고 부르자.\n\n\n\n- 시점0\n\nclass A: \n    x=0\n    y=0 \n    def f(self):\n        self.x = self.x + 1 \n        A.y = A.y + 1 \n        print(\"현재 인스턴스에서 f가 {}번 실행\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행\".format(self.y))\n\n\nA.x, A.y\n\n(0, 0)\n\n\n- 시점1\n\na = A() \n\n\nb = A()\n\n\n[A.x,A.y], [a.x,a.y], [b.x,b.y]\n\n([0, 0], [0, 0], [0, 0])\n\n\n- 시점2\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행\n\n\n\n[A.x,A.y], [a.x,a.y], [b.x,b.y]\n\n([0, 1], [1, 1], [0, 1])\n\n\n- 시점3\n\nb.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행\n\n\n\n[A.x,A.y], [a.x,a.y], [b.x,b.y]\n\n([0, 2], [1, 2], [1, 2])\n\n\n- 시점4\n\nb.f()\n\n현재 인스턴스에서 f가 2번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 3번 실행\n\n\n\n[A.x,A.y], [a.x,a.y], [b.x,b.y]\n\n([0, 3], [1, 3], [2, 3])\n\n\n- 시점5\n\na.f()\n\n현재 인스턴스에서 f가 2번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 4번 실행\n\n\n\n[A.x,A.y], [a.x,a.y], [b.x,b.y]\n\n([0, 4], [2, 4], [2, 4])\n\n\n- 시점6\n\nc=A()\n\n\n[A.x,A.y], [a.x,a.y], [b.x,b.y], [c.x,c.y]\n\n([0, 4], [2, 4], [2, 4], [0, 4])\n\n\n- 시점7\n\nc.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 5번 실행\n\n\n\n[A.x,A.y], [a.x,a.y], [b.x,b.y], [c.x,c.y]\n\n([0, 5], [2, 5], [2, 5], [1, 5])\n\n\n- 신기한점: 각 인스턴스에서 인스턴스이름.f()를 실행한 횟수를 서로 공유하는 듯 하다. (A의 관리하는 것처럼 느껴진다)\n- x와 y는 약간 느낌이 다르다. x는 지점소속, y는 본사소속의 느낌?\n\n이 예제에서 x는 인스턴스오브젝트에 소속된 변수, y는 클래스오브젝트에 소속된 변수처럼 느껴짐\n\n(약속) 앞으로 인스턴스오브젝트에 소속된 변수를 인스턴스변수라고 하고, 클래스오브젝트에 소속된 변수를 클래스변수라고 하자.\n- 인스턴스변수와 클래스변수를 구분하는 방법? 인스턴스이름.__dict__를 쓰면 인스턴스변수만 출력된다\n\n따라서 a.+ tab을 눌러서 나오는 변수중 a.__dict__에 출력되지 않으면 클래스변수이다.\n\n\na.__dict__ \n\n{'x': 2}\n\n\n\nb.__dict__ \n\n{'x': 2}\n\n\n\nc.__dict__\n\n{'x': 1}\n\n\n- 이 예제에서 아래는 모두 클래스변수이다.\n\na.y, b.y, c.y \n\n(5, 5, 5)\n\n\n\n\n\n- 시점0\n\nclass A: \n    x=0\n    y=0 \n    def f(self):\n        self.x = self.x + 1 \n        A.y = A.y + 1 \n        print(\"현재 인스턴스에서 f가 {}번 실행\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행\".format(self.y))\n\n\na=A()\n\n\n[A.x,A.y], [a.x,a.y]\n\n([0, 0], [0, 0])\n\n\n- 시점1\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행\n\n\n\na.f()\n\n현재 인스턴스에서 f가 2번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행\n\n\n\na.f()\n\n현재 인스턴스에서 f가 3번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 3번 실행\n\n\n\n[A.x,A.y], [a.x,a.y]\n\n([0, 3], [3, 3])\n\n\n- 시점2\n\na.x = 0 # f의 실행기록을 초기화하고 싶다\n\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 4번 실행\n\n\n\n[A.x,A.y], [a.x,a.y]\n\n([0, 4], [1, 4])\n\n\n\n\n\n- 시점0\n\nclass A: \n    x=0\n    y=0 \n    def f(self):\n        self.x = self.x + 1 \n        A.y = A.y + 1 \n        print(\"현재 인스턴스에서 f가 {}번 실행\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행\".format(self.y))\n\n\na=A()\n\n\nb=A()\n\n\n[A.x,A.y], [a.x,a.y], [b.x,b.y]\n\n([0, 0], [0, 0], [0, 0])\n\n\n- 시점1\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행\n\n\n\n[A.x,A.y], [a.x,a.y], [b.x,b.y]\n\n([0, 1], [1, 1], [0, 1])\n\n\n- 시점2\n\nA.y = 100 \n\n\n[A.x,A.y], [a.x,a.y], [b.x,b.y]\n\n([0, 100], [1, 100], [0, 100])\n\n\n\na.f()\n\n현재 인스턴스에서 f가 2번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 101번 실행\n\n\n\n[A.x,A.y], [a.x,a.y], [b.x,b.y]\n\n([0, 101], [2, 101], [0, 101])\n\n\n\n\n\n- 시점0\n\nclass A: \n    x=0\n    y=0 \n    def f(self):\n        self.x = self.x + 1 \n        A.y = A.y + 1 \n        print(\"현재 인스턴스에서 f가 {}번 실행\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행\".format(self.y))\n\n\na=A()\n\n\n[A.x, A.y], [a.x,a.y]\n\n([0, 0], [0, 0])\n\n\n- 시점1\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행\n\n\n\n[A.x, A.y], [a.x,a.y]\n\n([0, 1], [1, 1])\n\n\n- 시점2\n\nA.x = 100 # 이렇게 되면 앞으로 만들어진 인스턴스는 기본적으로 현재 인스턴스에서 100번 f를 실행하였다는 정보를 가지고 태어나게 된다. \n\n\n[A.x, A.y], [a.x,a.y]\n\n([100, 1], [1, 1])\n\n\n- 시점3\n\nb=A()\n\n\n[A.x, A.y], [a.x,a.y], [b.x,b.y] \n\n([100, 1], [1, 1], [100, 1])\n\n\n- 시점4\n\nb.f()\n\n현재 인스턴스에서 f가 101번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행\n\n\n- 시점5\n\na.f()\n\n현재 인스턴스에서 f가 2번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 3번 실행\n\n\n\na.f()\n\n현재 인스턴스에서 f가 3번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 4번 실행\n\n\n\nb.f()\n\n현재 인스턴스에서 f가 102번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 5번 실행\n\n\n\n\n\n- 시점0\n\nclass B: \n    x=10 # 초기자본금 \n    y=0 \n    def f(self): # f()를 실행할때마다 돈을 쓴다. \n        self.x = self.x - 1 \n        B.y = B.y + 1 \n        print(\"현재 인스턴스에서 {}원 잔액남음\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 총 {}원 사용\".format(self.y))\n\n\na=B()\n\n\nb=B()\n\n\n[B.x,B.y], [a.x,a.y], [b.x,b.y]\n\n([10, 0], [10, 0], [10, 0])\n\n\n- 시점1\n\na.f() # 돈을쓰는것\n\n현재 인스턴스에서 9원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 1원 사용\n\n\n\na.f()\n\n현재 인스턴스에서 8원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 2원 사용\n\n\n\nb.f()\n\n현재 인스턴스에서 9원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 3원 사용\n\n\n- 시점2\n\n[B.x,B.y], [a.x,a.y], [b.x,b.y]\n\n([10, 3], [8, 3], [9, 3])\n\n\n\nB.x = 999\n\n\n[B.x,B.y], [a.x,a.y], [b.x,b.y]\n\n([999, 3], [8, 3], [9, 3])\n\n\n- 시점3\n\nc = B()\n\n\nc.f()\n\n현재 인스턴스에서 998원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 4원 사용\n\n\n- 시점4\n\na.f()\n\n현재 인스턴스에서 7원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 5원 사용\n\n\n\nb.f()\n\n현재 인스턴스에서 8원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 6원 사용\n\n\n\nc.f()\n\n현재 인스턴스에서 997원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 7원 사용\n\n\n\nc.f()\n\n현재 인스턴스에서 996원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 8원 사용\n\n\n\nc.f()\n\n현재 인스턴스에서 995원 잔액남음\nA클래스에서 만들어진 모든 인스턴스들에서 총 9원 사용\n\n\n\n\n\n- 시점0\n\nclass A: \n    x=0\n    y=0 \n    def f(self):\n        self.x = self.x + 1 \n        A.y = A.y + 1 \n        print(\"현재 인스턴스에서 f가 {}번 실행\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행\".format(self.y))\n\n\na=A()\nb=A()\n\n\n[A.x, A.y], [a.x,a.y], [b.x,b.y]\n\n([0, 0], [0, 0], [0, 0])\n\n\n- 시점1\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행\n\n\n\nb.f()\n\n현재 인스턴스에서 f가 1번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행\n\n\n\na.f()\n\n현재 인스턴스에서 f가 2번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 3번 실행\n\n\n\n[A.x, A.y], [a.x,a.y], [b.x,b.y]\n\n([0, 3], [2, 3], [1, 3])\n\n\n- 시점2\n\na.y ## 인스턴스a에 소속되어있지만 클래스변수\n\n3\n\n\n\na.y = 999 ## 내가 하드코딩으로 a.y에 999를 입력 -> 이것이 A.y나 b.y에도 반영될까? (X) \n\n\n[A.x, A.y], [a.x,a.y], [b.x,b.y]\n\n([0, 3], [2, 999], [1, 3])\n\n\n- 시점3\n\nb.f()\n\n현재 인스턴스에서 f가 2번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 4번 실행\n\n\n\na.f()\n\n현재 인스턴스에서 f가 3번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 999번 실행\n\n\n\nb.f()\n\n현재 인스턴스에서 f가 3번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 6번 실행\n\n\n\nb.f()\n\n현재 인스턴스에서 f가 4번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 7번 실행\n\n\n\na.f()\n\n현재 인스턴스에서 f가 4번 실행\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 999번 실행\n\n\n- 요약 - 인스턴스에서 클래스변수의 값을 변경하면? -> 클래스변수의 값이 변경되는 것이 아니라 인스턴스변수가 새롭게 만들어져서 할당된다. - 이 예제에서 a.y는 이제 클래스변수에서 인스턴스변수로 재탄생되었다. 즉 999 오브젝트가 새롭게 만들어져서 a.y라는 이름을 얻은것임. - 기존의 A.y나 b.y에는 아무런 변화가 없다.\n\na.y = 999 은 새로운 인스턴변수 y를 할당하는 역할을 한다. 클래스변수의 값을 변경하는 것이 아니다. (왜냐하면 애초에 a.y는 없는 값이었고, A.y를 빌리고 있었던 것임)\n\n\na.__dict__\n\n{'x': 2, 'y': 999}\n\n\n\nb.__dict__\n\n{'x': 1}\n\n\n\n\n\n- 시점0\n\nclass A: \n    x=0\n    y=0 \n    def f(self):\n        self.x = self.x + 1 \n        A.y = A.y + 1 \n        print(\"현재 인스턴스에서 f가 {}번 실행 (인스턴스레벨)\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행 (클래스레벨)\".format(A.y))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행 (인스턴스레벨)\".format(self.y))\n\n\na=A()\n\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행 (클래스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행 (인스턴스레벨)\n\n\n\nb=A()\n\n\nb.f()\n\n현재 인스턴스에서 f가 1번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행 (클래스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행 (인스턴스레벨)\n\n\n- 시점1\n\na.y = 999 \n\n\na.f()\n\n현재 인스턴스에서 f가 2번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 3번 실행 (클래스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 999번 실행 (인스턴스레벨)\n\n\n\na.f()\n\n현재 인스턴스에서 f가 3번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 4번 실행 (클래스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 999번 실행 (인스턴스레벨)\n\n\n\na.f()\n\n현재 인스턴스에서 f가 4번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 5번 실행 (클래스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 999번 실행 (인스턴스레벨)\n\n\n\n\n\n- 의문: 아래의 코드에서 x는 클래변수라고 봐야할까? 인스턴스 변수라고 봐야할까? –> 클래스변수\nclass SoWhaTV: \n    x=0 ### 이 시점에서 x는 클래스변수인가? 아니면 인스턴변수인가? \n    def f(self):\n        print(self.x) \n- 시점0\n\nclass A: \n    x=0\n    y=0 \n    def f(self):\n        self.x = self.x + 1 \n        A.y = A.y + 1 \n        print(\"현재 인스턴스에서 f가 {}번 실행 (인스턴스레벨)\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행 (클래스레벨)\".format(A.y))\n        #print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행 (인스턴스레벨)\".format(self.y))\n\n\na=A()\nb=A()\n\n\na.x,a.y,b.x,b.y \n\n(0, 0, 0, 0)\n\n\n\na.__dict__, b.__dict__\n\n({}, {})\n\n\n\n지금 시점에서 a.x, a.y, b.x, b.y 는 모두 클래스변수임\n\n- 시점1\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행 (클래스레벨)\n\n\n\na.__dict__, b.__dict__\n\n({'x': 1}, {})\n\n\n\n이 순간 a.x가 클래스변수에서 인스턴스변수로 변경되었다. 왜? f가 실행되면서 self.x = self.x + 1 이 실행되었으므로!\n\n- 시점2\n\nb.f()\n\n현재 인스턴스에서 f가 1번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행 (클래스레벨)\n\n\n\na.__dict__, b.__dict__\n\n({'x': 1}, {'x': 1})\n\n\n\n\n\n- 아래처럼 코드를 바꾸면 어떻게 되는가?\n\nclass A: \n    def __init__(self): \n        self.x=0 # 인스턴스변수로 나중에 쓸꺼니까 명시함 \n        A.y=0 # 클래스변수로 나중에 쓸꺼니까 명시함 \n    def f(self):\n        self.x = self.x + 1 \n        A.y = A.y + 1 \n        print(\"현재 인스턴스에서 f가 {}번 실행 (인스턴스레벨)\".format(self.x))\n        print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행 (클래스레벨)\".format(A.y))\n        #print(\"A클래스에서 만들어진 모든 인스턴스들에서 f가 총 {}번 실행 (인스턴스레벨)\".format(self.y))\n\n- 사용해보자.\n\na=A()\nb=A()\n\n\na.f()\n\n현재 인스턴스에서 f가 1번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행 (클래스레벨)\n\n\n\nb.f()\n\n현재 인스턴스에서 f가 1번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 2번 실행 (클래스레벨)\n\n\n\nb.f()\n\n현재 인스턴스에서 f가 2번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 3번 실행 (클래스레벨)\n\n\n\nb.f()\n\n현재 인스턴스에서 f가 3번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 4번 실행 (클래스레벨)\n\n\n\na.f()\n\n현재 인스턴스에서 f가 2번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 5번 실행 (클래스레벨)\n\n\n- 잘 되는것 같다?\n- 조금만 생각해보면 엉터리라는 것을 알 수 있다. 아래를 관찰해보자.\n\nc=A() # 이 시점에서 __init__()이 실행된다! \n\n\na.f()\n\n현재 인스턴스에서 f가 3번 실행 (인스턴스레벨)\nA클래스에서 만들어진 모든 인스턴스들에서 f가 총 1번 실행 (클래스레벨)\n\n\n\n클래스레벨의 변수가 왜 초기화가 되었지?\n\n- 오류의 이유? c=A()가 실행되는 시점에 __init__()이 실행되면서 A.y=0이 실행된다. 따라서 강제초기화가 진행되었음\n\n\n\n\n아래의 조건에 맞는 클래스를 생성하라.\n\n['가위','바위']와 같은 리스트를 입력으로 받아 인스턴스를 생성한다.\n위의 리스트에서 하나의 값을 뽑는 메소드 f를 가지고 있다.\n\n(3) f의 실행횟수를 기록하는 기능을 가진다. (각 인스턴스에서 실행한 횟수, 클래스에서 생성된 모든 인스턴스에서 실행한 횟수 모두 기록)\n사용예시\na = Klass(['가위','바위'])\na.f() # 가위가 1/2 바위가 1/2의 확률로 출력 \nb = Klass(['가위','바위','보'])\nb.f() # 가위, 바위, 보가 1/3의 확률로 출력"
  },
  {
    "objectID": "posts/2022-05-23-(12주차) 5월23일.html",
    "href": "posts/2022-05-23-(12주차) 5월23일.html",
    "title": "PP2023",
    "section": "",
    "text": "클래스 공부 4단계\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-yFD2egdVArP7O2A5r8s0Gz\n\n- (1/4) motivating example\n- (2/4) __str__, 파이썬의 비밀2\n- (3/4) __repr__, 파이썬의 비밀3\n- (4/4) 주피터노트북의 비밀 (_repr_html_), __repr__와 __str__의 우선적용 순위\n\n\n\n\nimport numpy as np\n\n\n\n\n\n\n- 가위바위보\n\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n    def throw(self):\n        print(np.random.choice(self.candidate))\n\n\na=RPS() # __init__는 암묵적으로 실행\n\n\na.throw()\n\n보\n\n\n- 생각해보니까 throw는 choose + show 의 결합인것 같다.\n\nclass RPS: ## 시점1\n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n    def choose(self):\n        self.actions = np.random.choice(self.candidate)\n    def show(self):\n        print(self.actions)\n\n\na=RPS() ## 시점2\n\n\na.actions ## 시점3\n\nAttributeError: 'RPS' object has no attribute 'actions'\n\n\n\na.choose() ## 시점4\n\n\na.actions ## 시점5 \n\n'바위'\n\n\n\na.show() ## 시점6\n\n바위\n\n\n보충학습: 위와 같은코드\n\nclass _RPS: ## 시점1\n    pass # <- 이렇게하면 아무기능이 없는 비어있는 클래스가 정의된다 \n\n\n_a = _RPS() ## 시점2\ndef _init(_a,candidate=['가위','바위','보']):\n    _a.candidate = candidate \n_init(_a)\n\n\n_a.actions ## 시점3\n\nAttributeError: '_RPS' object has no attribute 'actions'\n\n\n\ndef _choose(_a): ## 시점4\n    _a.actions = np.random.choice(_a.candidate)\n_choose(_a)\n\n\n_a.actions ## 시점5\n\n'바위'\n\n\n\ndef _show(_a): ## 시점6\n    print(_a.actions)\n_show(_a)\n\n바위\n\n\n- 또 다른 인스턴스 b를 만들자. b는 가위만 낼 수 있다.\n\nb=RPS(['가위'])\n\n\nb.candidate\n\n['가위']\n\n\n\nb.choose()\nb.show()\n\n가위\n\n\n- a,b의 선택들을 모아서 기록을 하고 싶다.\n\nclass RPS:\n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def show(self):\n        print(self.actions[-1])\n\n\na=RPS()\nb=RPS(['가위'])\n\n\nfor i in range(5):\n    a.choose()\n    a.show()\n\n가위\n보\n보\n바위\n가위\n\n\n\na.actions\n\n['가위', '보', '보', '바위', '가위']\n\n\n\nfor i in range(5):\n    b.choose()\n    b.show()\n\n가위\n가위\n가위\n가위\n가위\n\n\n\nb.actions\n\n['가위', '가위', '가위', '가위', '가위']\n\n\n- info라는 함수를 만들어서 a,b 오브젝트가 가지고 있는 정보를 모두 보도록 하자.\n(예비학습) 문자열 \\n이 포함된다면?\n\n'asdf\\n1234'\n\n'asdf\\n1234'\n\n\n\nprint('asdf\\n1234')\n\nasdf\n1234\n\n\n예비학습 끝\n\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def show(self):\n        print(self.actions[-1])\n    def info(self):\n        print(\"낼 수 있는 패: {}\\n기록: {}\".format(self.candidate,self.actions))\n\n\na=RPS()\nb=RPS(['가위'])\n\n\nfor i in range(5):\n    a.choose()\n    a.show()    \n\n가위\n바위\n가위\n바위\n바위\n\n\n\nfor i in range(5):\n    b.choose()\n    b.show()\n\n가위\n가위\n가위\n가위\n가위\n\n\n\na.info()\n\n낼 수 있는 패: ['가위', '바위', '보']\n기록: ['가위', '바위', '가위', '바위', '바위']\n\n\n\nb.info()\n\n낼 수 있는 패: ['가위']\n기록: ['가위', '가위', '가위', '가위', '가위']\n\n\n- 만들고보니까 info와 print의 기능이 거의 비슷함 \\(\\to\\) print(a)를 하면 a.info()와 동일한 효과를 내도록 만들 수 있을까?\n- 말도 안되는 소리같다. 왜? - 이유1: print는 파이썬 내장기능, 내장기능을 우리가 맘대로 커스터마이징해서 쓰기는 어려울 것 같다. - 이유2: 이유1이 해결된다고 쳐도 문제다. 그럼 지금까지 우리가 사용했던 수 많은 print()의 결과는 어떻게 되는가?\n- 그런데 a의 자료형(RPS자료형)에 해당하는 오브젝트들에 한정하여 print를 수정하는 방법이 가능하다면? (그럼 다른 오브젝트들은 수정된 print에 영향을 받지 않음)\n\n\n\n- 관찰1: 현재 print(a)의 결과는 아래와 같다.\n\nprint(a)\n\n<__main__.RPS object at 0x7f091837a550>\n\n\n\na는 RPS클래스에서 만든 오브젝트이며 a가 저장된 메모리 주소는 0x7fef32fef8b0라는 의미\n\n- 관찰2: a에는 __str__이 있다.\n\nset(dir(a)) & {'__str__'}\n\n{'__str__'}\n\n\n이것을 함수처럼 사용하니까 아래와 같이 된다.\n\na.__str__()\n\n'<__main__.RPS object at 0x7f091837a550>'\n\n\n?? print(a)를 해서 나오는 문자열이 리턴된다..\n\nprint(a.__str__()) # 이거 print(a)를 실행한 결과와 같다?\n\n<__main__.RPS object at 0x7f091837a550>\n\n\n- 생각: 만약에 내가 a.__str__()라는 함수를 재정의하여 리턴값을 ’guebin hahaha’로 바꾸게 되면 print(a)해서 나오는 결과는 어떻게 될까? (약간 해커같죠)\n(예비학습) 함수덮어씌우기\n\ndef f():\n    print('asdf')\n\n\nf()\n\nasdf\n\n\n\ndef f():\n    print('guebin hahaha')\n\n\nf()\n\nguebin hahaha\n\n\n이런식으로 함수가 이미 정의되어 있더라도, 내가 나중에 덮어씌우면 그 함수의 기능을 다시 정의한다.\n(해킹시작)\n\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def show(self):\n        print(self.actions[-1])\n    def __str__(self):\n        return 'guebin hahaha'\n    def info(self):\n        print(\"낼 수 있는 패: {}\\n기록: {}\".format(self.candidate,self.actions))\n\n\na=RPS()\n\n\nprint(a)\n\nguebin hahaha\n\n\n\nprint(a.__str__())\n\nguebin hahaha\n\n\n- __str__의 리턴값을 info에서 타이핑했던 문자열로 재정의한다면?\n\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def show(self):\n        print(self.actions[-1])\n    def __str__(self):\n        return \"낼 수 있는 패: {}\\n기록: {}\".format(self.candidate,self.actions)\n\n\na=RPS()\n\n\nprint(a)\n\n낼 수 있는 패: ['가위', '바위', '보']\n기록: []\n\n\n\na.choose()\na.show()\n\n보\n\n\n\nprint(a)\n\n낼 수 있는 패: ['가위', '바위', '보']\n기록: ['보']\n\n\n\n\n\n- print(a)와 print(a.__str__())는 같은 문법이다.\n- 참고로 a.__str__()와 str(a)도 같은 문법이다.\n\na.__str__()\n\n\"낼 수 있는 패: ['가위', '바위', '보']\\n기록: ['보']\"\n\n\n\nstr(a)\n\n\"낼 수 있는 패: ['가위', '바위', '보']\\n기록: ['보']\"\n\n\n- 지금까지 우리가 썼던 기능들 확인!\n(예제1)\n\na=[1,2,3]\n\n\nprint(a)\n\n[1, 2, 3]\n\n\n\na.__str__()\n\n'[1, 2, 3]'\n\n\n\nstr(a)\n\n'[1, 2, 3]'\n\n\n(예제2)\n\na={1,2,3}\nprint(a)\n\n{1, 2, 3}\n\n\n\na.__str__()\n\n'{1, 2, 3}'\n\n\n\nstr(a)\n\n'{1, 2, 3}'\n\n\n(예제3)\n\na=np.array(1)\na.shape\n\n()\n\n\n\nprint(a.shape)\n\n()\n\n\n\na.shape.__str__()\n\n'()'\n\n\n\nstr(a.shape)\n\n'()'\n\n\n(예제4)\n\na=range(10) \nprint(a)\n\nrange(0, 10)\n\n\n\na.__str__()\n\n'range(0, 10)'\n\n\n\nstr(a)\n\n'range(0, 10)'\n\n\n(예제5)\n\na = np.arange(100).reshape(10,10)\nprint(a)\n\n[[ 0  1  2  3  4  5  6  7  8  9]\n [10 11 12 13 14 15 16 17 18 19]\n [20 21 22 23 24 25 26 27 28 29]\n [30 31 32 33 34 35 36 37 38 39]\n [40 41 42 43 44 45 46 47 48 49]\n [50 51 52 53 54 55 56 57 58 59]\n [60 61 62 63 64 65 66 67 68 69]\n [70 71 72 73 74 75 76 77 78 79]\n [80 81 82 83 84 85 86 87 88 89]\n [90 91 92 93 94 95 96 97 98 99]]\n\n\n\na.__str__()\n\n'[[ 0  1  2  3  4  5  6  7  8  9]\\n [10 11 12 13 14 15 16 17 18 19]\\n [20 21 22 23 24 25 26 27 28 29]\\n [30 31 32 33 34 35 36 37 38 39]\\n [40 41 42 43 44 45 46 47 48 49]\\n [50 51 52 53 54 55 56 57 58 59]\\n [60 61 62 63 64 65 66 67 68 69]\\n [70 71 72 73 74 75 76 77 78 79]\\n [80 81 82 83 84 85 86 87 88 89]\\n [90 91 92 93 94 95 96 97 98 99]]'\n\n\n\nstr(a)\n\n'[[ 0  1  2  3  4  5  6  7  8  9]\\n [10 11 12 13 14 15 16 17 18 19]\\n [20 21 22 23 24 25 26 27 28 29]\\n [30 31 32 33 34 35 36 37 38 39]\\n [40 41 42 43 44 45 46 47 48 49]\\n [50 51 52 53 54 55 56 57 58 59]\\n [60 61 62 63 64 65 66 67 68 69]\\n [70 71 72 73 74 75 76 77 78 79]\\n [80 81 82 83 84 85 86 87 88 89]\\n [90 91 92 93 94 95 96 97 98 99]]'\n\n\n\n\n\n- 생각해보니까 print를 해서 우리가 원하는 정보를 확인하는건 아니었음\n\na=[1,2,3]\n\n\na\n\n[1, 2, 3]\n\n\n\nprint(a) \n\n[1, 2, 3]\n\n\n- a + 엔터는 print(a) + 엔터와 같은효과인가?\n(반례)\n\na=np.array([1,2,3,4]).reshape(2,2)\n\n\na\n\narray([[1, 2],\n       [3, 4]])\n\n\n\nprint(a)\n\n[[1 2]\n [3 4]]\n\n\n- a + 엔터는 print(a) + 엔터가 다른 경우도 있다. \\(\\to\\) 추측: 서로 다른 숨겨진 기능이 있다! \\(\\to\\) 결론: 추측이 맞다. 그 기능은 __repr__에 저장되어있음.\n\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def show(self):\n        print(self.actions[-1])\n    def __repr__(self):\n        return \"낼 수 있는 패: {}\\n기록: {}\".format(self.candidate,self.actions)\n\n\na=RPS()\n\n\na # print(a.__repr__())\n\n낼 수 있는 패: ['가위', '바위', '보']\n기록: []\n\n\n- 그럼 우리가 지금까지 했던것은?\n\na = np.array([1,2,3])\n\n\na\n\narray([1, 2, 3])\n\n\n\nprint(a)\n\n[1 2 3]\n\n\n\na.__repr__()\n\n'array([1, 2, 3])'\n\n\n\na.__str__()\n\n'[1 2 3]'\n\n\n\n\n\n- 대화형콘솔에서 오브젝트이름+엔터를 쳐서 나오는 출력은 __repr__의 결과와 연관있다.\n\na = np.array(range(10000)).reshape(100,100)\na\n\narray([[   0,    1,    2, ...,   97,   98,   99],\n       [ 100,  101,  102, ...,  197,  198,  199],\n       [ 200,  201,  202, ...,  297,  298,  299],\n       ...,\n       [9700, 9701, 9702, ..., 9797, 9798, 9799],\n       [9800, 9801, 9802, ..., 9897, 9898, 9899],\n       [9900, 9901, 9902, ..., 9997, 9998, 9999]])\n\n\n\na.__repr__()\n\n'array([[   0,    1,    2, ...,   97,   98,   99],\\n       [ 100,  101,  102, ...,  197,  198,  199],\\n       [ 200,  201,  202, ...,  297,  298,  299],\\n       ...,\\n       [9700, 9701, 9702, ..., 9797, 9798, 9799],\\n       [9800, 9801, 9802, ..., 9897, 9898, 9899],\\n       [9900, 9901, 9902, ..., 9997, 9998, 9999]])'\n\n\n- 참고로 a.__repr__()은 repr(a)와 같다.\n\nrepr(a)\n\n'array([[   0,    1,    2, ...,   97,   98,   99],\\n       [ 100,  101,  102, ...,  197,  198,  199],\\n       [ 200,  201,  202, ...,  297,  298,  299],\\n       ...,\\n       [9700, 9701, 9702, ..., 9797, 9798, 9799],\\n       [9800, 9801, 9802, ..., 9897, 9898, 9899],\\n       [9900, 9901, 9902, ..., 9997, 9998, 9999]])'\n\n\n\n\n\n- 요즘에는 IDE의 발전에 따라서 오브젝트이름+엔터칠떄 나오는 출력의 형태도 다양해지고 있음\n\nimport pandas as pd \n\n\ndf = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n    \n  \n  \n    \n      0\n      1\n      2\n    \n    \n      1\n      2\n      3\n    \n    \n      2\n      3\n      4\n    \n  \n\n\n\n\n\n예쁘게나온다.\n\n- 위의결과는 print(df.__repr__())의 결과와 조금 다르게 나온다?\n\nprint(df.__repr__())\n\n   a  b\n0  1  2\n1  2  3\n2  3  4\n\n\n- print(df.__repr__())는 예전 검은화면에서 코딩할때가 나오는 출력임\nPython 3.10.2 | packaged by conda-forge | (main, Feb  1 2022, 19:28:35) [GCC 9.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import pandas as pd \n>>> df = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})\n>>> df\n   a  b\n0  1  2\n1  2  3\n2  3  4\n>>> \n- 주피터에서는? “오브젝트이름+엔터”치면 HTML(df._repr_html_())이 실행되고, _repr_html_()이 정의되어 있지 않으면 print(df.__repr__())이 실행된다.\n\ndf._repr_html_()\n\n'<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>a</th>\\n      <th>b</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>1</td>\\n      <td>2</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>2</td>\\n      <td>3</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>3</td>\\n      <td>4</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>'\n\n\n\nhtml코드!\n\n\nfrom IPython.core.display import HTML\n\n\nHTML(df._repr_html_())\n\n\n\n\n\n  \n    \n      \n      a\n      b\n    \n  \n  \n    \n      0\n      1\n      2\n    \n    \n      1\n      2\n      3\n    \n    \n      2\n      3\n      4\n    \n  \n\n\n\n\n- 물론 df._repr_html_()함수가 내부적으로 있어도 html이 지원되지 않는 환경이라면 print(df.__repr__())이 내부적으로 수행된다.\n\n\n\n(예제1)\n- 아래의 예제를 관찰하자.\n\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def show(self):\n        print(self.actions[-1])\n    def __repr__(self):\n        return \"낼 수 있는 패: {}\\n기록: {}\".format(self.candidate,self.actions)\n\n\na=RPS()\na\n\n낼 수 있는 패: ['가위', '바위', '보']\n기록: []\n\n\n\na.__repr__()\n\n\"낼 수 있는 패: ['가위', '바위', '보']\\n기록: []\"\n\n\n\nrepr(a)\n\n\"낼 수 있는 패: ['가위', '바위', '보']\\n기록: []\"\n\n\n- 여기까지는 상식수준의 결과임. 이제 아래를 관찰하라.\n\nprint(a) # print(a.__str__())\n\n낼 수 있는 패: ['가위', '바위', '보']\n기록: []\n\n\n\na.__str__()\n\n\"낼 수 있는 패: ['가위', '바위', '보']\\n기록: []\"\n\n\n\nstr(a)\n\n\"낼 수 있는 패: ['가위', '바위', '보']\\n기록: []\"\n\n\n\n__str__()은 건드린적이 없는데? \\(\\to\\) 건드린적은 없는데 기능이 바껴있음\n\n\na.__str__??\n\n\nSignature:      a.__str__()\nCall signature: a.__str__(*args, **kwargs)\nType:           method-wrapper\nString form:    <method-wrapper '__str__' of RPS object at 0x7f08f1eebb90>\nDocstring:      Return str(self).\n\n\n\n\n\na.__repr__??\n\n\nSignature: a.__repr__()\nDocstring: Return repr(self).\nSource:   \n    def __repr__(self):\n        return \"낼 수 있는 패: {}\\n기록: {}\".format(self.candidate,self.actions)\nFile:      /tmp/ipykernel_410503/2192172939.py\nType:      method\n\n\n\n\n(예제2)\n- 아래의 예제를 관찰하자.\n\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def show(self):\n        print(self.actions[-1])\n    def __str__(self):\n        return \"낼 수 있는 패: {}\\n기록: {}\".format(self.candidate,self.actions)\n\n\na=RPS()\n\n\nprint(a)\n\n낼 수 있는 패: ['가위', '바위', '보']\n기록: []\n\n\n\na\n\n<__main__.RPS at 0x7f08f1f0f290>\n\n\n\na.__str__()\n\n\"낼 수 있는 패: ['가위', '바위', '보']\\n기록: []\"\n\n\n\na.__repr__()\n\n'<__main__.RPS object at 0x7f08f1f0f290>'\n\n\n\na.__str__??\n\n\nSignature: a.__str__()\nDocstring: Return str(self).\nSource:   \n    def __str__(self):\n        return \"낼 수 있는 패: {}\\n기록: {}\".format(self.candidate,self.actions)\nFile:      /tmp/ipykernel_410503/793119288.py\nType:      method\n\n\n\n\n\na.__repr__??\n\n\nSignature:      a.__repr__()\nCall signature: a.__repr__(*args, **kwargs)\nType:           method-wrapper\nString form:    <method-wrapper '__repr__' of RPS object at 0x7f08f1f0f290>\nDocstring:      Return repr(self).\n\n\n\n\n(예제3)\n\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def show(self):\n        print(self.actions[-1])\n    def __repr__(self):\n        return \"guebin hahaha\"\n    def __str__(self):\n        return \"낼 수 있는 패: {}\\n기록: {}\".format(self.candidate,self.actions)\n\n\na=RPS()\n\n\na\n\nguebin hahaha\n\n\n\nprint(a)\n\n낼 수 있는 패: ['가위', '바위', '보']\n기록: []\n\n\n- __str__와 __repr__을 건드리지 않고 출력결과를 바꾸고 싶다면?\n\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def show(self):\n        print(self.actions[-1])\n    def _repr_html_(self):\n        html_str = \"\"\"\n        낼 수 있는 패: {} <br/> \n        기록: {}\n        \"\"\"\n        return html_str.format(self.candidate,self.actions)\n\n\na=RPS()\n\n\nstr(a)\n\n'<__main__.RPS object at 0x7f08f1eb5590>'\n\n\n\nrepr(a)\n\n'<__main__.RPS object at 0x7f08f1eb5590>'\n\n\n\na\n\n\n        낼 수 있는 패: ['가위', '바위', '보']  \n        기록: []\n        \n\n\n\nfor i in range(5):\n    a.choose()\n    a.show()\n\n바위\n보\n보\n보\n가위\n\n\n\na\n\n\n        낼 수 있는 패: ['가위', '바위', '보']  \n        기록: ['바위', '보', '보', '보', '가위']\n        \n\n\n\n\n\n\n아래의 클래스를 수정하여\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def show(self):\n        print(self.actions[-1])\n    def _repr_html_(self):\n        html_str = \"\"\"\n        낼 수 있는 패: {} <br/> \n        기록: {}\n        \"\"\"\n        return html_str.format(self.candidate,self.actions)\n클래스에서 생성된 인스턴스의 출력결과가 아래와 같도록 하라.\n학번: 202143052 \n낼 수 있는 패: ['가위', '바위', '보']\n기록: ['가위', '가위', '보', '보', '바위']"
  },
  {
    "objectID": "posts/2022-05-03-2022년 파이썬입문 중간고사 해설.html",
    "href": "posts/2022-05-03-2022년 파이썬입문 중간고사 해설.html",
    "title": "PP2023",
    "section": "",
    "text": "youtube: https://youtube.com/playlist?list=PLQqh36zP38-ylgm3-dn93yv2BCM7_8kFy\n\n\n\n아래코드를 이용하여 numpy 와 matplotlib을 import하라.\n\nimport numpy as np\nimport matplotlib.pyplot as plt \n\n\n\n\n주의: 문제에 조건이 있는 경우 조건을 준수할 것\n(1) a의 type을 bool로 바꾸어라.\n\na=1.0\n\n(풀이)\n\nbool(a)\n\nTrue\n\n\n\nnote: 출제의도: 자료형의 변환\n\n\n(2)-(6)\n아래의 문자열을 고려하자.\n\ntest_arr = 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSUGPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XAt3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/EnmZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbxNrRFi9wrf+M7Q== schacon@mylaptop.local'\n\n(2) 위 문자열에서 짝수번째 원소를 출력하는 코드를 작성하라.\n(풀이)\n\ntest_arr[1::2]\n\n's-s AA3zCy2AABwAQAlUkHfY7bmINTKTo/WSGlnflDY7d4Ze1J4WjhFvQMxEEfhlXQkPpw0d3b7OJMylXC+A3XiBxXnhpAscL86jNQddFSV/XtFoosc19530w8eFbzUlQKrX8yNvYb6wP0wr/nZA4ZnP8ZmMuyDc8Zi8+wr+namkns10QalqSbNRiwfMQ=shcnmlpo.oa'\n\n\n\nnote: 출제의도: 인덱싱, 스트라이딩\n\n(3) 위 문자열에서 마지막 10개의 원소를 출력하는 코드를 작성하라.\n(풀이)\n\ntest_arr[-10:]\n\n'ptop.local'\n\n\n\nnote: 출제의도: -인덱싱\n\n(4) 위 문자열을 뒤집은 문자열을 구하는 코드를 작성하라. 즉 아래를 출력하는 코드를 작성하라.\n'lacol.potpalym@nocahcs ==Q7M+frw9iFRrNxbsSVqMlTarQ10d1os2njkImtaKn1+3r3wg+b8li/Z68Ec2DryauLMVmPZ98IPTnPZO4WA+ZmnE/trewr0bP/wv6ybNYjvDNpyX88XrrpKJQjlFUuz1bmFIe/86wW0V3+5x9Q1McnsAoJoaF3tAX7/KVlSvFMdsdwQANsjR6V8qLicMsZAHpXhKn1XixqBtiRXF3oAH+RCFXWlByTM/JdOk7vbP3adc0gwSppPbkVQ5XFl9h4fVELElx7MzQivrFUhbj9WJ4HJ81we5Zy4Idh7WYTDHlzfan+lPGUSDWB/mojT9KGTLNpITmrbS71YHfrHDkpUOlkAEQAAAwIBAAAAE2cy1CazN3BAAAA asr-hss'\n(풀이)\n\ntest_arr[::-1]\n\n'lacol.potpalym@nocahcs ==Q7M+frw9iFRrNxbsSVqMlTarQ10d1os2njkImtaKn1+3r3wg+b8li/Z68Ec2DryauLMVmPZ98IPTnPZO4WA+ZmnE/trewr0bP/wv6ybNYjvDNpyX88XrrpKJQjlFUuz1bmFIe/86wW0V3+5x9Q1McnsAoJoaF3tAX7/KVlSvFMdsdwQANsjR6V8qLicMsZAHpXhKn1XixqBtiRXF3oAH+RCFXWlByTM/JdOk7vbP3adc0gwSppPbkVQ5XFl9h4fVELElx7MzQivrFUhbj9WJ4HJ81we5Zy4Idh7WYTDHlzfan+lPGUSDWB/mojT9KGTLNpITmrbS71YHfrHDkpUOlkAEQAAAwIBAAAAE2cy1CazN3BAAAA asr-hss'\n\n\n\nnote: 출제의도: -1 스트라이딩\n\n(5) 위 문자열에서 대문자의 수를 count하라.\n(풀이)\n\nsum([s.isupper() for s in test_arr])\n\n155\n\n\n\nnote: 출제의도: 리스트컴프리헨션, bool자료형의 sum\n\nhint .isupper() 메소드를 이용할 것.\n\n'a'.isupper()\n\nFalse\n\n\n\n'A'.isupper()\n\nTrue\n\n\n\n'='.isupper()\n\nFalse\n\n\n\n'@'.isupper()\n\nFalse\n\n\n(6) 위 문자열에서 사용된 문자 및 특수문자의 종류는 모두 몇가지 인가?\n(풀이)\n\nlen(set(test_arr))\n\n69\n\n\n\nnote: 출제의도: set 자료형의 이해\n\nnote1: 문자열 ‘AAB @ab’ 에서 사용된 문자는 ‘A’, ‘B’, ’ ‘,’@‘, ’a’, ‘b’ 이므로 모두 6종류의 문자 및 특수문자가 사용되었다.\nnote2: ’ ‘,’+‘,’-‘,’.’, ‘/’, ‘=’, ‘@’, ‘1’, ‘a’, ‘A’ 등을 모두 다른 문자로 취급한다.\n\n(7) 리스트컴프리헨션을 이용하여 아래와 같은 리스트를 생성하라\n['a',\n 'aa',\n 'aaa',\n 'aaaa',\n 'aaaaa',\n 'aaaaaa',\n 'aaaaaaa',\n 'aaaaaaaa',\n 'aaaaaaaaa',\n 'aaaaaaaaaa'] <- a가 10개있음 \n(풀이)\n\n['a'*i for i in range(1,11)]\n\n['a',\n 'aa',\n 'aaa',\n 'aaaa',\n 'aaaaa',\n 'aaaaaa',\n 'aaaaaaa',\n 'aaaaaaaa',\n 'aaaaaaaaa',\n 'aaaaaaaaaa']\n\n\n\nnote: 출제의도: 문자열의 * 연산, 리스트컴프리헨션\n\n(8) 길이가 1인 튜플을 만들어 자신의 학번을 저장하라. 길이가 1인 튜플을 만들어 자신의 영문이름을 저장하라. 두 튜플을 + 연산자로 합쳐아래와 같은 출력결과를 얻어라.\n(202143052,'guebin')\n(풀이)\n\na=(202143052,)\nb=('guebin',)\na+b\n\n(202143052, 'guebin')\n\n\n\nnote: 출제의도: 튜플의 + 연산, 길이가 1인 튜플\n\n(9) 아래와 같은 list가 있다고 하자.\ntest_lst = [['g',1],['u',5],['e',2],['b',8],['i',2],['n',9]]\ntest_lst와 리스트컴프리헨션을 이용하여 아래를 출력하는 코드를 구현하라.\n['g', 'uuuuu', 'ee', 'bbbbbbbb', 'ii', 'nnnnnnnnn']\n(풀이)\n\ntest_lst = [['g',1],['u',5],['e',2],['b',8],['i',2],['n',9]]\n[i*j for i,j in test_lst]\n\n['g', 'uuuuu', 'ee', 'bbbbbbbb', 'ii', 'nnnnnnnnn']\n\n\n\nnote: 출제의도: 스트링의 + 연산, 리스트 컴프리헨션\n\n(10) 다음은 학생들의 출석,레포트,중간고사,기말고사 점수를 입력으로 하여 학점을 계산하는 함수이다.\n\ndef grade(attendance, report, mid, final): \n    if attendance<70: \n        credit = 'F' \n    else: \n        total_score = attendance * 0.1 + report * 0.2 + mid * 0.3 + final * 0.4 \n        if total_score > 80: \n            credit = 'A+' \n        else:\n            credit = 'B0' \n    return credit \n\n아래는 학생들의 학번, 출석점수, 레포트, 중간고사, 기말고사 점수가 입력된 리스트이다.\n\ndata = [['202212345', [100,95,25,90]],\n        ['202212346', [60,90,95,95]],\n        ['202212347', [50,90,45,35]],\n        ['202212348', [90,90,50,75]],\n        ['202212349', [100,95,85,85]],\n        ['202212350', [90,90,100,95]],\n        ['202212351', [100,95,100,95]],\n        ['202212352', [95,85,80,60]],\n        ['202212353', [100,90,60,55]],\n        ['202212354', [100,85,70,95]],\n        ['202212355', [100,95,40,100]]]\n\n아래의 ???를 적절하게 완성하여 학생들의 학점을 계산하는 코드를 완성하라.\n[grade(???) for _, scores in data] \n(풀이)\n\n[grade(*scores) for _, scores in data] \n\n['B0', 'F', 'F', 'B0', 'A+', 'A+', 'A+', 'B0', 'B0', 'A+', 'A+']\n\n\n\nnote: 출제의도: dummy variable _, 언패킹연산자 *, for문과 튜플언패킹, 리스트컴프리헨션\n\n(11) 길이가 0인 문자열을 선언하라.\n(풀이)\n\nlen('')\n\n0\n\n\n\nnote: 출제의도: 길이가 0인 문자열\n\n\n(12)-(15)\n(12) dir(plt)와 dir(np)를 각각 실행하라. 실행결과를 각각 a,b로 저장하라. a,b의 type은 무엇인가?\n(풀이)\n\na=dir(plt)\nb=dir(np)\ntype(a),type(b)\n\n(list, list)\n\n\n\nnote: 출제의도: tpye사용법\n\n(13) a의 원소와 b의 원소의 수를 각각 구하라.\n(풀이)\n\nlen(a),len(b)\n\n(254, 611)\n\n\n\nnote: 출제의도: len의 사용법 및 응용\n\n(14) a와 b의 공통원소의 수를 구하라.\n(풀이)\n\nlen(set(a)&set(b))\n\n9\n\n\n\nnote: 출제의도: set에서 & 연산자 이용\n\n(15) a와 b의 원소를 합친 리스트를 만들어라. (공통원소는 중복하여 합치지 않는다)\n(풀이)\n\nlst = list(set(a)|set(b))\n\n\nnote: 출제의도: set에서 | 연산자 이용\n\n\n(16)-(18) 아래와 같은 dictionary가 있다.\n\ntest_dic = {'202212345': {'att':100,'rep':95,'mid':25,'fin':90},\n            '202212346': {'att':60,'rep':90,'mid':95,'fin':95},\n            '202212347': {'att':50,'rep':90,'mid':45,'fin':35},\n            '202212348': {'att':90,'rep':90,'mid':50,'fin':75},\n            '202212349': {'att':100,'rep':95,'mid':85,'fin':85},\n            '202212350': {'att':90,'rep':90,'mid':100,'fin':95},\n            '202212351': {'att':100,'rep':95,'mid':100,'fin':95},\n            '202212352': {'att':95,'rep':85,'mid':80,'fin':60},\n            '202212353': {'att':100,'rep':90,'mid':60,'fin':55},\n            '202212354': {'att':100,'rep':85,'mid':70,'fin':95},\n            '202212355': {'att':100,'rep':95,'mid':40,'fin':100}}\n\n여기에서 202212345등은 학번을, att는 출석점수, rep는 레포트점수, mid는 중간고사점수, fin은 기말고사 점수를 의미한다.\n(16) get 메소드를 이용하여 202212353에 해당하는 학생의 성적을 아래와 같이 리턴하라.\n{'att': 100, 'rep': 90, 'mid': 60, 'fin': 55}\n(풀이)\n\ntest_dic.get('202212353')\n\n{'att': 100, 'rep': 90, 'mid': 60, 'fin': 55}\n\n\n\nnote: 출제의도: 딕셔너리에서 get 메소드 이용\n\n(17) 202212354의 레포트 점수를 리턴하라.\n(풀이)\n\ntest_dic['202212354']['rep']\n\n85\n\n\n\nnote: 출제의도: 딕셔너리에서 key를 이용한 원소추출\n\n(18) 학생들의 학번을 리턴하는 코드를 작성하라.\n(풀이)\n\n[k for k in test_dic]\n\n['202212345',\n '202212346',\n '202212347',\n '202212348',\n '202212349',\n '202212350',\n '202212351',\n '202212352',\n '202212353',\n '202212354',\n '202212355']\n\n\n\nnote: 출제의도: 딕셔너리와 for문\n\n\n(19) shape이 ()인 numpy이 array를 만들어라. (즉 차원이 0인 np.array를 만들어라)\n(풀이)\n\nnp.array(3).shape\n\n()\n\n\n\nnote: 출제의도: 0차원인 numpy array\n\n(20) shape이 (2,2)인 단위행렬을 만들어라.\n(풀이)\n\nnp.array([[1,0],[0,1]])\n\narray([[1, 0],\n       [0, 1]])\n\n\n\nnote: 출제의도: 넘파이에서의 배열선언\n\n(21) a의 모든 원소에 1을 더하는 코드를 작성하라.\na=[1,3,2,5,-3,3,8,2,3,1] \n(풀이)\n\nnp.array([1,3,2,5,-3,3,8,2,3,1])+1\n\narray([ 2,  4,  3,  6, -2,  4,  9,  3,  4,  2])\n\n\n\nnote: 출제의도: 브로드캐스팅\n\n(22) 아래와 같은 수열을 생성하라.\n1,3,6,10,15,21,28,36,45, ... , 378, 406, 435\nhint: 이 수열에서 \\(a_n-a_{n-1}=n, ~n\\geq 2\\) 이다. 즉 3-1=2, 6-3=3, 10-6=4, …\n(풀이)\n\n435-406\n\n29\n\n\n\nnp.arange(1,30).cumsum()\n\narray([  1,   3,   6,  10,  15,  21,  28,  36,  45,  55,  66,  78,  91,\n       105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 325, 351,\n       378, 406, 435])\n\n\n\nnote: 출제의도: np.arange, cumsum\n\n(23) 아래와 같은 수열을 생생성하라.\n0,1,2,3,4,5,...,99 \n위의 수열에서 1,4,7,10,13,… 번째의 원소를 뽑아라. (첫번째 원소는 0이다)\n(풀이)\n\nnp.arange(100)[::3]\n\narray([ 0,  3,  6,  9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48,\n       51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99])\n\n\n\nnote: 출제의도: np.arange, 스트라이딩\n\n(24) numpy를 이용하여 아래의 역행렬을 구하라. \\[\\begin{bmatrix}\n1&  0 \\\\\n0&  3\n\\end{bmatrix}\\]\n(풀이)\n\nnp.linalg.inv(np.array([[1,0],[0,3]]))\n\narray([[1.        , 0.        ],\n       [0.        , 0.33333333]])\n\n\n\nnote: 출제의도: np.linalg.inv\n\n\n(25)-(30)\na,b가 아래와 같이 주어졌다고 하자.\n\na=[1]*10 \nb=[2]*10 \n\n(25) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n(풀이)\n\nnp.concatenate([a,b])\n\narray([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n\n\n\nnote: 출제의도: np.concatenate\n\n(26) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([[1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2]])\n(풀이)\n\nnp.concatenate([np.array(a).reshape(-1,1),np.array(b).reshape(-1,1)])\n\narray([[1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2]])\n\n\n\nnote: 출제의도: np.concatenate\n\n(27) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]\n(풀이)\n\nnp.concatenate([np.array(a).reshape(1,-1),np.array(b).reshape(1,-1)])\n\narray([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]])\n\n\n\nnote: 출제의도: np.concatenate\n\n(28) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2]])\n(풀이)\n\nnp.concatenate([np.array(a).reshape(-1,1),np.array(b).reshape(-1,1)],axis=1)\n\narray([[1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2]])\n\n\n\nnote: 출제의도: np.concatenate\n\n(29) a,b와 np.stack을 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]\n(풀이)\n\nnp.stack([a,b])\n\narray([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]])\n\n\n\nnote: 출제의도: np.stack\n\n(30) a,b와 np.stack을 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2]])\n(풀이)\n\nnp.stack([a,b],axis=1)\n\narray([[1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2]])\n\n\n\nnote: 출제의도: np.stack\n\n(31) 아래와 같은 배열이 있다고 하자.\n\na=np.array([1,2,3,4,5])\nb=np.array([3,2,1,1,2])\n\nnumpy의 @ 연산자를 이용하여 \\(\\sum_{i=1}^{5}a_ib_i\\)를 계산하라.\n(풀이)\n\na@b\n\n24\n\n\n\nnote: 출제의도: @연산자의 계산 및 해석\n\n(32) 아래와 같은 배열을 생성하라.\nx=np.random.randn(100)\nnumpy의 @연산자를 이용하여 \\(\\sum_{i=1}^{100}x_i^2\\)을 계산하라.\n(풀이)\n\nx=np.random.randn(100)\nx@x\n\n69.28009497479688\n\n\n\nnote: 출제의도: @연산자의 계산 및 해석\n\n(33) 아래와 같은 배열을 생성하라.\na=np.array([1/100]*100)\nx=np.random.randn(100)\nnumpy의 @연산자를 이용하여 \\(\\frac{1}{n}\\sum_{i=1}^{n}x_i\\)를 계산하라.\n(풀이)\n\na=np.array([1/100]*100)\nx=np.random.randn(100)\na@x\n\n-0.010052841585430794\n\n\n\nnote: 출제의도: @연산자의 계산 및 해석\n\n(34) 표준정규분포에서 100개의 난수를 생성하라.\n(풀이)\n\nnp.random.randn(100)\n\narray([ 1.85418429,  1.74095494,  1.84238756,  0.11833414,  0.50517813,\n       -0.69557289, -1.72748266, -0.26601374,  0.57719853,  0.18027158,\n       -0.42542364,  0.85536403, -0.58893928,  0.55397097, -1.5535881 ,\n       -0.88229423, -0.71875421, -0.43570715, -0.30980515, -0.36179948,\n       -0.17548155,  1.44052988, -0.59466028,  0.17292887, -0.59491904,\n       -1.9695988 ,  0.11928747,  1.28964429,  0.53823904, -1.18030647,\n       -0.20558282, -1.08160482,  0.83372329,  0.28800561,  0.15599112,\n       -1.03586037, -1.06770958, -2.71210449,  0.58241292,  0.69235475,\n        1.37391505, -0.0326631 , -0.12266586, -0.20292358, -0.27657851,\n        0.56420234,  0.40045754, -0.63219726,  0.40820948, -0.612829  ,\n       -1.28695191,  0.46508036,  0.2463253 , -0.27429529, -0.65675501,\n       -1.01875321, -0.69944952, -0.31570476,  0.3646879 , -1.1631018 ,\n       -1.20414629, -0.90456531,  0.89434359, -0.29053615,  1.16408738,\n        0.71108284, -0.52138787,  1.07033411,  1.72342412,  0.90605155,\n       -0.28896114, -1.89628331, -1.71603025,  1.21529517,  0.23833153,\n       -0.52176073, -0.49144623, -0.75427022,  0.10468367,  0.36750664,\n        0.24346823,  0.20762347,  1.08915492,  1.89502878,  1.91479936,\n       -0.4241885 , -1.05989046,  0.96622936,  0.40962212, -2.16589513,\n        0.45357349, -1.23802044,  0.39859558,  0.02910548,  1.44679724,\n        1.16285902, -0.1593022 , -2.14983146,  0.42739322, -0.94301164])\n\n\n\nnote: 출제의도: 표준정규분포 생성\n\n(35) 아래와 동일한 코드를 np.random.rand()로 구현하라.\nnp.random.uniform(low=2,high=4,size=(5,)) \n(풀이)\n\nnp.random.rand(5)*2+2\n\narray([3.62616239, 2.4038075 , 2.64420359, 2.80481305, 2.2678642 ])\n\n\n\nnote: 출제의도: np.random.rand, np.random.uniform\n\n(36) 아래와 같은 배열을 선언하라.\na=np.random.randn(100) \nnp.where를 이용하여 a의 모든 음수를 0으로 바꾸는 코드를 작성하라.\n(풀이)\n\na=np.random.randn(100)\nnp.where(a<0,0,a)\n\narray([0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.23392366e-01,\n       0.00000000e+00, 1.08600932e+00, 3.67178107e-01, 0.00000000e+00,\n       2.20251453e-01, 0.00000000e+00, 0.00000000e+00, 3.89764950e-02,\n       6.86794220e-01, 6.89479404e-01, 1.26211471e+00, 0.00000000e+00,\n       4.23611162e-01, 8.19460987e-01, 3.14530150e-01, 0.00000000e+00,\n       0.00000000e+00, 0.00000000e+00, 1.30354361e+00, 0.00000000e+00,\n       0.00000000e+00, 4.40581127e-01, 0.00000000e+00, 0.00000000e+00,\n       7.86386724e-01, 1.92151119e-02, 0.00000000e+00, 0.00000000e+00,\n       0.00000000e+00, 3.23260088e-01, 0.00000000e+00, 7.13352290e-01,\n       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.01771469e-01,\n       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.01926360e+00,\n       0.00000000e+00, 1.00933996e+00, 0.00000000e+00, 5.55528483e-01,\n       5.99763436e-01, 0.00000000e+00, 1.35136571e-01, 1.35928670e-02,\n       9.35722269e-01, 0.00000000e+00, 8.64547752e-01, 0.00000000e+00,\n       0.00000000e+00, 0.00000000e+00, 1.68682634e+00, 0.00000000e+00,\n       1.07091321e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n       8.27772542e-01, 0.00000000e+00, 7.65702396e-01, 0.00000000e+00,\n       0.00000000e+00, 3.29389519e-01, 0.00000000e+00, 2.51416616e-01,\n       0.00000000e+00, 8.17591580e-01, 0.00000000e+00, 1.09930438e-01,\n       8.71101099e-04, 2.17063699e-01, 2.06385934e-01, 0.00000000e+00,\n       0.00000000e+00, 0.00000000e+00, 3.19516814e-01, 5.92549379e-02,\n       1.92857588e+00, 1.39519785e+00, 3.77551912e-01, 0.00000000e+00,\n       0.00000000e+00, 0.00000000e+00, 5.16744013e-01, 0.00000000e+00,\n       1.87178822e+00, 1.75448718e+00, 3.40204387e-01, 7.69851631e-01])\n\n\n\nnote: 출제의도: np.where 을 이용한 마스킹\n\n(37) 아래와 같은 배열을 선언하라.\na=np.random.randn(100) \n위 배열의 최소값이 위치한 index를 return하라.\n(풀이)\n\na=np.random.randn(100)\nnp.where(a==np.min(a))\n\n(array([92]),)\n\n\n\nnote: 출제의도: np.where\n\n(38) 아래와 같은 배열을 선언하라.\n\na=np.arange(12).reshape(3,4)\na\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n차원의 수를 유지하면서 1열을 추출하는 코드를 작성하라. 즉 결과가 아래와 같이 나오도록 하라.\narray([[0],\n       [4],\n       [8]])\n(풀이)\n\na[:,[0]]\n\narray([[0],\n       [4],\n       [8]])\n\n\n\nnote: 출제의도: 차원을 유지하는 인덱싱\n\n(39)-(40)\n(39) 자신의 학번으로 random seed 를 설정하라. [20,25)의 범위에서 100개의 정수를 랜덤으로 생성해 (10,10) shape의 배열을 만들어라.\n(풀이)\n\nnp.random.seed(43052)\na=np.random.randint(low=20,high=25,size=(10,10))\n\n\nnote: 출제의도: np.random.randint\n\n(40) 39의 결과에서 20,21,22 는 각각 몇개씩 있는가?\n(풀이)\n\nnp.sum(a==20),np.sum(a==21),np.sum(a==22)\n\n(17, 20, 19)\n\n\n\nnote: 출제의도: bool형의 sum\n\n\n\n\n\n(1)-(6) 아래의 코드를 실해하여 test_dic를 생성하라.\n\nnp.random.seed(43052)\natt = np.random.choice(np.arange(10,21)*5,200)\nrep = np.random.choice(np.arange(5,21)*5,200)\nmid = np.random.choice(np.arange(0,21)*5,200)\nfin = np.random.choice(np.arange(0,21)*5,200)\nkey = ['202212'+str(s) for s in np.random.choice(np.arange(300,501),200,replace=False)]\ntest_dic = {key[i] : {'att':att[i], 'rep':rep[i], 'mid':mid[i], 'fin':fin[i]} for i in range(200)}\ndel(att);del(rep);del(mid);del(fin);del(key)\n\n여기에서 202212345등은 학번을, att는 출석점수, rep는 레포트점수, mid는 중간고사점수, fin은 기말고사 점수를 의미한다.\n(1) test_dic에서 출석점수가 70이상(70>=)인 학생들의 학번을 출력하는 코드를 작성하라.\n(풀이)\n\nids= [k for k in test_dic if test_dic[k]['att']>=70]\n\n\nnote: 출제의도: if문이 포함된 리스트컴프리헨션, for문과 딕셔너리\n\n(2) test_dic에서 출석점수가 70미만(<70)인 학생들의 수를 구하라.\n(풀이)\n\nlen([k for k in test_dic if test_dic[k]['att']<70])\n\n70\n\n\n\nsum([test_dic[k]['att']<70 for k in test_dic])\n\n70\n\n\n\nnote: 출제의도: if문이 포함된 리스트컴프리헨션, for문과 딕셔너리\n\n(3) test_dic에서 출석점수가 70이상(70>=)인 학생들의 중간고사 점수의 평균을 계산하라.\n(풀이)\n\nnp.mean([test_dic[k]['mid'] for k in test_dic if test_dic[k]['att']>=70])\n\n57.15384615384615\n\n\n\nnote: 출제의도: if문이 포함된 리스트컴프리헨션, for문과 딕셔너리\n\n(4) test_dic에서 중간고사 점수를 출력하는 코드를 작성하라.\n(풀이)\n\nmid=[test_dic[k]['mid'] for k in test_dic]\n\n\nnote: 출제의도: 리스트컴프리헨션, for문과 딕셔너리\n\n(5) test_dic에서 중간고사 점수의 표준편차와 레포트점수의 표준편차를 구하여라. 어떤것이 더 큰가?\n(풀이)\n\nnp.std([test_dic[k]['mid'] for k in test_dic]),np.std([test_dic[k]['rep'] for k in test_dic])\n\n(29.88243631299162, 22.626533097229014)\n\n\n\nnote: 출제의도: 리스트컴프리헨션, for문과 딕셔너리, np.std\n\n(6) test_dic에서 중간고사 점수가 가장 높은 사람의 학번을 출력하라.\n(풀이)\n\n[k for k in test_dic if test_dic[k]['mid']==max(mid)]\n\n['202212326',\n '202212463',\n '202212383',\n '202212341',\n '202212417',\n '202212401',\n '202212405',\n '202212369',\n '202212403',\n '202212407',\n '202212315']\n\n\n\nnote: 출제의도: 리스트컴프리헨션, for문과 딕셔너리\n\n주의: att,rep,mid,fin,key를 실행하여 소멸시키지 않고 그대로 이용하거나 np.random.choice()를 이용하여 재생성한 뒤 계산할 경우 0점 처리함. - 예를들면 (5)의 경우 np.std(mid), np.std(rep) 와 같은 식으로 구현하면 0점 처리함.\n\n(7) 성공확률이 0.45인 시행이 있다고 하자. 이 시행을 100번의 시행하였을 경우 73번 이상 성공할 확률은 얼마인가? 시뮬레이션을 이용하여 근사계산하라.\n(풀이)\n\nsum(np.random.binomial(n=100,p=0.45,size=(1000,)) >= 73)\n\n0\n\n\n\nnote: 출제의도: np.random.binomial, bool형의 합\n\n(8) 성공확률이 0.45인 시행이 있다고 하자. 이 시행을 100번 시행하였을 경우 10번이하로 실패하거나 90번이상 성공할 확률은 얼마인가? 시뮬레이션을 이용하여 근사계산하라.\n(풀이)\n\na=np.random.binomial(n=100,p=0.45,size=(1000,))\nsum((a>=90) | (a<=10))\n\n0\n\n\n\nsum(a>=90) + sum(a<=10) # 이것도 좋은 풀이\n\n0\n\n\n\nnote: 출제의도: np.random.binomial, bool형의 합\n\n(9) 아래와 같은 행렬을 선언하자.\n\nA=np.arange(2*1).reshape(2,1)\nB=np.arange(2*2).reshape(2,2)\nC=np.arange(2*3).reshape(2,3)\nD=np.arange(3*3).reshape(3,3)\nE=np.arange(3*2).reshape(3,2)\nF=np.arange(3*1).reshape(3,1)\n\n아래의 블락매트릭스를 만들어라.\n\\(\\begin{bmatrix} a_{11} & b_{11} & b_{12} & c_{11} & c_{12} & c_{13} \\\\ a_{21} & b_{21} & b_{22} & c_{21} & c_{22} & c_{23} \\\\ d_{11} & d_{12} & d_{13} & e_{11} & e_{12} & f_{11} \\\\ d_{21} & d_{22} & d_{23} & e_{21} & e_{22} & f_{21} \\\\ d_{31} & d_{32} & d_{33} & e_{31} & e_{32} & f_{31} \\end{bmatrix}\\)\n여기에서 \\(a_{ij}\\)는 매트릭스 \\({\\bf A}\\)의 원소이다.\n(풀이)\n\ntop = np.concatenate([A,B,C],axis=1)\nbottom = np.concatenate([D,E,F],axis=1)\nnp.concatenate([top,bottom],axis=0)\n\narray([[0, 0, 1, 0, 1, 2],\n       [1, 2, 3, 3, 4, 5],\n       [0, 1, 2, 0, 1, 0],\n       [3, 4, 5, 2, 3, 1],\n       [6, 7, 8, 4, 5, 2]])\n\n\n\nnote: 출제의도: np.concatenate\n\n(10) 표준정규분포에 10000개의 난수를 아래와 같이 생성하라.\n\nx=np.random.randn(10000)\ny=np.random.randn(10000)\n\n\\((i,j)\\) 번째 원소가 \\((x_i-y_j)^2\\)인 (10000,10000) 매트릭스를 만들어라.\n(풀이)\n\n(x.reshape(10000,1) - y.reshape(1,10000))**2\n\narray([[9.94471594e-01, 1.59617444e+00, 4.89939117e-01, ...,\n        5.85763251e-02, 8.71831383e-01, 4.48231705e-02],\n       [3.82650425e-01, 7.82788668e-01, 1.16338019e+00, ...,\n        3.85231232e-01, 1.72229831e+00, 3.48524169e-01],\n       [2.19381916e-03, 4.81046770e-02, 3.04162913e+00, ...,\n        1.65404203e+00, 3.91165053e+00, 1.57699602e+00],\n       ...,\n       [4.06902110e-02, 4.15352671e-03, 3.60584637e+00, ...,\n        2.07641061e+00, 4.54827803e+00, 1.98997559e+00],\n       [6.35135252e-01, 1.13022358e+00, 8.10422594e-01, ...,\n        1.95632560e-01, 1.28594998e+00, 1.69738287e-01],\n       [3.93009857e+00, 5.05626325e+00, 8.13727798e-02, ...,\n        5.52331661e-01, 2.65189382e-03, 5.98303522e-01]])\n\n\n\nnote: 출제의도: 브로드캐스팅\n\n\n(11)-(16)\n아래와 같은 매트릭스를 생성하라.\n\nnp.random.seed(43052)\na=np.random.randn(10000).reshape(100,100)\na\n\narray([[ 0.38342049,  1.0841745 ,  1.14277825, ..., -0.18506968,\n         1.05538764,  1.18701443],\n       [-0.25027283, -1.58045215,  0.1124153 , ...,  1.0321894 ,\n         0.40438012, -0.13491595],\n       [-0.76763724, -0.64294232, -0.24782396, ..., -0.01530161,\n         0.89125897, -0.82683395],\n       ...,\n       [-1.41379028,  0.79611333, -0.71011837, ..., -0.9860352 ,\n         1.30755244,  2.18677233],\n       [ 1.33968105, -0.78457449, -0.10405858, ..., -0.71110186,\n         0.99841286,  2.34371635],\n       [-0.66422032, -0.07550233,  0.7405869 , ...,  1.03232398,\n        -0.18988252, -0.03578389]])\n\n\n(11) 각 행의 합을 구하라. 즉 1행의 합, 2행의 합, … 100행의 합을 계산하라. - 1행의합 = 0.38342049 + 1.0841745 + … + 1.18701443\n(풀이)\n\na.sum(axis=1)\n\narray([-8.13607922e+00,  9.87120533e+00, -1.41434956e+01, -2.21705363e+00,\n       -1.45535236e+01, -9.15821678e+00, -2.59866360e+00, -1.54562385e+01,\n       -1.42005088e+00, -3.51523111e+00,  9.70487578e+00, -1.26229105e+01,\n        1.66837113e+00,  2.43015457e+00,  2.72990184e+00, -7.99486429e+00,\n       -8.38305954e-01, -8.45002020e+00, -1.03610098e+00,  2.07251861e+01,\n        1.11461478e+01,  7.62144075e+00, -7.93734585e+00,  1.82844319e+01,\n       -2.63562392e+00, -8.97916930e+00, -1.88986183e+00, -9.32477049e+00,\n       -6.69074565e+00, -1.42463143e+01,  6.45540510e-01,  1.80911488e+00,\n        2.40997157e+00,  1.63367254e+01,  7.63990677e+00,  8.13524813e+00,\n        3.97159000e+00, -1.10542949e+00,  4.37564512e-01,  2.87299971e+00,\n       -4.01016768e+00,  5.71115215e+00, -4.64132698e+00, -9.13987753e+00,\n       -6.78326000e+00,  3.36308150e+00, -5.13704342e+00, -5.09782466e+00,\n        6.54192465e-03,  7.19722660e+00, -4.64674820e+00, -9.24124039e+00,\n        6.73530841e+00,  1.12168921e+00,  1.61615988e+00,  1.37602200e+01,\n        6.67289840e-01, -2.09578108e+00, -2.81826564e-01, -8.52416541e+00,\n       -7.21970047e+00,  2.27146777e+01, -1.40341974e+01,  1.69263136e+01,\n       -1.80568372e+01,  6.52142336e+00, -1.73092812e+01, -1.34999285e+01,\n       -7.85539317e+00, -4.74940393e-01, -2.75765037e+01,  8.74991555e+00,\n       -9.77324158e+00,  1.42854121e+01, -1.10130356e+00, -1.39206483e-01,\n       -1.54638921e+01,  1.36814794e+00,  8.41394160e+00, -2.42153833e+00,\n       -2.57155344e+01, -6.72423820e+00, -9.49366257e-01,  3.79493472e+00,\n       -6.23508582e+00,  7.75657189e+00,  9.69403620e+00,  1.46847519e+01,\n        7.36500792e+00, -2.54755192e+01,  1.22792449e+01, -1.02497847e+01,\n        1.30452028e+01,  3.92943038e+00, -3.27227585e+00, -1.06633071e+01,\n       -1.56942302e+01,  8.01451222e+00,  2.81546938e+00,  5.56774384e+00])\n\n\n\nnote: 출제의도: np.sum with axis\n\n(12) (11)의 결과로 나온 배열의 표준편차를 구하라.\n(풀이)\n\na.sum(axis=1).std()\n\n9.98012658863081\n\n\n\nnote: 출제의도: np.sum with axis, np.std\n\n(13) 각 열의 평균을 구하라. 즉 1열의 평균, 2열의 평균, … , 100열의 평균을 계산하라.\n(풀이)\n\na.sum(axis=0)\n\narray([ 5.05543481e-01, -8.11250975e-01, -7.27142023e-01,  9.64876493e+00,\n        5.64186324e+00, -2.22728206e+00,  1.32808256e-02, -9.60905067e+00,\n        9.42144096e+00, -1.21946518e+01, -2.21878576e+00, -3.77018716e+00,\n        2.35739166e-01, -1.13202128e+01, -9.00374437e+00, -3.09372275e+00,\n       -2.18029121e+00,  7.04210003e+00, -4.12563112e+00,  2.58233488e+00,\n        1.16578817e+01, -1.59430241e+01, -1.53668953e+00,  9.21879710e+00,\n       -1.11346500e+01, -1.20131585e+01,  5.94139652e+00, -3.27022797e+00,\n       -1.46466366e+00, -1.78386785e+00, -1.06650333e+01, -9.04542721e+00,\n       -8.52586244e+00,  5.52166280e+00,  1.94115122e+01,  4.64389603e+00,\n        5.13636914e+00,  1.11424801e+01, -4.18629084e+00,  9.23822150e+00,\n       -2.00433998e+00, -5.73784795e+00, -8.79928414e+00, -3.01766235e+00,\n        6.47256326e+00,  3.14419234e+00, -1.16146865e+01, -1.04800787e+01,\n        3.17924308e+00,  5.51687322e+00,  1.04913214e+01, -2.79741703e-01,\n        2.56767141e+01, -1.35620430e+01, -9.59492302e+00,  1.23241275e+01,\n       -5.26436946e-01, -3.14823093e+00, -4.00286104e+00, -1.48618576e+01,\n        4.85988487e+00, -1.37972086e+01, -1.04715966e+01, -7.13893940e+00,\n        4.35483376e+00, -2.10610822e+01, -1.03231108e+01, -1.62132451e+01,\n        2.85187037e+01, -8.25697744e+00,  4.33723229e+00,  1.32763889e+00,\n       -1.61919484e+01, -5.07924036e+00,  6.62243327e+00, -9.72863991e+00,\n        2.71962223e+01, -5.97710822e+00,  1.54580795e+01, -5.46739064e+00,\n       -1.08611574e+01, -1.56520706e+01, -1.40476317e+01,  1.06067589e+01,\n       -3.46141736e+00, -6.07673046e+00,  5.33471760e-01,  8.10276105e+00,\n       -1.31994569e+01, -1.00936968e+00,  6.13944222e+00, -9.72765699e+00,\n        1.61342793e+01,  1.02634369e+01, -5.03038014e+00, -7.50604837e+00,\n        2.63992605e+00,  6.98470602e+00, -1.89567885e+01,  7.91910813e+00])\n\n\n\nnote: 출제의도: np.sum with axis\n\n(14) (13)의 결과로 나온 배열의 표준편차를 구하라.\n(풀이)\n\na.sum(axis=0).std()\n\n9.944992000065781\n\n\n\nnote: 출제의도: np.sum with axis, np.std\n\n(15) a의 원소중 a>0 을 만족하는 원소의 평균을 구하여라.\n(풀이)\n\na[a>0].mean()\n\n0.7879030416692301\n\n\n\nnote: 출제의도: bool을 이용한 인덱싱\n\n(16) a의 원소중 a>3을 만족하는 원소의 수를 count하라.\n(풀이)\n\nnp.sum(a>3)\n\n17\n\n\n\nnote: 출제의도: bool의 sum\n\n\n(17)-(18)\n아래와 같은 배열 a를 고려하자.\n\nnp.random.seed(43052)\na=np.random.binomial(1,0.2,size=(10000,))\na\n\narray([1, 0, 1, ..., 1, 1, 0])\n\n\n(17) 0에서 1로 바뀌는 부분을 count하라.\n(풀이)\n\nnp.sum(np.diff(a)==1)\n\n1617\n\n\n\nnote: 출제의도: np.diff 응용\n\n(18) 1에서 0으로 바뀌는 부분을 count하라.\n(풀이)\n\nnp.sum(np.diff(a)==-1)\n\n1618\n\n\n\nnote: 출제의도: np.diff 응용\n\n[예시] 아래의 배열에서 0에서 1로 부분은 모두 세 군데이고, 1에서 0으로 바뀌는 부분은 모두 두 군데 이다.\n0 0 0 1 0 1 0 0 0 1 1 1 \n\n(19)-(25)\n(19) \\(i=1,2,\\dots,1000\\)에 대하여 아래를 각각 구하라.\n\\[x_i= \\cos(t_i)+\\cos(3t_i)+\\cos(5t_i)\\]\n\\[y_i= \\sin(t_i)+\\sin(4t_i)\\]\n여기에서 \\(t_i=\\frac{2\\pi i }{1000}\\) 이다.\n(풀이)\n\ni=np.arange(1,1001)\nt=i*2*np.pi/1000\nx=np.cos(t)+np.cos(3*t)+np.cos(5*t) \ny=np.sin(t)+np.sin(4*t) \n\n\nnote: 출제의도: numpy를 이용한 수식표현\n\n(20) \\((x_i,y_i)\\)를 그려라.\n(풀이)\n\nplt.plot(x,y)\n\n\n\n\n\nnote: 출제의도: plt.plot\n\n(21) 아래와 같은 변환을 통하여 \\((w_i,z_i)\\)를 얻어라.\n\\[w_i= \\frac{1}{\\sqrt{2}}x_i - \\frac{1}{\\sqrt{2}}y_i\\]\n\\[z_i= \\frac{1}{\\sqrt{2}}x_i + \\frac{1}{\\sqrt{2}}y_i\\]\n\\((w_i,z_i)\\)를 시각화 하라.\n(풀이)\n\nw = 1/np.sqrt(2)*x -  1/np.sqrt(2)*y\nz = 1/np.sqrt(2)*x +  1/np.sqrt(2)*y\nplt.plot(w,z)\n\n\n\n\n\nnote: 출제의도: numpy를 이용한 연산, plt.plot\n\n(22) 아래와 같은 매트릭스를 만들어라.\n\\[{\\bf A}=\\begin{bmatrix}\nx_1 & y_1 \\\\\nx_2 & y_2 \\\\\n\\dots & \\dots \\\\\nx_n & y_n\n\\end{bmatrix}\\]\n(풀이)\n\nA=np.stack([x,y]).T\nA\n\narray([[ 2.99930917e+00,  3.14132394e-02],\n       [ 2.99723725e+00,  6.28103581e-02],\n       [ 2.99378587e+00,  9.41752452e-02],\n       ...,\n       [ 2.99723725e+00, -6.28103581e-02],\n       [ 2.99930917e+00, -3.14132394e-02],\n       [ 3.00000000e+00, -1.22464680e-15]])\n\n\n\nA=np.stack([x,y],axis=1)\nA\n\narray([[ 2.99930917e+00,  3.14132394e-02],\n       [ 2.99723725e+00,  6.28103581e-02],\n       [ 2.99378587e+00,  9.41752452e-02],\n       ...,\n       [ 2.99723725e+00, -6.28103581e-02],\n       [ 2.99930917e+00, -3.14132394e-02],\n       [ 3.00000000e+00, -1.22464680e-15]])\n\n\n\nnote: 출제의도: np.stack\n\n(23) \\({\\bf A} {\\bf B}\\)의 첫번째 열과 두번째 열을 시각화한 결과가 \\((w_i,z_i)\\)과 동일하도록 적당한 (2,2) 매트릭스 \\({\\bf B}\\)를 만들어라.\n(풀이)\n\nB= np.array([[1/np.sqrt(2), 1/np.sqrt(2)],[-1/np.sqrt(2), 1/np.sqrt(2)]])\n#B= np.array([[1, 1],[-1, 1]])/np.sqrt(2)\nplt.plot(A@B[:,0],A@B[:,1])\n\n\n\n\n\nnote: 출제의도: 행렬의 수식표현, 행렬의 곱\n\n(24) \\({\\bf A}{\\bf B}^2\\)의 첫번째 열과 두번째 열을 시각화 하라.\n(풀이)\n\nplt.plot((A@B@B)[:,0],(A@B@B)[:,1])\n\n\n\n\n\nnote: 출제의도: 행렬의 곱\n\n(25) \\(n=3,4,5,6,\\dots\\) 에 대하여 \\({\\bf A}{\\bf B}^n\\)을 반복적으로 그려보라. \\((x_i,y_i)\\)의 시각화 결과와 동일한 가장 작은 \\(n\\)은 얼마인가? \\((w_i,z_i)\\)의 시각화 결과와 동일한 가장 작은 \\(n\\)은 얼마인가?\n(풀이)\n\nplt.plot((A@B@B@B)[:,0],(A@B@B@B)[:,1]) ## n=3\n\n\n\n\n\nplt.plot((A@B@B@B@B)[:,0],(A@B@B@B@B)[:,1]) ## n=4\n\n\n\n\n\n(B@B)@(B@B)@(B@B)@(B@B)\n\narray([[1., 0.],\n       [0., 1.]])\n\n\n\n(B@B)@(B@B)@(B@B)@(B@B)@B\n\narray([[ 0.70710678,  0.70710678],\n       [-0.70710678,  0.70710678]])\n\n\n\n답: \\((x_i,y_i)\\)의 시각화 결과와 동일한 가장 작은 \\(n=8\\) 이고 \\((w_i,z_i)\\)의 시각화 결과와 동일한 가장 작은 \\(n=9\\) 이다.\n\n\nnote: 출제의도: 회전변환의 유추, 역행렬의 개념응용\n\n\n\n\n\n(1) 아래는 python을 설치하는 방법을 소개한 url 이다. 직접 url에 들어가서 설치하는 방법을 읽어보고 곤이, 철용, 아귀, 짝귀 중 옳은말을 한 사람을 모두 골라라. - https://www.pythonlikeyoumeanit.com/Module1_GettingStartedWithPython/Installing_Python.html\n(곤이) 해당 방법은 아나콘다를 이용하여 파이썬을 설치하는 방법이다.\n(철용) 그래서 이 방법으로는 가상환경을 만들 수 없겠군.\n(아귀) 위 url에 제시된 방법으로 설치하면 주피터가 자동설치 된다.\n(짝귀) 따라서 위의 방법으로 설치하면 IDE는 주피터만 사용할 수 있다.\n\nnote: 출제의도: 아나콘다를 이용한 설치\n\n(2) 곤이는 1부터 10까지의 합을 구하는 코드를 작성하기 위하여 아래와 같이 mysum.py 파일을 만들었다.\n## mysum.py\ntotal = 0 \nfor i in range(1,11): \n    total = total + i\nprint(total)\n곤이의 컴퓨터는 윈도우이며 아니콘다를 이용해 파이썬을 설치하였다고 가정한다. 다음중 옳은 설명을 한 사람을 모두 고르라.\n(곤이) mysum.py를 실행하기 위해서는 anaconda prompt 에서 mysum.py가 위치한 폴더로 이동한 뒤 %run mysum.py 를 실행하면 된다.\n(철용) anaconda prompt 에서 mysum.py가 위치한 폴더로 이동한 뒤 ipython을 실행하고 %run mysum.py을 실행해도 된다.\n(아귀) 철용의 방법에서 %run mysum.py 대신에 !python mysum.py를 쳐도 동작한다.\n(짝귀) 하지만 다른 가상환경을 만들 경우 철용과 아귀의 방법으로 실행할 수 없다는 단점이 있다.\n\nnote: 출제의도: *.py 의 사용방법"
  },
  {
    "objectID": "posts/2022-04-18-(7주차) 4월18일.html",
    "href": "posts/2022-04-18-(7주차) 4월18일.html",
    "title": "PP2023",
    "section": "",
    "text": "(7주차) 4월18일\n\nnumpy (메소드 도움말확인, hstack, vstack, append, ravel, flatten, 기타통계함수들, dtype, 브로드캐스팅), matploblib (plt.pyplot, plt.hist)\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n강의영상\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-wAL4hb03IaheCSUSvgt-Us\n\n- (1/5) 메소드 도움말확인, hstack, vstack, append, ravel, flatten, 기타통계함수들, dtype, 브로드캐스팅\n- (2/5) 브로드캐스팅\n- (3/5) matplotlib\n- (4/5) 시험유의사항\n- (5/5) 예상문제 및 학점 안내사항\n\n\nimports\n\nimport numpy as np\n\n\n\nnumpy 공부 7단계\n\nnote 1: 메소드 도움말 확인하기\n- 파이썬에서 함수를 적용하는 2가지 방식 - np.sum(a) - a.sum()\n\na=np.array([1,2,3,4,5])\na\n\narray([1, 2, 3, 4, 5])\n\n\n\na.sum()\n\n15\n\n\n\nnp.sum(a)\n\n15\n\n\n- 넘파이에서 a.sum()에 대한 도움말은 보통 np.sum()에 자세히 나와있음. \\(\\to\\) np.sum()의 도움말을 확인하고 np.sum(a)와 a.sum()이 동일함을 이용하여 a.sum()의 사용법을 미루어 유추해야함.\n\na.sum?\n\n\nDocstring:\na.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)\nReturn the sum of the array elements over the given axis.\nRefer to `numpy.sum` for full documentation.\nSee Also\n--------\nnumpy.sum : equivalent function\nType:      builtin_function_or_method\n\n\n\n\n\nnp.sum?\n\n\nSignature:\nnp.sum(\n    a,\n    axis=None,\n    dtype=None,\n    out=None,\n    keepdims=<no value>,\n    initial=<no value>,\n    where=<no value>,\n)\nDocstring:\nSum of array elements over a given axis.\nParameters\n----------\na : array_like\n    Elements to sum.\naxis : None or int or tuple of ints, optional\n    Axis or axes along which a sum is performed.  The default,\n    axis=None, will sum all of the elements of the input array.  If\n    axis is negative it counts from the last to the first axis.\n    .. versionadded:: 1.7.0\n    If axis is a tuple of ints, a sum is performed on all of the axes\n    specified in the tuple instead of a single axis or all the axes as\n    before.\ndtype : dtype, optional\n    The type of the returned array and of the accumulator in which the\n    elements are summed.  The dtype of `a` is used by default unless `a`\n    has an integer dtype of less precision than the default platform\n    integer.  In that case, if `a` is signed then the platform integer\n    is used while if `a` is unsigned then an unsigned integer of the\n    same precision as the platform integer is used.\nout : ndarray, optional\n    Alternative output array in which to place the result. It must have\n    the same shape as the expected output, but the type of the output\n    values will be cast if necessary.\nkeepdims : bool, optional\n    If this is set to True, the axes which are reduced are left\n    in the result as dimensions with size one. With this option,\n    the result will broadcast correctly against the input array.\n    If the default value is passed, then `keepdims` will not be\n    passed through to the `sum` method of sub-classes of\n    `ndarray`, however any non-default value will be.  If the\n    sub-class' method does not implement `keepdims` any\n    exceptions will be raised.\ninitial : scalar, optional\n    Starting value for the sum. See `~numpy.ufunc.reduce` for details.\n    .. versionadded:: 1.15.0\nwhere : array_like of bool, optional\n    Elements to include in the sum. See `~numpy.ufunc.reduce` for details.\n    .. versionadded:: 1.17.0\nReturns\n-------\nsum_along_axis : ndarray\n    An array with the same shape as `a`, with the specified\n    axis removed.   If `a` is a 0-d array, or if `axis` is None, a scalar\n    is returned.  If an output array is specified, a reference to\n    `out` is returned.\nSee Also\n--------\nndarray.sum : Equivalent method.\nadd.reduce : Equivalent functionality of `add`.\ncumsum : Cumulative sum of array elements.\ntrapz : Integration of array values using the composite trapezoidal rule.\nmean, average\nNotes\n-----\nArithmetic is modular when using integer types, and no error is\nraised on overflow.\nThe sum of an empty array is the neutral element 0:\n>>> np.sum([])\n0.0\nFor floating point numbers the numerical precision of sum (and\n``np.add.reduce``) is in general limited by directly adding each number\nindividually to the result causing rounding errors in every step.\nHowever, often numpy will use a  numerically better approach (partial\npairwise summation) leading to improved precision in many use-cases.\nThis improved precision is always provided when no ``axis`` is given.\nWhen ``axis`` is given, it will depend on which axis is summed.\nTechnically, to provide the best speed possible, the improved precision\nis only used when the summation is along the fast axis in memory.\nNote that the exact precision may vary depending on other parameters.\nIn contrast to NumPy, Python's ``math.fsum`` function uses a slower but\nmore precise approach to summation.\nEspecially when summing a large number of lower precision floating point\nnumbers, such as ``float32``, numerical errors can become significant.\nIn such cases it can be advisable to use `dtype=\"float64\"` to use a higher\nprecision for the output.\nExamples\n--------\n>>> np.sum([0.5, 1.5])\n2.0\n>>> np.sum([0.5, 0.7, 0.2, 1.5], dtype=np.int32)\n1\n>>> np.sum([[0, 1], [0, 5]])\n6\n>>> np.sum([[0, 1], [0, 5]], axis=0)\narray([0, 6])\n>>> np.sum([[0, 1], [0, 5]], axis=1)\narray([1, 5])\n>>> np.sum([[0, 1], [np.nan, 5]], where=[False, True], axis=1)\narray([1., 5.])\nIf the accumulator is too small, overflow occurs:\n>>> np.ones(128, dtype=np.int8).sum(dtype=np.int8)\n-128\nYou can also start the sum with a value other than zero:\n>>> np.sum([10], initial=5)\n15\nFile:      ~/anaconda3/envs/py39/lib/python3.9/site-packages/numpy/core/fromnumeric.py\nType:      function\n\n\n\n\n\n\nnote 2: hstack, vstack\n- hstack, vstack 를 쓰는 사람도 있다.\n\na=np.arange(6) \nb=-a \n\n\nnp.vstack([a,b])\n\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 0, -1, -2, -3, -4, -5]])\n\n\n\nnp.stack([a,b],axis=0)\n\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 0, -1, -2, -3, -4, -5]])\n\n\n\nnp.hstack([a,b])\n\narray([ 0,  1,  2,  3,  4,  5,  0, -1, -2, -3, -4, -5])\n\n\n\nnp.concatenate([a,b],axis=0)\n\narray([ 0,  1,  2,  3,  4,  5,  0, -1, -2, -3, -4, -5])\n\n\n\n\nnote 3: append\n- 기능1: reshape(-1) + concat\n\na=np.arange(30).reshape(5,6)\nb= -np.arange(8).reshape(2,2,2)\n\n\na.shape, b.shape\n\n((5, 6), (2, 2, 2))\n\n\n\nnp.append(a,b)\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,  0, -1, -2, -3,\n       -4, -5, -6, -7])\n\n\n\nnp.concatenate([a.reshape(-1),b.reshape(-1)])\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,  0, -1, -2, -3,\n       -4, -5, -6, -7])\n\n\n- 기능2: concat\n\na=np.arange(2*3*4).reshape(2,3,4)\nb=-a\n\n\na.shape,b.shape, np.append(a,b,axis=0).shape\n\n((2, 3, 4), (2, 3, 4), (4, 3, 4))\n\n\n\na.shape,b.shape, np.append(a,b,axis=1).shape\n\n((2, 3, 4), (2, 3, 4), (2, 6, 4))\n\n\n\na.shape,b.shape, np.append(a,b,axis=2).shape\n\n((2, 3, 4), (2, 3, 4), (2, 3, 8))\n\n\n- concat과의 차이?\n\na=np.arange(2*3*4).reshape(2,3,4)\nb=-a\nc=2*a\n\n\nnp.append(a,b,c,axis=0)\n\nTypeError: _append_dispatcher() got multiple values for argument 'axis'\n\n\n\nnp.concatenate([a,b,c],axis=0)\n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [  8,   9,  10,  11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23]],\n\n       [[  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]],\n\n       [[  0,   2,   4,   6],\n        [  8,  10,  12,  14],\n        [ 16,  18,  20,  22]],\n\n       [[ 24,  26,  28,  30],\n        [ 32,  34,  36,  38],\n        [ 40,  42,  44,  46]]])\n\n\n\n\nnote 4: ravel, flatten\n\na=np.arange(2*3*4).reshape(2,3,4)\na\n\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]])\n\n\n\na.reshape(-1)\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23])\n\n\n\na.ravel()\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23])\n\n\n\na.flatten()\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23])\n\n\n\n\nnote 5: 기타 통계함수들\n- 평균, 중앙값, 표준편차, 분산\n\na = np.random.normal(loc=0,scale=2,size=(100,))\na\n\narray([-1.12093037,  2.03228998,  0.97607763, -1.95129947, -1.49794935,\n       -2.69582142,  6.26294142,  0.17772869,  0.88248101, -0.0987605 ,\n       -2.20172938,  1.57977467, -3.70228648,  3.62666243,  0.35655652,\n        2.24552797,  1.82730641, -0.27324478,  2.96368325,  2.36722536,\n        1.00283717,  2.25966997,  0.74019075,  1.19192351,  2.70918979,\n        1.56791667, -3.9192988 ,  0.51262046,  2.1701658 ,  1.45665188,\n       -0.95216879, -0.78855745, -2.01741917, -0.93273601, -1.01042306,\n       -0.03667253,  0.4746618 , -2.55669289,  1.10739444,  1.15177071,\n       -2.96111607, -1.97698346, -1.62882279, -0.73025042, -4.41933873,\n        2.67699686, -1.49483629,  0.00726669, -0.91481464, -3.34965693,\n       -1.53808928,  0.45192716,  0.62408358,  4.00499954, -0.44609797,\n       -2.58265527, -3.66717305,  2.10773738, -0.51106569,  2.29246892,\n        2.79998629, -3.03791044,  1.89561133,  0.19501627,  0.72806721,\n       -1.50778943,  0.42474352,  0.12223567, -1.04890662, -1.9739829 ,\n       -1.4261672 , -0.20406325, -0.23939128,  1.41477338, -2.25923024,\n        1.17742253, -2.00670917,  0.1468111 , -0.57698109,  3.52781535,\n        1.71060134,  2.31381344, -1.06125884, -1.73359866,  0.21638374,\n        0.92504343,  2.50727404,  1.3510571 ,  0.62009821, -1.77908053,\n        1.85646061,  0.66264999, -1.64292395, -0.60274377, -1.1585586 ,\n       -0.66907802,  2.38660429,  1.41138093, -2.3059048 , -0.53353575])\n\n\n\nnp.mean(a)\n\n0.04457872598775192\n\n\n\nnp.median(a)\n\n0.13452338307274175\n\n\n\nnp.std(a)\n\n1.957280879505603\n\n\n\nnp.var(a)\n\n3.8309484412782266\n\n\n- corr matrix, cov matrix\n\nnp.random.seed(43052) \nx= np.random.randn(10000)\ny= np.random.randn(10000)*2\nz= np.random.randn(10000)*0.5 \n\n\nnp.corrcoef([x,y,z]).round(2)\n\narray([[ 1.  , -0.01,  0.01],\n       [-0.01,  1.  ,  0.  ],\n       [ 0.01,  0.  ,  1.  ]])\n\n\n\nnp.cov([x,y,z]).round(2)\n\narray([[ 0.99, -0.02,  0.  ],\n       [-0.02,  4.06,  0.  ],\n       [ 0.  ,  0.  ,  0.25]])\n\n\n\n\nnote 6: dtype\n- np.array는 항상 dtype이 있다.\n\na = np.array([1,2,3])\na\n\narray([1, 2, 3])\n\n\n\na.dtype\n\ndtype('int64')\n\n\n\na = np.array([1.0,2.0,3.0])\na\n\narray([1., 2., 3.])\n\n\n\na.dtype\n\ndtype('float64')\n\n\n- 같은 int라도 int16,int32,int64으로 나누어진다.\n\na = np.array([1,2,3],dtype=np.int32)\na\n\narray([1, 2, 3], dtype=int32)\n\n\n\na.dtype\n\ndtype('int32')\n\n\n- float도 float16, float32, float64가 있다.\n\na = np.array([1,2,3],dtype=np.float32)\na\n\narray([1., 2., 3.], dtype=float32)\n\n\n- 데이터타입은 아래와 같은 방법으로 변환시킬 수 있다.\n\na = np.array([1,2,3],dtype=np.int32)\na\n\narray([1, 2, 3], dtype=int32)\n\n\n\na=a.astype(dtype=np.int64)\na\n\narray([1, 2, 3])\n\n\n\na.dtype\n\ndtype('int64')\n\n\n- 문자열의 경우\n\na = np.array(['a','b','c'])\na\n\narray(['a', 'b', 'c'], dtype='<U1')\n\n\n\na = np.array(['ab','b','c'])\na\n\narray(['ab', 'b', 'c'], dtype='<U2')\n\n\n\na = np.array(['abasdf','b','c'])\na\n\narray(['abasdf', 'b', 'c'], dtype='<U6')\n\n\n- 문자열+숫자혼합 => 문자열로 통일\n\na= np.array(['a',1])\na\n\narray(['a', '1'], dtype='<U21')\n\n\n\na= np.array(['a',1.0])\na\n\narray(['a', '1.0'], dtype='<U32')\n\n\n- 숫자를 문자열로 전환\n\na= np.array([1,2,3])\na\n\narray([1, 2, 3])\n\n\n\na.astype(np.str_)\n\narray(['1', '2', '3'], dtype='<U21')\n\n\n\n\nnote 7: 브로드캐스팅과 시간측정\n(예비학습)\n\nimport time \n\n\nt1=time.time()\n\n\nt2=time.time()\nt2-t1\n\n0.21341419219970703\n\n\n예비학습끝\n(예제) x=[0,1,2,3,4] 인 벡터가 있다고 하자. (i,j)의 원소가 (x[i]-x[j])**2 을 의미하는 \\(5\\times 5\\) 매트릭스를 구하라.\n(풀이1)\n\nx=np.array(range(5))\nx\n\narray([0, 1, 2, 3, 4])\n\n\n\ndist = np.zeros([5,5])\ndist\n\narray([[0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.]])\n\n\n\nfor i in range(5):\n    for j in range(5):\n        dist[i,j]=(x[i]-x[j])**2\n\n\ndist\n\narray([[ 0.,  1.,  4.,  9., 16.],\n       [ 1.,  0.,  1.,  4.,  9.],\n       [ 4.,  1.,  0.,  1.,  4.],\n       [ 9.,  4.,  1.,  0.,  1.],\n       [16.,  9.,  4.,  1.,  0.]])\n\n\n(풀이2)\n\nx1=x.reshape(5,1).astype(dtype=np.float64)\nx2=x.reshape(1,5).astype(dtype=np.float64)\n\n\nx1\n\narray([[0.],\n       [1.],\n       [2.],\n       [3.],\n       [4.]])\n\n\n\nx2\n\narray([[0., 1., 2., 3., 4.]])\n\n\n\nx1-x2\n\narray([[ 0., -1., -2., -3., -4.],\n       [ 1.,  0., -1., -2., -3.],\n       [ 2.,  1.,  0., -1., -2.],\n       [ 3.,  2.,  1.,  0., -1.],\n       [ 4.,  3.,  2.,  1.,  0.]])\n\n\n\n(i,j)th element = x[i]-x[j]\n\n\n(x1-x2)**2\n\narray([[ 0.,  1.,  4.,  9., 16.],\n       [ 1.,  0.,  1.,  4.,  9.],\n       [ 4.,  1.,  0.,  1.,  4.],\n       [ 9.,  4.,  1.,  0.,  1.],\n       [16.,  9.,  4.,  1.,  0.]])\n\n\n\n\ny=np.array(range(10000))\n\n\ndist = np.zeros([10000,10000])\ndist\n\narray([[0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       ...,\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.]])\n\n\n\nt1=time.time()\nfor i in range(10000):\n    for j in range(10000):\n        dist[i,j]=(y[i]-y[j])**2\nt2=time.time()\nt2-t1\n\n37.53360199928284\n\n\n\ny1=y.reshape(10000,1).astype(np.float64)\ny2=y.reshape(1,10000).astype(np.float64)\n\n\nt1=time.time()\ndist2=(y1-y2)**2\nt2=time.time()\nt2-t1\n\n0.1297893524169922\n\n\n\n(dist-dist2).sum()\n\n0.0\n\n\n\n\n\nmatplotlib\n\nimport matplotlib.pyplot as plt \n\n\nplt.plot\n- 기본그림\n\nplt.plot([1,2,3],[3,4,5],'.')\n\n\n\n\n\nplt.plot(np.array([1,2,3]),np.array([3,4,5]),'.')\n\n\n\n\n- 예제들\n\nt=np.linspace(-6,6,100)\nx=np.sin(t)\ny=np.cos(t)\n\n\nplt.plot(t,x) \n\n\n\n\n\nplt.plot(t,y) \n\n\n\n\n\nplt.plot(t,x) \nplt.plot(t,y)\n\n\n\n\n\nplt.plot(t,x) \nplt.plot(t,y,'.')\n\n\n\n\n\nplt.plot(t,x) \nplt.plot(t,y,'--')\n\n\n\n\n\n\nplt.hist\n\nX = np.random.randn(1000) \nY = np.random.rand(1000) \n\n\nplt.hist(X)\n\n(array([ 23.,  59., 134., 195., 233., 180., 111.,  45.,  14.,   6.]),\n array([-2.50630325, -1.93388828, -1.3614733 , -0.78905833, -0.21664336,\n         0.35577162,  0.92818659,  1.50060157,  2.07301654,  2.64543152,\n         3.21784649]),\n <BarContainer object of 10 artists>)\n\n\n\n\n\n\nplt.hist(Y)\n\n(array([107.,  95.,  79., 104., 117., 106., 101., 110.,  91.,  90.]),\n array([0.00168942, 0.10132944, 0.20096946, 0.30060948, 0.4002495 ,\n        0.49988951, 0.59952953, 0.69916955, 0.79880957, 0.89844958,\n        0.9980896 ]),\n <BarContainer object of 10 artists>)"
  },
  {
    "objectID": "posts/2022-03-21-(3주차) 3월21일.html",
    "href": "posts/2022-03-21-(3주차) 3월21일.html",
    "title": "PP2023",
    "section": "",
    "text": "(3주차) 3월21일\n\n튜플을 쓰는 이유, 스트라이딩, if문이 포함된 컴프리헨션, 조건부리턴, len함수, summary, 딕셔너리(선언, 원소추출, 원소추가, 원소변경, 삭제)\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n강의영상\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-xSdBwfcYabxiJn5fG6YAsp\n\n- (1/7) 튜플을 쓰는 이유\n- (2/7) 인덱스고급: 스트라이딩 (1)\n- (3/7) 인덱스고급: 스트라이딩 (2)\n- (4/7) 컴프리헨션고급 (if문이 포함된 컴프리헨션)\n- (5/7) 함수고급 (조건부리턴), len함수\n- (6/7) summary of str/list/tupel, 딕셔너리 (모티브, 선언, 원소추출, 원소추가, 원소변경, 삭제)\n- (7/7) 숙제설명\n\n\nsome minor comments: str, list, tuple\n\n(리스트가 아니고) 튜플을 쓰는 이유\n- 책의 설명 (이 설명이 꼭 파이썬에 한정되는 것은 아님. 모든 언어에 존재하는 불변형 객체에 적용가능한 설명) - 실수방지 - 빠르다, 다중작업에 유리하다, 여러사람과 작업하기에 유리하다, 깊은복사/얕은복사시 원하지않는 오류(side effect이라고 함)를 방지할 수 있다, 메모리관리에도 유리함… - 느낌: 불변형은 기능제한이 있는데 가볍고 빠른, 가변형은 기능은 풍부하지만 약간 느리고 무거운 느낌임 (불변형:라면사리, 가변형:라면)\n- 내 설명 - 튜플의 장점은 소괄호의 생략에 있음 (이것은 파이썬과 줄리아만 가능) - 이것이 언패킹구문과 결합하여 어마무시한 가독성을 제공\n\ndef mycal(a,b):\n    return a+b, a-b, a*b, a/b  #여러개의 값을 리턴하는듯 보임. -> 사실은 길이가 4인 튜플 1개를 리턴\n\n\nmycal(2,3)\n\n(5, -1, 6, 0.6666666666666666)\n\n\n\n_, _, mulrslt, _ = mycal(2,3) # 병렬할당 \n\n\nmulrslt\n\n6\n\n\n- 의문: 왜 튜플만 괄호를 생략할 수 있지?\n- 내망상 - 튜플을 먼저 만들고, 괄호를 생략하는 문법을 추가한것은 아닐것임 - 원래 괄호없이 컴마만 대충찍어서 선언가능한 아주간단한 타입의 벡터형을 만들고 싶었을 것임. - 왜? 괄호없는 벡터를 만들고 + 언패킹을 사용하면 여러가지 구문들이 엄청나게 간단해짐. - 컴마컴마로 선언하는 벡터는 한 두번 쓰고 버리는 경우가 많으며 대부분 이름도 필요없음 \\(\\to\\) 원소에 접근해서 sorting하여 순서를 바꾸고 싶다던가 원소를 추가할 이유가 없음 \\(\\to\\) 비싼 가변형으로 만들 이유가 없다는 것.. - 우리가 필요한것: 데이터가 벡터의 형태로 모여있기만 하면 된다!\n- 다른사람들 의견 (컴공과 인터뷰) - 튜플 + 언패킹에 충격 \\(\\to\\) 파이썬 편하더라..\n\n\n인덱싱고급 (스트라이딩)\n- 스트라이딩 [start:stop:step]\n\nlst = list('abcdefgh')\nlst\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n\n\n\nlst[0:8:2]\n\n['a', 'c', 'e', 'g']\n\n\n- 생략\n\nlst[::2]\n\n['a', 'c', 'e', 'g']\n\n\n\nlst[0::2]\n\n['a', 'c', 'e', 'g']\n\n\n\nlst[:8:2]\n\n['a', 'c', 'e', 'g']\n\n\n- 예제: 짝수/홀수 원소 추출\n\nlst\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n\n\n\nlst[::2] # 1,3,5,7, ... \n\n['a', 'c', 'e', 'g']\n\n\n\nlst[1::2] # 2,4,6,8, ... \n\n['b', 'd', 'f', 'h']\n\n\n- step = -1 이면?\n\nlst\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n\n\n\nlst[::-1]\n\n['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']\n\n\n\nreverse와 같은 기능\n\n(reverse)와 비교\n관찰1: reverse 메소드는 리스트 자체를 변화시킴\n\nlst = list('abcdefgh')\nlst\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n\n\n\nlst.reverse() #리버스는 \nlst\n\n['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']\n\n\n관찰2: [::-1]는 리스트는 변화시키지 않음\n\nlst = list('abcdefgh')\nlst\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n\n\n\nlst[::-1]\n\n['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']\n\n\n\nlst\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n\n\n- 사실 -step은 쓰는 것이 조금 까다롭다.\n(예제) 처음과 끝을 생략하지 않고 아래와 동일한 효과를 주는 코드를 만들어 보자.\n\nlst = list('abcdefgh')\nlst[::-1]\n\n['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']\n\n\n(풀이)\n결국 lst[?:?:-1]의 꼴에서 적당히 ?의 값을 채우면 된다.\n\nlst[-1::-1] # 일단 첫 시작은 제일 마지막 원소 \n\n['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']\n\n\n\nlst[-1:0:-1] # 앗 마지막 인덱스는 포함 안되는거였지? \n\n['h', 'g', 'f', 'e', 'd', 'c', 'b']\n\n\n\nlst[-1:-1:-1] # 앗 마지막 인덱스는 포함 안되는거였지? \n\n[]\n\n\n잠깐 인덱스를 생각해보자.\n\n\n\na\nb\nc\nd\ne\nf\ng\nh\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n\n\n-8\n-7\n-6\n-5\n-4\n-3\n-2\n-1\n\n\n\n\nlst[-1:-9:-1] # 아..\n\n['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']\n\n\n(예제)\n\nlst[2::2]\n\n['c', 'e', 'g']\n\n\n\nlst[-2::-2]\n\n['g', 'e', 'c', 'a']\n\n\n\nlst[-2:2:2]\n\n[]\n\n\n\nlst[2:2:2]\n\n[]\n\n\n\nlst[2:2:-2]\n\n[]\n\n\n결론: -step을 자주 쓰진 말자?\n\n\n컴프리헨션 고급 (if문이 포함된 컴프리헨션)\n- 예제: 제곱수중에서 12로 나누어 떨어지는 수만 원소로 가지는 리스트를 만들고 싶다. - 제곱수: 1,4,9,16,25,36, … - 12로 나누어 떨어지는 수: 36, …\n(예비학습)\n\n12 % 4 # %는 나머지를 계산하는 연산자, 12를 4로 나누면 나머지가 0\n\n0\n\n\n\n12 % 5 # %는 나머지를 계산하는 연산자, 12를 5로 나누면 나머지가 2\n\n2\n\n\n(풀이1)\n\nlst = [] \nfor i in range(1,101): \n    if (i**2 % 12 == 0): \n        lst.append(i**2)\n\n\nlst\n\n[36,\n 144,\n 324,\n 576,\n 900,\n 1296,\n 1764,\n 2304,\n 2916,\n 3600,\n 4356,\n 5184,\n 6084,\n 7056,\n 8100,\n 9216]\n\n\n(풀이2)\n\n[i**2 for i in range(1,101) if (i**2 % 12 == 0)]\n\n[36,\n 144,\n 324,\n 576,\n 900,\n 1296,\n 1764,\n 2304,\n 2916,\n 3600,\n 4356,\n 5184,\n 6084,\n 7056,\n 8100,\n 9216]\n\n\n\n\n함수고급 (조건부리턴)\n- 홀수/짝수를 판별하는 함수 만들기 1\n\ndef test(a):\n    if a % 2 ==0: \n        return 'even'\n    else:\n        return 'odd'\n\n\ntest(1)\n\n'odd'\n\n\n\ntest(2)\n\n'even'\n\n\n\ntest(3)\n\n'odd'\n\n\n\ntest(4)\n\n'even'\n\n\n\n[test(a) for a in range(1,11)]\n\n['odd', 'even', 'odd', 'even', 'odd', 'even', 'odd', 'even', 'odd', 'even']\n\n\n- 홀수/짝수를 판별하는 함수 만들기 2\n\ndef test(a):\n    return 'even' if a%2 ==0 else 'odd'\n\n\ntest(3)\n\n'odd'\n\n\n\n[test(a) for a in range(1,11)]\n\n['odd', 'even', 'odd', 'even', 'odd', 'even', 'odd', 'even', 'odd', 'even']\n\n\n\n\nlen함수\n- 0차원 자료형은 len함수가 동작하지 않음\n\na=1 \nlen(a)\n\nTypeError: object of type 'int' has no len()\n\n\n\na=True\nlen(a)\n\nTypeError: object of type 'bool' has no len()\n\n\n\na=3.14\nlen(a)\n\nTypeError: object of type 'float' has no len()\n\n\n\nnote: 이것이 어떠한 수학적인 의미를 가지거나 0차원의 본질적진리를 뜻하는 것은 안미. R에서는 1,3.14,TRUE의 길이가 1로 존재함.\n\n- 1차원 자료형은 len함수가 동작\n\na='guebin'\nlen(a)\n\n6\n\n\n\na=[1,2,3,4,5,6]\nlen(a)\n\n6\n\n\n\na=1,2,3,4,5,6 \nlen(a)\n\n6\n\n\n\na=range(10)\nlen(a)\n\n10\n\n\n- 길이가 1인 1차원 자료형과 0차원 자료형은 다른것임\n\na='g'\nlen(a)\n\n1\n\n\n\na=[1] \nlen(a)\n\n1\n\n\n\na=(1,)\nlen(a)\n\n1\n\n\n\na=range(1)\nlen(a)\n\n1\n\n\n- 길이가 0인 1차원 자료형도 존재함\n\na=''\nlen(a)\n\n0\n\n\n\na=[]\nlen(a)\n\n0\n\n\n\na=()\nlen(a)\n\n0\n\n\n\na=range(0)\nlen(a)\n\n0\n\n\n\n\n\nsummary: str, list, tuple\n- str, list, tuple은 모두 시퀀스형이라는 공통점이 있다. \\(\\to\\) 원소의 위치번호로 인덱싱이 가능\n\nlst = [1,2,3,4]\n\n\nlst[0] # 위치번호=0\n\n1\n\n\n\nlst[-1] # 위치번호=-1\n\n4\n\n\n- str, list, tuple은 차이점도 존재함. 잠깐 정리해보자.\n시퀀스형의 카테고리\n\n컨테니어형: list, tuple\n균일형: str\n가변형: list\n불변형: tuple, str\n\n표로 정리하면\n\n\n\n\n컨테니어형\n균일형\n\n\n\n\n가변형\nlist\n.\n\n\n불변형\ntuple\nstr\n\n\n\n- 시퀀스형이 아닌 1차원 자료형도 있을까? 원소의 위치번호로 인덱싱이 불가능한 자료형\n- 왜 이런게 필요할까? - 벡터에서 원소를 뽑는것은 정보의 모임에서 정보를 검색하는 것과 같다. - 정보를 순서대로 나열한뒤에 그 순서를 이용하여 검색하는 방법은 유용하다. - 하지만 경우에 따라서는 키워드를 기억해서 그 키워드를 바탕으로 정보에 접근하는 방법이 유용할 수 있다.\n카카오톡 대화내용검색\n(상황1) 오늘아침에 와이프가 뭔가를 카톡으로 부탁했었음. 그런데 그 뭔가가 기억안남.\n(상황2) 개강전에 동료교수와 함께 저녁약속을 카톡으로 잡았었음. 그런데 그게 언제인지 기억안남.\n(상황3) 오늘아침 동료교수와 함께 점심약속을 카톡으로 잡았었음. 그런데 그 장소가 기억나지 않음.\n- 순서대로 정리된 자료를 검색할때는 시퀀스형이 유리하다. 그런데 키워드로 검색하고 싶을 경우는 딕셔너리 타입이 유리하다.\n\n\n딕셔너리\n\n선언\n- 방법1\n\nscore={'guebin':49, 'iu':80}\nscore\n\n{'guebin': 49, 'iu': 80}\n\n\n\ntype(score)\n\ndict\n\n\n- 방법2\n\nscore=dict(guebin=49, iu=80)\nscore\n\n{'guebin': 49, 'iu': 80}\n\n\n\ntype(score)\n\ndict\n\n\n- 방법3\n\n_lst = [['guebin',49],['iu',80]]\n_lst \n\n[['guebin', 49], ['iu', 80]]\n\n\n\ndict(_lst)\n\n{'guebin': 49, 'iu': 80}\n\n\n- 방법4\n\n_tpl = ('guebin',49), ('iu',80)\n_tpl\n\n(('guebin', 49), ('iu', 80))\n\n\n\ndict(_tpl)\n\n{'guebin': 49, 'iu': 80}\n\n\n\n\n원소추출\n\nscore = {'guebin':49, 'iu':80}\nscore\n\n{'guebin': 49, 'iu': 80}\n\n\nguebin의 점수를 추출하고 싶다면?\n\nscore[0] # 이렇게 뽑는것이 아니고! \n\nKeyError: 0\n\n\n\nscore['guebin'] \n\n49\n\n\n- 리스트로 저장했다면?\n\nscore=[['guebin',49],['iu',80]]\nscore\n\n[['guebin', 49], ['iu', 80]]\n\n\nguebin의 점수를 추출하고 싶다면?\n(방법1)\n\nscore[0][1] # guebin의 점수를 출력하란 의미\n\n49\n\n\n(방법2)\n\n_keys = [score[i][0] for i in range(len(score))] # 리스트컴프리헨션\n_keys\n\n['guebin', 'iu']\n\n\n\n[score[i][1] for i in range(len(score)) if score[i][0] =='guebin' ] \n\n[49]\n\n\n\n어지럽죠?\n\n\n\n원소추가, 변경, 삭제\n\nscore={'guebin':49, 'iu':80}\nscore\n\n{'guebin': 49, 'iu': 80}\n\n\n- 원소에 접근\n\nscore['guebin']\n\n49\n\n\n- 추가\n\nscore['hynn'] = 99 # 추가 \nscore \n\n{'guebin': 49, 'iu': 80, 'hynn': 99}\n\n\n- 변경\n\nscore['iu'] = 99  # 변경 \nscore \n\n{'guebin': 49, 'iu': 99, 'hynn': 99}\n\n\n- 삭제\n(방법1)\n\nscore={'guebin':49, 'iu':80, 'hynn':99}\ndel score['guebin']  \nscore\n\n{'iu': 80, 'hynn': 99}\n\n\n(방법2)\n\nscore={'guebin':49, 'iu':80, 'hynn':99} \nscore.pop('guebin')\n\n49\n\n\n\nscore\n\n{'iu': 80, 'hynn': 99}\n\n\n- 참고로 리스트였다면 이러한 삭제작업역시 비효율적이었을 것임\n\nscore = [['guebin',49],['iu',80],['hynn',99]] \nscore\n\n[['guebin', 49], ['iu', 80], ['hynn', 99]]\n\n\n\nscore = [[key,val] for key,val in score if key != 'guebin'] \nscore\n\n[['iu', 80], ['hynn', 99]]\n\n\n(숙제) 길이가 4인 dictionary를 생성 - len 함수를 이용하여 길이를 측정 - key를 이용하여 각 원소에 접근하여 보기"
  },
  {
    "objectID": "posts/2022-04-21-2022년 파이썬입문 중간고사 예상문제.html",
    "href": "posts/2022-04-21-2022년 파이썬입문 중간고사 예상문제.html",
    "title": "PP2023",
    "section": "",
    "text": "youtube: https://youtube.com/playlist?list=PLQqh36zP38-xN-33p0lBb8abQXuiuLJPh\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt \n\nimport numpy as np\nimport matplotlib.pyplot as plt \n\n\n\n\n(1) 리스트의 *연산자를 이용하여 길이가 10이고 모든원소가 1인 리스트를 선언하라.\n\n[1]*10\n\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n(2) 튜플언패킹을 이용하여 아래를 한줄로 처리하는 코드를 작성하라.\na=1\nb=2.33\nc='guebin'\n\na,b,c = 1,2.33,'guebin'\n\n(3) 길이가 1인 튜플을 만들어 자신의 학번을 저장하라.\n\n(43052,)\n\n(43052,)\n\n\n(4) 아래와 같은 문자열의 마지막원소를 출력하는 코드를 작성하라.\ntest_str = 'guebin'\n\ntest_str = 'guebin'\ntest_str[-1]\n\n'n'\n\n\n(5) 본인 학번을 이용하여 random seed 를 설정하라. 평균이 0, 분산이 1인 정규분포에 10000개의 값을 추출한뒤 값이 1.96보다 큰 경우가 몇개 있는지 세어보라.\nhint: 본인학번이 202143052인 경우 아래와 같이 설정\nnp.random.seed(202143052)\n\nnp.random.seed(202143052)\nsum(np.random.randn(10000) > 1.96)\n\n242\n\n\n(6) 아래와 같은 array의 shape을 (4,3)으로 수정하는 코드를 작성하라.\ntest_arr = np.arange(12)\n\ntest_arr = np.arange(12)\ntest_arr.reshape(4,3)\n\narray([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11]])\n\n\n\n\n\n(1) \\({\\bf x}=(x_1,\\dots,x_{100})\\)를 표준정규분포에서 서로독립인 100개의 난수를 생성하여 만든 길이가 100인 vector라고 하자.\n\n\\(\\sum_{i=1}^{100} x_i^2\\) 를 계산하라.\n\\(y_k = \\sum_{i=1}^{k}x_i\\)를 만족하는 \\({\\bf y}=(y_1,y_2,\\dots,y_{100})\\)를 생성하라.\n\n\nx=np.random.randn(100)\nsum(x**2)\n\n103.57060890918511\n\n\n\nx.cumsum()\n\narray([ 0.47468281,  0.34386559,  1.15108986,  2.21490225,  3.68862517,\n        6.6560929 ,  4.93164856,  4.64464292,  4.42000953,  4.59835234,\n        4.89968072,  5.96011555,  6.05848061,  6.30156284,  6.45723823,\n        5.83750354,  5.37523078,  5.15841694,  5.9573261 ,  6.05283436,\n        5.22666108,  4.59445292,  4.28220497,  5.02407374,  4.04275772,\n        3.760779  ,  4.64585317,  3.35034863,  4.70650237,  6.00188554,\n        5.655467  ,  4.71014034,  4.1729924 ,  2.6572072 ,  2.45471889,\n        2.4957559 ,  2.33281836,  1.93651955,  1.19124851,  0.72053316,\n       -0.85868479, -0.51403318, -0.39293256, -0.11037825, -0.90405075,\n        0.36017316, -0.64589555, -0.61405341, -0.6071379 , -2.25775258,\n       -2.58632882, -4.15597547, -4.35785515, -3.06555043, -2.53143389,\n       -3.75231655, -2.53480854, -3.17666336, -3.24829447, -4.82257719,\n       -5.12059882, -3.92232594, -3.92249184, -5.26608319, -5.50649365,\n       -6.94874974, -6.31473021, -5.30493964, -6.66675701, -6.05865575,\n       -5.9302322 , -7.51211747, -5.28113967, -4.7794617 , -5.80837388,\n       -6.83179461, -5.72807049, -5.43528895, -4.82945081, -6.24232477,\n       -5.84089936, -4.82742572, -4.05496918, -5.22220941, -4.43970357,\n       -6.44483947, -6.82657167, -6.58432556, -5.34876223, -4.73907863,\n       -3.30982415, -3.40413528, -3.31029211, -1.97453616, -1.27172043,\n       -1.88394219,  0.7616805 ,  1.32059937,  3.97185397,  3.08178286])\n\n\n(2) \\(i=1,2,\\dots,1000\\)에 대하여 \\((\\cos(t_i) ,\\sin(t_i))\\)를 시각화하는 코드를 작성하라. 단 \\(t_i=\\frac{2\\pi i }{1000}\\).\n\nt=np.arange(1,1001)*2*np.pi/1000\nplt.plot(np.cos(t),np.sin(t))\n\n\n\n\n(3) 아래의 문자열에서 W가 몇개 들어 있는지 세는 코드를 작성하라.\ntest_str = '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'\n\ntest_str = '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'\n\n\ntest_str.count(\"W\")\n\n4\n\n\n\nlist(test_str).count(\"W\")\n\n4\n\n\n(4) 블록대각행렬의 구현: 입력과 출력이 아래의 예시와 같은 함수를 구현하라.\n### 예시1\n\n입력: (2,3) \n\n출력: \n1 1 0 0 0 \n1 1 0 0 0 \n0 0 1 1 1 \n0 0 1 1 1 \n0 0 1 1 1 \n### 예시2\n\n입력: (2,2,3) \n\n출력: \n1 1 0 0 0 0 0\n1 1 0 0 0 0 0\n0 0 1 1 0 0 0 \n0 0 1 1 0 0 0\n0 0 0 0 1 1 1 \n0 0 0 0 1 1 1 \n0 0 0 0 1 1 1 \n\ndef f(arr): \n    arr2 = np.cumsum(arr)\n    bmat = np.zeros([sum(arr) ,sum(arr) ])\n    a,b=0,0 \n    for i in arr2: \n        b=i \n        bmat[a:b,a:b] = np.ones(b-a) \n        a=i\n    return bmat \n\n\nf([3,2,2])\n\narray([[1., 1., 1., 0., 0., 0., 0.],\n       [1., 1., 1., 0., 0., 0., 0.],\n       [1., 1., 1., 0., 0., 0., 0.],\n       [0., 0., 0., 1., 1., 0., 0.],\n       [0., 0., 0., 1., 1., 0., 0.],\n       [0., 0., 0., 0., 0., 1., 1.],\n       [0., 0., 0., 0., 0., 1., 1.]])\n\n\n\n\n\n(1) 아래는 python을 설치하는 방법을 소개한 url 이다. 직접 url에 들어가서 설치하는 방법을 읽어보고 곤이, 철용, 아귀, 짝귀 중 옳은말을 한 사람을 모두 골라라. - https://wikidocs.net/8\n(곤이) 해당 방법은 아나콘다를 이용하지 않고 파이썬을 설치하는 방법이다.\n(철용) 그래서 이 방법으로는 가상환경을 만들 수 없겠군.\n(아귀) 위 url에 제시된 방법으로 설치하면 항상 *.py을 만들어야만 파이썬코드를 실행할 수 있다는 단점이 있다.\n(짝귀) 위 url은 IDE의 선택에 대하여 서술하고 있다.\n답: 곤이, 철용\n(2) 아래를 보고 적절한 설명을 한 사람을 골라라.\nimport pandas as pd \npd?\nType:        module\nString form: <module 'pandas' from '/home/cgb2/anaconda3/envs/py39/lib/python3.9/site-packages/pandas/__init__.py'>\nFile:        ~/anaconda3/envs/py39/lib/python3.9/site-packages/pandas/__init__.py\nDocstring:  \npandas - a powerful data analysis and manipulation library for Python\n=====================================================================\n\n**pandas** is a Python package providing fast, flexible, and expressive data\nstructures designed to make working with \"relational\" or \"labeled\" data both\neasy and intuitive. It aims to be the fundamental high-level building block for\ndoing practical, **real world** data analysis in Python. Additionally, it has\nthe broader goal of becoming **the most powerful and flexible open source data\nanalysis / manipulation tool available in any language**. It is already well on\nits way toward this goal.\n\nMain Features\n-------------\nHere are just a few of the things that pandas does well:\n\n  - Easy handling of missing data in floating point as well as non-floating\n    point data.\n  - Size mutability: columns can be inserted and deleted from DataFrame and\n    higher dimensional objects\n  - Automatic and explicit data alignment: objects can be explicitly aligned\n    to a set of labels, or the user can simply ignore the labels and let\n    `Series`, `DataFrame`, etc. automatically align the data for you in\n    computations.\n  - Powerful, flexible group by functionality to perform split-apply-combine\n    operations on data sets, for both aggregating and transforming data.\n  - Make it easy to convert ragged, differently-indexed data in other Python\n    and NumPy data structures into DataFrame objects.\n  - Intelligent label-based slicing, fancy indexing, and subsetting of large\n    data sets.\n  - Intuitive merging and joining data sets.\n  - Flexible reshaping and pivoting of data sets.\n  - Hierarchical labeling of axes (possible to have multiple labels per tick).\n  - Robust IO tools for loading data from flat files (CSV and delimited),\n    Excel files, databases, and saving/loading data from the ultrafast HDF5\n    format.\n  - Time series-specific functionality: date range generation and frequency\n    conversion, moving window statistics, date shifting and lagging.\n(로이) pd?이 실행된 결과를 살펴보니 사용자가 pandas라는 이름의 패키지를 설치했거나 본인이 pandas라는 이름의 폴더를 만들어 ~/anaconda3/envs/py39/lib/python3.9/site-packages에 넣었다고 볼 수 있겠군.\n(이서) 네, 따라서 앞으로 pandas 패지키에 포함된 모든 함수를 이용하기 위해서는 pandas. 를 앞에 붙이고 사용하시면 됩니다. 예를들어 pandas안의 concat()함수를 사용하고 싶다면 pandas.concat()과 같은 형식으로요.\n(일권) 이서말도 맞지만 아래와 같이 선언한다면 pandas.concat() 대신에 그냥 concat() 만으로도 사용할 수 있어.\nimport pandas as pd \nfrom pd import concat \n(현이) pd?의 실행결과 Docstring:이 있는것으로 보아 __init__.py상단에 아래와 같은 내용이 있음을 유추할 수 있어.\npandas - a powerful data analysis and manipulation library for Python\n=====================================================================\n... \n(중략) \n...\n  - Time series-specific functionality: date range generation and frequency\n    conversion, moving window statistics, date shifting and lagging.\n\n답: 로이, 현이\n\n\n\n- 모든 문항은 부분점수 없이 채점합니다.\n- 코드구현 I은 문제의 조건을 준수하여 구현해야 하는 유형입니다. 조건을 무시하고 구현할시 0점처리합니다. - 예를들어 문제 1-(1) 의 경우 [1,1,1,1,1,1,1,1,1,1] 와 같이 리스트를 선언하면 0점 처리됩니다.\n- 코드구현 II는 자유롭게 코드를 구현해도 괜찮은 유형입니다.\n- 문제 3-(1)의 경우 영어로 된 url이 나올 수 있습니다.\n- 실제시험은 예상유형의 문항수보다 많습니다.\n- 예상유형과 똑같은 문제는 시험에 출제되지 않습니다."
  },
  {
    "objectID": "posts/2022-04-11-(6주차) 4월11일.html",
    "href": "posts/2022-04-11-(6주차) 4월11일.html",
    "title": "PP2023",
    "section": "",
    "text": "(6주차) 4월11일\n\nnumpy (@, concat, stack, sum, mean, std, max, min, prod, argmax, argmin, cumsum, cumprod, diff)\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n강의영상\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-zFoNClnO36HKRv0S9nMx_H\n\n- (1/6) 2차원 배열과 연립1차 방정식, @의 유연성, 차원\n- (2/6) concat\n- (3/6) stack\n- (4/6) sum, mean, std, max, min, prod\n- (5/6) argmax, argmin, cumsum, cumprod, diff\n- (6/6) 숙제설명\n\n\nimports\n\nimport numpy as np\n\n\n\nnumpy공부 3단계: 차원\n\n2차원 배열과 연립 1차 방정식\n- 아래의 연립방정식 고려\n\\(\\begin{cases} y+z+w = 3 \\\\ x+z+w = 3 \\\\ x+y+w = 3 \\\\ x+y+z = 3 \\end{cases}\\)\n- 행렬표현?\n\\(\\begin{bmatrix} 0 & 1 & 1 & 1 \\\\ 1 & 0 & 1 & 1 \\\\ 1 & 1 & 0 & 1 \\\\ 1 & 1 & 1 & 0 \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\\\ z \\\\ w \\end{bmatrix} = \\begin{bmatrix} 3 \\\\ 3 \\\\ 3 \\\\ 3 \\end{bmatrix}\\)\n- 풀이\n\nA = np.array([[0,1,1,1],[1,0,1,1],[1,1,0,1],[1,1,1,0]])\nA\n\narray([[0, 1, 1, 1],\n       [1, 0, 1, 1],\n       [1, 1, 0, 1],\n       [1, 1, 1, 0]])\n\n\n\nb= np.array([3,3,3,3]).reshape(4,1)\nb\n\narray([[3],\n       [3],\n       [3],\n       [3]])\n\n\n\nnp.linalg.inv(A) @ b \n\narray([[1.],\n       [1.],\n       [1.],\n       [1.]])\n\n\n- 다른풀이\nb를 아래와 같이 만들어도 된다.\n\nb=np.array([3,3,3,3])\nb\n\narray([3, 3, 3, 3])\n\n\n\nb.shape # b.shape은 길이가 1인 튜플로 나온다. \n\n(4,)\n\n\n\nnp.linalg.inv(A) @ b \n\narray([1., 1., 1., 1.])\n\n\n\n\n@의 유연성\n- 엄밀하게는 아래의 행렬곱이 가능하다. - (2,2) @ (2,1) => (2,1) - (1,2) @ (2,2) => (1,2)\n\nA = np.array([1,2,3,4]).reshape(2,2) \nb = np.array([1,2]).reshape(2,1) \nA@b\n\narray([[ 5],\n       [11]])\n\n\n\nA.shape, b.shape, (A@b).shape\n\n((2, 2), (2, 1), (2, 1))\n\n\n\nA = np.array([1,2,3,4]).reshape(2,2) \nb = np.array([1,2]).reshape(1,2) \nb@A \n\narray([[ 7, 10]])\n\n\n\nA.shape, b.shape, (b@A).shape\n\n((2, 2), (1, 2), (1, 2))\n\n\n- 당연히 아래는 성립안한다.\n\nA = np.array([1,2,3,4]).reshape(2,2) \nb = np.array([1,2]).reshape(2,1) \nb@A\n\nValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 1)\n\n\n\nA = np.array([1,2,3,4]).reshape(2,2) \nb = np.array([1,2]).reshape(1,2) \nA@b\n\nValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 2)\n\n\n- 아래는 어떨까? 계산가능할까? \\(\\to\\) 모두 계산가능! - (2,) @ (2,2) = (2,) - (2,2) @ (2,) = (2,)\n\nA = np.array([1,2,3,4]).reshape(2,2)\nb = np.array([1,2]) \nA@b\n\narray([ 5, 11])\n\n\n\nA.shape, b.shape, (A@b).shape \n\n((2, 2), (2,), (2,))\n\n\n\nb를 마치 (2,1)처럼 해석하여 행렬곱하고 결과는 다시 (2,) 로 만든것 같다.\n\n\nb@A\n\narray([ 7, 10])\n\n\n\nA.shape, b.shape, (b@A).shape \n\n((2, 2), (2,), (2,))\n\n\n\n이때는 \\(b\\)를 마치 (1,2)처럼 해석하여 행렬곱하고 결과는 다시 (2,)로 만든것 같다.\n\n- 아래는 어떠할까?\n\nb1 = np.array([1,2,3,4]) \nb2 = np.array([1,2,3,4]) \nb1@b2 \n\n30\n\n\n\nb1.shape, b2.shape, (b1@b2).shape \n\n((4,), (4,), ())\n\n\n\n(1,4) @ (4,1) = (1,1) 로 생각\n\n- 즉 위는 아래와 같이 해석하고 행렬곱한것과 결과가 같다.\n\nb1 = np.array([1,2,3,4]).reshape(1,4) \nb2 = np.array([1,2,3,4]).reshape(4,1) \nb1@b2 \n\narray([[30]])\n\n\n\nb1.shape, b2.shape, (b1@b2).shape \n\n((1, 4), (4, 1), (1, 1))\n\n\n- 때로는 (4,1) @ (1,4)와 같은 계산결과를 얻고 싶을 수 있는데 이때는 차원을 명시해야함\n\nb1 = np.array([1,2,3,4]).reshape(4,1) \nb2 = np.array([1,2,3,4]).reshape(1,4) \nb1@b2 \n\narray([[ 1,  2,  3,  4],\n       [ 2,  4,  6,  8],\n       [ 3,  6,  9, 12],\n       [ 4,  8, 12, 16]])\n\n\n\n\n차원\n- 넘파이배열의 차원은 .shape 으로 확인가능\n- 아래는 모두 미묘하게 다르다.\n\na=np.array(3.14) # 스칼라, 0d array \na, a.shape\n\n(array(3.14), ())\n\n\n\na=np.array([3.14]) # 벡터, 1d array \na, a.shape\n\n(array([3.14]), (1,))\n\n\n\na=np.array([[3.14]]) # 매트릭스, 2d array \na, a.shape\n\n(array([[3.14]]), (1, 1))\n\n\n\na=np.array([[[3.14]]]) # 텐서, 3d array \na, a.shape\n\n(array([[[3.14]]]), (1, 1, 1))\n\n\n\n\n\nnumpy공부 4단계: 축\n\nnp.concatenate\n- 기본예제\n\na=np.array([1,2]) \nb=-a\n\n\nnp.concatenate([a,b]) \n\narray([ 1,  2, -1, -2])\n\n\n- 응용\n\na=np.array([1,2])\nb=-a \nc=np.array([3,4,5])\n\n\nnp.concatenate([a,b,c])\n\narray([ 1,  2, -1, -2,  3,  4,  5])\n\n\n\n여기까진 딱히 칸캐터네이트의 메리트가 없어보임\n리스트였다면 a+b+c 하면 되는 기능이니까?\n\n- 2d array에 적용해보자.\n\na=np.arange(4).reshape(2,2) \nb=-a\n\n\nnp.concatenate([a,b]) \n\narray([[ 0,  1],\n       [ 2,  3],\n       [ 0, -1],\n       [-2, -3]])\n\n\n- 옆으로 붙일려면?\n\nnp.concatenate([a,b],axis=1)\n\narray([[ 0,  1,  0, -1],\n       [ 2,  3, -2, -3]])\n\n\n- 위의 코드에서 axis=1 이 뭐지? axis=0,2 등을 치면 결과가 어떻게 될까?\n\nnp.concatenate([a,b],axis=0)\n\narray([[ 0,  1],\n       [ 2,  3],\n       [ 0, -1],\n       [-2, -3]])\n\n\n\n이건 그냥 np.concatenate([a,b])와 같다.\nnp.concatenate([a,b])는 np.concatenate([a,b],axis=0)의 생략버전이군?\n\n\nnp.concatenate([a,b],axis=2)\n\nAxisError: axis 2 is out of bounds for array of dimension 2\n\n\n\n이런건 없다.\n\n- axis의 의미가 뭔지 궁금함. 좀 더 예제를 살펴보자.\n\na=np.array(range(2*3*4)).reshape(2,3,4)\na\n\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]])\n\n\n\nb=-a\nb\n\narray([[[  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\n\nnp.concatenate([a,b],axis=0) \n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [  8,   9,  10,  11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23]],\n\n       [[  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\n\nnp.concatenate([a,b],axis=1) \n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [  8,   9,  10,  11],\n        [  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23],\n        [-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\n\nnp.concatenate([a,b],axis=2) \n\narray([[[  0,   1,   2,   3,   0,  -1,  -2,  -3],\n        [  4,   5,   6,   7,  -4,  -5,  -6,  -7],\n        [  8,   9,  10,  11,  -8,  -9, -10, -11]],\n\n       [[ 12,  13,  14,  15, -12, -13, -14, -15],\n        [ 16,  17,  18,  19, -16, -17, -18, -19],\n        [ 20,  21,  22,  23, -20, -21, -22, -23]]])\n\n\n\n이번에는 axis=2까지 된다?\n\n\nnp.concatenate([a,b],axis=3) \n\nAxisError: axis 3 is out of bounds for array of dimension 3\n\n\n\naxis=3까지는 안된다?\n\n- 뭔가 나름의 방식으로 합쳐지는데 원리가 뭘까?\n(분석1) np.concatenate([a,b],axis=0)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\na.shape, b.shape, np.concatenate([a,b],axis=0).shape\n\n((2, 3, 4), (2, 3, 4), (4, 3, 4))\n\n\n\n첫번째차원이 바뀌었다 => 첫번째 축이 바뀌었다 => axis=0 (파이썬은 0부터 시작하니까!)\n\n(분석2) np.concatenate([a,b],axis=1)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\na.shape, b.shape, np.concatenate([a,b],axis=1).shape\n\n((2, 3, 4), (2, 3, 4), (2, 6, 4))\n\n\n\n두번째차원이 바뀌었다 => 두번째 축이 바뀌었다 => axis=1\n\n(분석3) np.concatenate([a,b],axis=2)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\na.shape, b.shape, np.concatenate([a,b],axis=2).shape\n\n((2, 3, 4), (2, 3, 4), (2, 3, 8))\n\n\n\n세번째차원이 바뀌었다 => 세번째 축이 바뀌었다 => axis=2\n\n(분석4) np.concatenate([a,b],axis=3)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\na.shape, b.shape, np.concatenate([a,b],axis=3).shape\n\nAxisError: axis 3 is out of bounds for array of dimension 3\n\n\n\n네번째차원이 없다 => 네번째 축이 없다 => axis=3으로 하면 에러가 난다.\n\n(보너스1)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\nnp.concatenate([a,b],axis=-1)\n\narray([[[  0,   1,   2,   3,   0,  -1,  -2,  -3],\n        [  4,   5,   6,   7,  -4,  -5,  -6,  -7],\n        [  8,   9,  10,  11,  -8,  -9, -10, -11]],\n\n       [[ 12,  13,  14,  15, -12, -13, -14, -15],\n        [ 16,  17,  18,  19, -16, -17, -18, -19],\n        [ 20,  21,  22,  23, -20, -21, -22, -23]]])\n\n\n\na.shape, b.shape, np.concatenate([a,b],axis=-1).shape\n\n((2, 3, 4), (2, 3, 4), (2, 3, 8))\n\n\n\n마지막 차원이 바뀌었다 => 마지막 축이 바뀌었다 => axis = -1\n\n(보너스2)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\nnp.concatenate([a,b],axis=-2)\n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [  8,   9,  10,  11],\n        [  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23],\n        [-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\n\na.shape, b.shape, np.concatenate([a,b],axis=-2).shape\n\n((2, 3, 4), (2, 3, 4), (2, 6, 4))\n\n\n\n마지막에서 2번째 차원이 바뀌었다 => 마지막에서 2번째 축이 바뀌었다 => axis = -2\n\n(보너스3)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\nnp.concatenate([a,b],axis=-3)\n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [  8,   9,  10,  11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23]],\n\n       [[  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\n\na.shape, b.shape, np.concatenate([a,b],axis=-3).shape\n\n((2, 3, 4), (2, 3, 4), (4, 3, 4))\n\n\n\n마지막에서 3번째 차원이 바뀌었다 => 마지막에서 3번째 축이 바뀌었다 => axis = -3\n\n(보너스3)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\nnp.concatenate([a,b],axis=-4)\n\nAxisError: axis -4 is out of bounds for array of dimension 3\n\n\n\n마지막에서 4번째 차원은 없다 => 마지막에서 4번째 축이 없다 => axis = -4는 에러가 난다.\n\n- 0차원은 축이 없으므로 concatenate를 쓸 수 없다.\n\na= np.array(1)\nb= np.array(-1) \n\n\na.shape, b.shape\n\n((), ())\n\n\n\nnp.concatenate([a,b])\n\nValueError: zero-dimensional arrays cannot be concatenated\n\n\n- 꼭 a,b가 같은 차원일 필요는 없다.\n\na=np.array(range(4)).reshape(2,2) \nb=np.array(range(2)).reshape(2,1)  \n\n\nnp.concatenate([a,b],axis=1)\n\narray([[0, 1, 0],\n       [2, 3, 1]])\n\n\n\na.shape, b.shape, np.concatenate([a,b],axis=1).shape\n\n((2, 2), (2, 1), (2, 3))\n\n\n\n\nnp.stack\n- 혹시 아래가 가능할까?\n\n(3,) 결합 (3,) => (3,2)\n\n\na=np.array([1,2,3])\nb=-a\n\n\na,b\n\n(array([1, 2, 3]), array([-1, -2, -3]))\n\n\n\nnp.concatenate([a,b],axis=1)\n\nAxisError: axis 1 is out of bounds for array of dimension 1\n\n\n\n불가능\n\n- 아래와 같이 하면 해결가능\n\na=np.array([1,2,3]).reshape(3,1) \nb=-a\n\n\na,b\n\n(array([[1],\n        [2],\n        [3]]),\n array([[-1],\n        [-2],\n        [-3]]))\n\n\n\nnp.concatenate([a,b],axis=1)\n\narray([[ 1, -1],\n       [ 2, -2],\n       [ 3, -3]])\n\n\n\n분석: (3) (3) => (3,1) (3,1) => (3,1) concat (3,1)\n\n- 위의 과정을 줄여서 아래와 같이 할 수 있다.\n\na=np.array([1,2,3])\nb=-a\n\n\nnp.stack([a,b],axis=1)\n\narray([[ 1, -1],\n       [ 2, -2],\n       [ 3, -3]])\n\n\n- 아래도 가능\n\nnp.stack([a,b],axis=0)\n\narray([[ 1,  2,  3],\n       [-1, -2, -3]])\n\n\n- 분석해보고 외우자\n(분석1)\n\na=np.array([1,2,3])\nb=-a\n\n\na.shape, b.shape, np.stack([a,b],axis=0).shape\n\n((3,), (3,), (2, 3))\n\n\n\n\n\n=> 첫 위치에 축을 추가 (axis=0) => (1,3) (1,3) => (2,3)\n\n\n\n(분석2)\n\na=np.array([1,2,3])\nb=-a\n\n\na.shape, b.shape, np.stack([a,b],axis=1).shape\n\n((3,), (3,), (3, 2))\n\n\n\n\n\n=> 두 위치에 축을 추가 (axis=1) => (3,1) (3,1) => (3,2)\n\n\n\n- 고차원예제\n\na=np.arange(3*4*5).reshape(3,4,5) \nb=-a\n\n\na.shape, b.shape\n\n((3, 4, 5), (3, 4, 5))\n\n\n\nnp.stack([a,b],axis=0).shape # (3,4,5) => (1,3,4,5) // 첫 위치에 축이 추가되고 스택 \n\n(2, 3, 4, 5)\n\n\n\nnp.stack([a,b],axis=1).shape # (3,4,5) => (3,1,4,5) // 두번째 위치에 축이 추가되고 스택 \n\n(3, 2, 4, 5)\n\n\n\nnp.stack([a,b],axis=2).shape # (3,4,5) => (3,4,1,5) // 세번째 위치에 축이 추가되고 스택 \n\n(3, 4, 2, 5)\n\n\n\nnp.stack([a,b],axis=3).shape # (3,4,5) => (3,4,5,1) // 네번째 위치에 축이 추가되고 스택 \n\n(3, 4, 5, 2)\n\n\n\nnp.stack([a,b],axis=-1).shape # axis=-1 <=> axis=3 \n\n(3, 4, 5, 2)\n\n\n\nnp.stack([a,b],axis=-2).shape # axis=-2 <=> axis=2\n\n(3, 4, 2, 5)\n\n\nnp.concatenate 는 축의 총 갯수를 유지하면서 결합, np.stack은 축의 갯수를 하나 증가시키면서 결합\n\n\nsum\n- 1차원\n\na = np.array([1,2,3]) \na\n\narray([1, 2, 3])\n\n\n\na.sum()\n\n6\n\n\n\na.sum(axis=0)\n\n6\n\n\n- 2차원\n\na=np.array(range(6)).reshape(2,3)\na\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n\na.sum() # 전체합\n\n15\n\n\n\na.sum(axis=0) \n\narray([3, 5, 7])\n\n\n\na.sum(axis=1) \n\narray([ 3, 12])\n\n\n- 2차원 결과 분석\n\na.shape, a.sum(axis=0).shape\n\n((2, 3), (3,))\n\n\n\n첫번째 축이 삭제됨 => axis=0\n\n\na.shape, a.sum(axis=1).shape\n\n((2, 3), (2,))\n\n\n\n두번째 축이 삭제됨 => axis=1\n\n- 연습\n\na=np.array(range(10)).reshape(5,2) \na\n\narray([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7],\n       [8, 9]])\n\n\n(문제1) 1열의 합, 2열의 합을 계산하고 싶다면?\n(풀이) 차원이 (5,2) => (2,) 로 나와야 한다. (그럼 첫번째 축이 삭제되어야 하네?)\n\na.sum(axis=0)\n\narray([20, 25])\n\n\n(문제2) 1행의 합, 2행의 합, … , 5행의 합을 계산하고 싶다면?\n(풀이) 차원이 (5,2) => (5,)로 나와야 한다. (그럼 두번째 축이 삭제되어야 하네?)\n\na.sum(axis=1)\n\narray([ 1,  5,  9, 13, 17])\n\n\n(문제3) a의 모든원소의 합을 계산하고 싶다면?\n(풀이) 차원이 (5,2) => () 로 나와야 한다. (첫번째축, 두번째축이 모두 삭제되어야 하네?)\n\na.sum(axis=(0,1))\n\n45\n\n\n\na.sum() # 즉 a.sum(axis=(0,1))이 디폴트값임 \n\n45\n\n\n\n\nmean, std, max, min, prod\n- 모두 sum이랑 유사한 논리\n\na=np.array(range(10)).reshape(5,2)\na\n\narray([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7],\n       [8, 9]])\n\n\n\na.mean(axis=0), a.std(axis=0), a.max(axis=0), a.min(axis=0), a.prod(axis=0)\n\n(array([4., 5.]),\n array([2.82842712, 2.82842712]),\n array([8, 9]),\n array([0, 1]),\n array([  0, 945]))\n\n\n\na.mean(axis=1), a.std(axis=1), a.max(axis=1), a.min(axis=1), a.prod(axis=1)\n\n(array([0.5, 2.5, 4.5, 6.5, 8.5]),\n array([0.5, 0.5, 0.5, 0.5, 0.5]),\n array([1, 3, 5, 7, 9]),\n array([0, 2, 4, 6, 8]),\n array([ 0,  6, 20, 42, 72]))\n\n\n- 참고로 std는 분포를 n으로 나눈다.\n\na=np.array([1,2,3,4])\na.std()\n\n1.118033988749895\n\n\n\nnp.sqrt(sum((a-a.mean())**2)/4)\n\n1.118033988749895\n\n\n- 분모를 n-1로 나눌려면?\n\na=np.array([1,2,3,4])\na.std(ddof=1)\n\n1.2909944487358056\n\n\n\nnp.sqrt(sum((a-a.mean())**2)/3)\n\n1.2909944487358056\n\n\n\n\nargmax, argmin\n- 1차원\n\na= np.array([1,-2,3,10,4])\na\n\narray([ 1, -2,  3, 10,  4])\n\n\n\na.argmax() # 가장 큰 값이 위치한 원소의 인덱스를 리턴 \n\n3\n\n\n\na.argmin() # 가장 작은 값이 위치한 원소의 인덱스를 리턴 \n\n1\n\n\n- 2차원\n\nnp.random.seed(43052)\na=np.random.randn(4*5).reshape(4,5)\na\n\narray([[ 0.38342049,  1.0841745 ,  1.14277825,  0.30789368,  0.23778744],\n       [ 0.35595116, -1.66307542, -1.38277318, -1.92684484, -1.4862163 ],\n       [ 0.00692519, -0.03488725, -0.34357323,  0.70895648, -1.55100608],\n       [ 1.34565583, -0.05654272, -0.83017342, -1.46395159, -0.35459593]])\n\n\n\na.argmin(), a.min()\n\n(8, -1.9268448358915802)\n\n\n\na.argmax(), a.max()\n\n(15, 1.3456558341738827)\n\n\n\na.argmin(axis=0), a.argmin(axis=1)\n\n(array([2, 1, 1, 1, 2]), array([4, 3, 4, 3]))\n\n\n\na.argmax(axis=0), a.argmax(axis=1)\n\n(array([3, 0, 0, 2, 0]), array([2, 0, 3, 0]))\n\n\n\n\ncumsum, cumprod\n- 1차원\n\na=np.array([1,2,3,4])\na\n\narray([1, 2, 3, 4])\n\n\n\na.cumsum()\n\narray([ 1,  3,  6, 10])\n\n\n\na.cumprod()\n\narray([ 1,  2,  6, 24])\n\n\n- 2차원\n\na=np.array(range(3*4)).reshape(3,4)\na\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n\na.cumsum(axis=0), a.cumsum(axis=1)\n\n(array([[ 0,  1,  2,  3],\n        [ 4,  6,  8, 10],\n        [12, 15, 18, 21]]),\n array([[ 0,  1,  3,  6],\n        [ 4,  9, 15, 22],\n        [ 8, 17, 27, 38]]))\n\n\n\na.cumprod(axis=0), a.cumprod(axis=1)\n\n(array([[  0,   1,   2,   3],\n        [  0,   5,  12,  21],\n        [  0,  45, 120, 231]]),\n array([[   0,    0,    0,    0],\n        [   4,   20,  120,  840],\n        [   8,   72,  720, 7920]]))\n\n\n\n\ndiff\n- 1차차분\n\na=np.array([1,2,4,6,7])\na\n\narray([1, 2, 4, 6, 7])\n\n\n\nnp.diff(a)\n\narray([1, 2, 2, 1])\n\n\n- 2차차분\n\nnp.diff(np.diff(a))\n\narray([ 1,  0, -1])\n\n\n- prepend, append\n\na=np.array([1,2,4,6,7])\na\n\narray([1, 2, 4, 6, 7])\n\n\n\nnp.diff(a,prepend=100)\n#np.diff(np.array([100]+a.tolist()) )\n\narray([-99,   1,   2,   2,   1])\n\n\n\n[1,2,4,6,7] -> [100,1,2,3,4,6] -> np.diff\n\n\nnp.diff(a,append=100)\n#np.diff(np.array(a.tolist()+[100]) )\n\narray([ 1,  2,  2,  1, 93])\n\n\n(예제) a=[1,2,4,6,7]의 앞에 1을 추가하여 차분하라.\n\nnp.diff(a,prepend=a[0])\n#np.diff(a,prepend=1)\n\narray([0, 1, 2, 2, 1])\n\n\n(예제) a=[1,2,4,6,7]의 뒤에 7을 추가하여 차분하라.\n\nnp.diff(a,append=a[-1])\n#np.diff(a,append=7)\n\narray([1, 2, 2, 1, 0])\n\n\n- 2차원 array의 차분\n\na=np.arange(24).reshape(4,6)\na\n\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23]])\n\n\n\nnp.diff(a,axis=0) \n\narray([[6, 6, 6, 6, 6, 6],\n       [6, 6, 6, 6, 6, 6],\n       [6, 6, 6, 6, 6, 6]])\n\n\n\nnp.diff(a,axis=1) \n\narray([[1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1]])\n\n\n(숙제)\n\na=np.arange(24).reshape(4,6)\na\n\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23]])\n\n\n에서 axis=1 옵션으로 np.diff를 적용하여 (4,5) array를 만들고 왼쪽열에 1이 포함된 column을 추가하여 최종 결과가 아래와 같이 되도록 하라.\narray([[1, 1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1, 1]])"
  },
  {
    "objectID": "posts/2022-04-20-2021년 파이썬입문 중간고사.html",
    "href": "posts/2022-04-20-2021년 파이썬입문 중간고사.html",
    "title": "PP2023",
    "section": "",
    "text": "2021년 파이썬 입문 중간고사\n\n1 다음을 읽고 참인것을 모두 골라라. (10점)\n(ㄱ) 딕셔너리는 key와 value가 하나의 쌍으로 되어 {}로 둘러싸여 있다. \n(ㄴ) `abs(-20)`의 실행결과는 `20`이다. \n(ㄷ) `[1]+[2]`의 실행결과는 `[3]` 이다. \n(ㄹ) `(1,)`의 자료형은 tuple이다. \n(ㅁ) 자료형이 `str`이면 각 원소를 쉽게 바꿀 수 있다. \n\n\n2 아래의 실행결과 중 올바른 것은? (35점)\n\n(a)\na=1.0\nb=2\ntype(a+b)\n(ㄱ) int (ㄴ) float (ㄷ) bool  (ㄹ) complex \n(ㅁ) str (ㅂ) list  (ㅅ) tuple (ㅇ) dict \n\n\n(b)\na=1\nb=2\ntype(a==b)\n(ㄱ) int (ㄴ) float (ㄷ) bool  (ㄹ) complex \n(ㅁ) str (ㅂ) list  (ㅅ) tuple (ㅇ) dict \n\n\n(c)\na=1\nb=2\ntype(int(a==b))\n(ㄱ) int (ㄴ) float (ㄷ) bool  (ㄹ) complex \n(ㅁ) str (ㅂ) list  (ㅅ) tuple (ㅇ) dict \n\n\n(d)\ntype([1,2,3])\n(ㄱ) int (ㄴ) float (ㄷ) bool  (ㄹ) complex \n(ㅁ) str (ㅂ) list  (ㅅ) tuple (ㅇ) dict \n\n\n(e)\na=1\ntype(a)\n(ㄱ) int (ㄴ) float (ㄷ) bool  (ㄹ) complex \n(ㅁ) str (ㅂ) list  (ㅅ) tuple (ㅇ) dict \n\n\n(f)\na=(1)\ntype(a)\n(ㄱ) int (ㄴ) float (ㄷ) bool  (ㄹ) complex \n(ㅁ) str (ㅂ) list  (ㅅ) tuple (ㅇ) dict \n\n\n(g)\na=(1,)\ntype(a)\n(ㄱ) int (ㄴ) float (ㄷ) bool  (ㄹ) complex \n(ㅁ) str (ㅂ) list  (ㅅ) tuple (ㅇ) dict \n\n\n\n3 아래의 코드를 잘 읽고 물음에 답하라. (25점)\na=[1,[2],2,[1]]\n\ndef a_add(a,i,j): \n    if type(a[i])==type(a[j]): \n        rtn=a[i]+a[j]\n    else:\n        rtn=a[i],a[j]\n    return rtn\n\n(a) 아래의 출력결과 중 바른 것은?\na[0]==a[2]\n(ㄱ) True (ㄴ) False\n\n\n(b) 아래의 출력결과 중 바른 것은?\ntype(a[0])==type(a[2])\n(ㄱ) True (ㄴ) False\n\n\n(c) 아래의 출력결과를 쓰라.\na_add(a,0,2)\n\n\n(d) 아래의 출력결과를 쓰라.\na_add(a,1,3)\n\n\n(e) 아래의 출력결과중 적절한 것은?\ntype(a_add(a,0,1))\n(ㄱ) int (ㄴ) float (ㄷ) bool  (ㄹ) complex \n(ㅁ) str (ㅂ) list  (ㅅ) tuple (ㅇ) dict \n\n\n\n4 원주율을 출력하는 방법 중 올바른 것을 모두 고르시오 (10점)\n(ㄱ) \nimport math\nmath.pi\n\n(ㄴ) \nimport math\npi \n\n(ㄷ)\nfrom math import pi\npi\n\n(ㄹ)\nfrom math import *\npi\n\n\n5 아래의 에러메시지가 나오는 (잘못된) 코드는? (10점)\n\n(a)\nTypeError: object of type 'float' has no len()\n(ㄱ) len(3.14) \n(ㄴ) len([3.14]) \n(ㄷ) len((3.14,)) \n(ㄹ) len('3.14') \n\n\n(b) (a)의 에러가 나오는 이유에 대하여 설명하라.\n\n\n\n6 아래와 같이 a를 선언하였다고 하자. (ㄱ)-(ㄹ) 중 옳은 설명을 모두 골라라. (10점)\na='guebin'\n(ㄱ) a의 자료형은 str이다. 즉 type(a)의 출력결과는 str이다. \n(ㄴ) len(a)의 실행결과는 1이다. \n(ㄷ) a[0]='G'와 같은 방법으로 첫글자를 대문자로 바꿀 수 있다. \n(ㄹ) a*2의 실행결과는 'guebinguebin'이다. \n\n\n7 [예제코드]의 결과를 관찰하고 물음에 답하라. (10점)\n## 예제코드 ## \na=['G','u','e','b','i','n']\ndel a[0]\na\n## 실행결과 \n['u', 'e', 'b', 'i', 'n']\n\n(a) 아래코드의 출력결과를 쓰라.\na=['G','u','e','b','i','n']\ndel a[0]\ndel a[0]\n\n\n(b) 아래코드의 출력결과 중 올바른 것은?\nb=['1','2','3']\ndel b[-1]\nb\n(ㄱ) ['1', '2']\n(ㄴ) ['2', '3']\n(ㄷ) ['1', '3']\n(ㄹ) 에러메시지로 출력할 수 없음. \n\n\n\n8 다음을 읽고 물음에 답하라. (15점)\n\n(a) 아래는 .append에 대한 사용예시이다.\n### .append 예시 \na=[1,2]\na.append(3)\nprint(a)\n### 실행결과 \n[1, 2, 3]\n\n\n위의 코드를 참고하여 아래의 실행결과를 쓰라.\nx=[]\nfor i in [0,1,2,3,4,5]:\n    x.append(2**i)\nx\n\n\n(b) 리스트 컴프리헨션을 사용하여 (a)와 동일한 출력결과를 얻는 코드를 작성하라.\n\n\n(c) 리스트 컴프리헨션을 사용하여 아래의 출력결과를 얻는 코드를 작성하라.\n['X1','X2','X3','Y1','Y2','Y3']\n\n\n\n9 a,b에 저장된 두 값을 교환하고 싶다고 하자. 아래의 ???에 알맞은 내용을 적으시오. (10점)\na=10\nb=20\n???\na,b\n## 실행결과\n(20, 10)\n\n\n10 아래의 코드에 대한 출력결과를 쓰라. (10점)\nidlist=[('guebin', '202112345','M','Korea'), \n        ('iu', '202154321','F','Korea'), \n        ('hodong', '201812321','M','Korea')]\nfor name, _, _, _ in idlist: \n    print(name)        \n\n\n11 리스트를 활용하여 아래와 같은 배열을 만들었다고 하자. (15점)\na=[[11,12,13], \n   [21,22,23], \n   [31,32,33]]\n\n(a) 아래코드의 시행결과를 쓰라.\na[0][1]+a[1][2]\n\n\n(b) 아래코드의 시행결과를 쓰라.\na[0]+a[1]\n\n\n(c) 아래코드의 시행결과를 쓰라.\nimport numpy as np\na=np.array(a)\na[0]+a[1]\n\n\n\n12 아래와 같은 연립방정식을 만족하는 해 \\((w,x,y,z)\\)를 푸는 코드를 작성하라. (20점)\n\\(\\begin{cases} x+y+z=3 \\\\ w+y+z=3 \\\\ w+x+z=3 \\\\ w+x+y=3 \\end{cases}\\)\n\n\n13 아래와 같은 행렬을 numpy를 이용하여 선언했다고 하자. (15점)\nimport numpy as np\nA=np.array([[11,12,13,14,15],\n            [21,22,23,24,25],\n            [31,32,33,34,35]])\n\n(a) 다음 코드의 실행결과로 적절한 것은?\nA[1]\n(ㄱ) array([11, 12, 13, 14, 15])\n(ㄴ) array([21, 22, 23, 24, 25])\n(ㄷ) array([11, 21, 31])\n(ㄹ) array([12, 22, 32])\n\n\n(b) 다음 코드의 실행결과로 적절한 것은?\nA[1,:]\n(ㄱ) array([11, 12, 13, 14, 15])\n(ㄴ) array([21, 22, 23, 24, 25])\n(ㄷ) array([11, 21, 31])\n(ㄹ) array([12, 22, 32])\n\n\n(c) 다음 코드의 실행결과로 적절한 것은?\nA[np.ix_([0,1],[0,1])]\n(ㄱ)\narray([[11, 12],\n       [21, 22]]) \n(ㄴ) \narray([[11, 21],\n       [12, 22]]) \n(ㄷ) \narray([11, 12, 21, 22]) \n\n(ㄹ) \narray([12, 22, 11, 12])\n\n\n\n14 적당한 과정을 통하여 아래와 같은 데이터를 얻었다고 가정하자. (20점)\nimport pandas as pd\n#...적당한과정...\ndf\n\n#hide_input\nfrom IPython.display import HTML\nHTML('<table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>age</th>\\n      <th>toeic</th>\\n      <th>gpa</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>새로이</th>\\n      <td>30.0</td>\\n      <td>600</td>\\n      <td>4.0</td>\\n    </tr>\\n    <tr>\\n      <th>이서</th>\\n      <td>20.0</td>\\n      <td>950</td>\\n      <td>4.2</td>\\n    </tr>\\n    <tr>\\n      <th>일권</th>\\n      <td>28.0</td>\\n      <td>450</td>\\n      <td>2.3</td>\\n    </tr>\\n    <tr>\\n      <th>현이</th>\\n      <td>28.0</td>\\n      <td>650</td>\\n      <td>3.8</td>\\n    </tr>\\n  </tbody>\\n</table>')\n\n\n\n  \n    \n      \n      age\n      toeic\n      gpa\n    \n  \n  \n    \n      새로이\n      30.0\n      600\n      4.0\n    \n    \n      이서\n      20.0\n      950\n      4.2\n    \n    \n      일권\n      28.0\n      450\n      2.3\n    \n    \n      현이\n      28.0\n      650\n      3.8\n    \n  \n\n\n\n\n(a) 첫 두열(age,toeic)에 접근하는 코드를 써라.\n\n\n(b) 토익점수가 800이상인 사람을 불러오는 코드를 써라.\n\n\n(c) 세번째 열(gpa)에 접근하는 코드 중 적절한 것을 모두 골라라.\n(ㄱ) \ndf.loc['gpa']\n(ㄴ) \ndf.iloc[:,2]\n(ㄷ) \ndf.iloc[:,-1]\n(ㄹ) \ndf.iloc[2]\n\n\n(d) 나이가 23보다 많고 토익점수가 635이하 학점이 3.0 이상인 사람을 불러오는 코드를 작성하라.\n\n\n\n15 아래를 보고 적절한 설명을 한 사람을 모두 고르라. (10점)\nimport vec\nvec?\nType:        module\nString form: <module 'vec' from '/home/cgb2/vec/__init__.py'>\nFile:        ~/vec/__init__.py\nDocstring:   이 패키지는 현재 길이가 2,3인 벡터의 연산만 지원하지만 추후 업데이트하여 더욱 발전할 예정\n(로이) import vec이 실행되는 것을 보니 (1) 사용자가 vec이라는 패키지를 설치했거나 (2) 사용자가 현재 작업중인 폴더에 vec.py파일을 만들었거나 (3) 사용자가 현재 작업중인 폴더 아래 vec이라는 폴더가 존재하는 경우등 중 하나라고 볼 수 있겠군.\n(이서) 네, 그런데 vec?의 실행 결과중 File:을 확인해 보니 사용자가 작업중인 폴더아래 vec이라는 폴더가 있는것으로 판단됩니다.\n(일권) 이서가 말한대로 File:을 확인해보니 사용자가 vec폴더에 __init__.py도 만들어 놓았음을 알수 있군. __init__.py는 import vec을 수행하면 암시적으로 실행된다고 했었지?\n(현이) 그렇지, 그런데 사실 파일 이름이 꼭 __init__.py이어야 하는것은 아니야.\n(수아) vec?의 실행결과 Docstring:이 있는것으로 보아 __init__.py상단에 아래와 같은 내용이 있음을 유추할 수 있어.\n'''\n이 패키지는 현재 길이가 2,3인 벡터의 연산만 지원하지만 추후 업데이트하여 더욱 발전할 예정\n'''"
  },
  {
    "objectID": "posts/2022-04-19-시험관련 안내사항.html",
    "href": "posts/2022-04-19-시험관련 안내사항.html",
    "title": "PP2023",
    "section": "",
    "text": "시험관련 안내사항\n\n시험유형, 시험시간, 시험실 입장, 시험문제 공개방식, 제출방식, 준비물, 준비사항, 유의사항\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n시험유형\n- 오픈북: 강의노트, 본인이 정리한 노트, 인터넷 검색 가능\n- 비대면: Zoom을 활용하여 응시\n\n\n시험시간\n- 일시: LMS를 통해 공지한 날의 수업시간\n- 시험시간 중 처음 30분은 장비점검시간으로 활용함 (단, 모든 사람이 준비될 경우 30분을 기다리지 않고 시작)\n\n따라서 2시간 수업일 경우 실질적으로 문제를 풀고 답안을 제출할때 까지 쓸 수 있는 시간은 1시간30분입니다.\n\n\n\n시험실 입장\n- LMS \\(\\to\\) 강의대화 \\(\\to\\) Zoom 화상강의 바로 가기로 입장\n\n\n시험문제 공개방식\n- LMS에 주피터노트북 파일 업로드 + LMS 공지사항을 통하여 시험문제의 URL을 공개 - 주피터파일의 장점: URL보다 LMS의 주피터노트북이 더 빠르게 공개됨. - URL의 장점: 시험문제의 오류가 있을 경우 수정이후 URL에 반영됨.\n\n\n제출\n- 답안지: LMS의 레포트 메뉴를 활용하여 답안지를 제출 (종료시간 이전에 미리 제출가능)\n- 동영상: 시험시간동안 컴퓨터전체화면 녹화후 제출 - 듀얼모니터의 경우 작업표시줄이 나타나는 모니터를 녹화 - 아이패드와 동시사용시에는 아이패드도 함께 녹화\n\n\n준비물\n- 컴퓨터 및 노트북: 시험지 확인 및 문제풀이 용도\n- 핸드폰: Zoom을 통하여 주변상황을 및 컴퓨터 화면을 촬영하는 용도\n\n중간에 핸드폰 및 노트북이 꺼지지 않도록 충전기를 준비한다.\n\n- 학생증 혹은 신분증 (본인확인용도)\n\n\n시험전 준비사항\n- 시험준비시간 동안 핸드폰을 아래와 같이 배치하여 학생의 컴퓨터 화면 및 주변상황이 보이도록 함\n - 적절한 각도를 설정하기 어려운 경우 주변환경보다 컴퓨터의 화면이 잘 보이도록 설정할 것\n- 학생증을 준비하여 시험 시작 직전에 본인의 얼굴과 학생증을 함께 촬영한다. (5초간)\n\n\n유의사항\n- 줌의 대화명은 이름과 학번을 모두 적는다. (예시: 최규빈_202143052)\n\n동명이인이 있을 수 있으므로 학번을 같이 적으세요\n\n- 질문은 카카오톡 채널 혹은 줌의 채팅기능을 이용한다.\n- Zoom에서 스피커 음소거를 하지 않는다. (전체 공지사항등이 있을때 음성으로 공지함)\n- 핸드폰으로 Zoom참가 중 전화가 오면 거절하고 받지 않는다. (전화통화시 Zoom연결이 종료되므로 부정행위로 의심할 수 있음)\n\n\n기타 참고사항\n- 핸드폰과 피씨를 이용하여 줌에 동시접속할 경우 - 최규빈_202143052_핸드폰 - 최규빈_202143052_컴퓨터\n와 같이 기기를 분리하여 적는다.\n- 시험문제는 코랩으로 풀어도 무방하며 시험문제를 다운받아 개인 주피터노트북 등으로 풀어도 무방하다.\n- 답안지 제출형식은 주피터 노트북파일을 권장한다. 하지만 풀이 및 코드를 알아볼 수 있는 어떠한 형식으로 제출하여도 무방하다. (ex: txt, hwp, pdf, html..)"
  },
  {
    "objectID": "posts/2022-03-23-(4주차) 3월23일.html",
    "href": "posts/2022-03-23-(4주차) 3월23일.html",
    "title": "PP2023",
    "section": "",
    "text": "(4주차) 3월23일\n\n딕셔너리(연산, 메소드), 딕셔너리 고급, 집합(선언, 원소추가, 원소삭제, 연산, 메소드, for문)\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n강의영상\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-yIxu2t_2qaKAxWGJPeRs2M\n\n- (1/4) 딕셔너리 연산, 메소드\n- (2/4) 딕셔너리 연산, 메소드 (2)\n- (3/4) 딕셔너리 고급\n- (4/4) 집합\n\n\n딕셔너리\n\n연산\n- 하나있어요..\n\nscore = {'guebin':49, 'iu':80} \nscore \n\n{'guebin': 49, 'iu': 80}\n\n\n\n'guebin' in score\n\nTrue\n\n\n\n'iu' in score\n\nTrue\n\n\n\n'hynn' in score\n\nFalse\n\n\n- in은 사실 다른자료형도 가능했음\n(관찰1)\n\n'a' in 'guebin' \n\nFalse\n\n\n\n'b' in 'guebin' \n\nTrue\n\n\n\n'c' in 'guebin' \n\nFalse\n\n\n(관찰2)\n\ntpl = 1,2,3 \ntpl\n\n(1, 2, 3)\n\n\n\n1 in tpl\n\nTrue\n\n\n\n4 in tpl\n\nFalse\n\n\n(관찰3)\n\nscore = [['guebin',49],['iu',80],['hynn',99]] \nscore\n\n[['guebin', 49], ['iu', 80], ['hynn', 99]]\n\n\n\n['guebin',49] in score \n\nTrue\n\n\n- in연산자가 dict형에 사용되면 key를 기준으로 True, False를 판단한다.\n\n\n메소드\n(get)\n\nscore = {'guebin':49, 'iu':80} \nscore \n\n{'guebin': 49, 'iu': 80}\n\n\n\nscore.get('guebin') \n\n49\n\n\n아래와 같은 기능\n\nscore['guebin']\n\n49\n\n\n미묘한 차이점이 존재함\n\nscore['hynn'] # hynn이 없어서 키에러 출력, 그런 key는 없다.. \n\nKeyError: 'hynn'\n\n\n\nscore.get('hynn') # hynn이 없으면 아무것도 출력안함 \n\n(keys,values,items)\n- .keys()는 딕셔너리의 키를 리턴한다.\n\nscore = {'guebin':49, 'iu':80} \nscore \n\n{'guebin': 49, 'iu': 80}\n\n\n\n_keys=score.keys()\n_keys\n\ndict_keys(['guebin', 'iu'])\n\n\n\ntype(_keys) # 리턴된 자료형은 이상한것임\n\ndict_keys\n\n\n\nlist(_keys) # 아무튼 그 이상한 자료형도 리스트화 가능 \n\n['guebin', 'iu']\n\n\n- .values()는 딕셔너리의 값들을 리턴한다.\n\n_values =score.values()\n_values \n\ndict_values([49, 80])\n\n\n\ntype(_values)\n\ndict_values\n\n\n\nlist(_values)\n\n[49, 80]\n\n\n- .items()는 딕셔너리의 (키,값)을 리턴한다.\n\n_items = score.items()\n_items \n\ndict_items([('guebin', 49), ('iu', 80)])\n\n\n\ntype(_items)\n\ndict_items\n\n\n\nlist(_items)\n\n[('guebin', 49), ('iu', 80)]\n\n\n- for문에서의 dict\n(예시1)\n\nfor i in score.keys():\n    print(i)\n\nguebin\niu\n\n\n\nfor i in score:\n    print(i)\n\nguebin\niu\n\n\n\n딕셔너리 그자체도 for문에 넣을 수 있다.\ni에는 value가 삭제되어 들어간다. (즉 key만)\n결과를 보면 score대신에 score.keys()와 list(score)를 넣었을때와 결과가 같다.\n\n\nNote: list(score) 하면 key만 리턴된다.\n\n(예시2)\n\nfor i in score.values():\n    print(i)\n\n49\n80\n\n\n(예시3)\n\nfor k in score.items():\n    print(k)\n\n('guebin', 49)\n('iu', 80)\n\n\n(예시4)\n\nfor i,j in score.items():\n    print(i,j)\n\nguebin 49\niu 80\n\n\n(예시5)\n\nfor i,j in score.items():\n    print(i + '의 중간고사 점수는 %s점 입니다.' % j)\n\nguebin의 중간고사 점수는 49점 입니다.\niu의 중간고사 점수는 80점 입니다.\n\n\n[보충학습] 문자열 새치기\n\n'제 이름은 %s입니다' % '최규빈'\n\n'제 이름은 최규빈입니다'\n\n\n\n%는 새치기연산자임. %s는 새치기하는 자리라고 생각\n\n보충학습끝\n\n\n\n딕셔너리 고급\n\n키는 문자열만 가능한 것이 아니다.\n- 정수키\n\nscore = {0:49, 1:80, 2:99} # key를 0,1,2로 \nscore\n\n{0: 49, 1: 80, 2: 99}\n\n\n- 인덱싱은?\n\nscore[0] # 키로 인덱싱을 하고 있는데 마치 원소의 위치로 인덱싱을 하는 기분 \n\n49\n\n\n- 그럼 혹시 이것도?\n\nscore[:2]\n\nTypeError: unhashable type: 'slice'\n\n\n\nscore[-1] # 이것도 될리가 없죠.. \n\nKeyError: -1\n\n\n\n\n키로가능한것? 문자열, 숫자값, 튜플\n\nscore = {('guebin',0): 10, ('guebin',1): 20, ('guebin',2):49}  # 0은 출석점수, 1은 레포트 점수, 2는 중간고사 점수 \nscore\n\n{('guebin', 0): 10, ('guebin', 1): 20, ('guebin', 2): 49}\n\n\n\nscore[('guebin',0)]\n\n10\n\n\n\nscore['guebin',2]\n\n49\n\n\n\nscore[('guebin',3)] = 99 # 규빈의 기말고사 점수를 추가 \n\n\nscore\n\n{('guebin', 0): 10, ('guebin', 1): 20, ('guebin', 2): 49, ('guebin', 3): 99}\n\n\n\n문자열, 숫자값, 튜플의 공통점? 불변객체\n\n\n\n참고 (불변형과 가변형)\n(인트형은 불변)\n\na=1\na,id(a)\n\n(1, 140554269835504)\n\n\n\na=2\na,id(a)\n\n(2, 140554269835536)\n\n\n(문자열도 불변)\n\na='guebin'\na,id(a)\n\n('guebin', 140553659148336)\n\n\n\na='Guebin'\na,id(a)\n\n('Guebin', 140553649883440)\n\n\n(리스트는 가변)\n\na=list('guebin')\na,id(a)\n\n(['g', 'u', 'e', 'b', 'i', 'n'], 140553645841408)\n\n\n\na[0]='G'\n\n\na,id(a)\n\n(['G', 'u', 'e', 'b', 'i', 'n'], 140553645841408)\n\n\n\n\n\n집합\n\n선언\n\na={'notebook','desktop'}\n\n\n\n원소추출\n- 일단 인덱스로는 못합니다.\n\na={'notebook','desktop'}\na[0]\n\nTypeError: 'set' object is not subscriptable\n\n\n- 딱히 하는 방법이 없어요.. 그리고 이걸 하는 의미가 없어요.. (원소에 접근해서 뭐하려고??)\n\n\n원소추가\n- 이건 의미가 있죠\n\na={'notebook','desktop'} \na\n\n{'desktop', 'notebook'}\n\n\n\na.add('ipad')\na\n\n{'desktop', 'ipad', 'notebook'}\n\n\n\na.add('notebook') # 이미 원소로 있는건 추가되지 않음. \na\n\n{'desktop', 'ipad', 'notebook'}\n\n\n\n\n원소삭제\n\na={'desktop', 'ipad', 'notebook'}\na\n\n{'desktop', 'ipad', 'notebook'}\n\n\n\na.remove('notebook')\n\n\na\n\n{'desktop', 'ipad'}\n\n\n\n\n연산\n- in 연산자\n\na={'desktop', 'ipad', 'notebook'}\na\n\n{'desktop', 'ipad', 'notebook'}\n\n\n\n'notebook' in a\n\nTrue\n\n\n\n참고로 in연산자는 집합에서만 쓰는것은 아님\n\n- 합집합, 교집합, 차집합\n\nday1 = {'notebook','desktop'}\nday2 = {'notebook','ipad'}\n\n\nday1 | day2 # 합집합\n\n{'desktop', 'ipad', 'notebook'}\n\n\n\nday1 & day2 # 교집합\n\n{'notebook'}\n\n\n\nday1 - day2 # 차집합 \n\n{'desktop'}\n\n\n\nday2 - day1 # 차집합\n\n{'ipad'}\n\n\n- 부분집합\n\nday1 = {'notebook', 'desktop'}\nday2 = day1 | {'ipad'} \n\n\nday1 < day2  # day1는 day2의 부분집합인가? \n\nTrue\n\n\n\nday2 < day1\n\nFalse\n\n\n\n\n메소드\n- 합집합\n\nday1 = {'notebook', 'desktop'}\nday2 = {'notebook','ipad'}\n\n\nday1.union(day2)\n\n{'desktop', 'ipad', 'notebook'}\n\n\n- 나머지 메소드는 스스로 찾아보세요\n\n\nfor문\n\nday1 = {'notebook', 'desktop'}\nday2 = {'notebook','ipad'}\n\n\nfor i in day1|day2: \n    print(i)\n\nipad\nnotebook\ndesktop\n\n\n\n\n\n숙제\n길이가 4인 집합을 두개만들고 공통원소를 2개로 설정한뒤 합집합을 구하는 코드를 작성하라."
  },
  {
    "objectID": "posts/2022-03-07-(1주차) 3월7일.html",
    "href": "posts/2022-03-07-(1주차) 3월7일.html",
    "title": "PP2023",
    "section": "",
    "text": "(1주차) 3월7일\n\n아나콘다 및 파이썬 설치, int, float, bool, str 자료형\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n강의영상\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-wFKruLoWOsdP2kfQA6hmaq\n\n- (1/8) 아나콘다 설치, 가상환경 생성\n- (2/8) 주피터랩 설치 및 실행 (1)\n- (3/8) 주피터랩 설치 및 실행 (2)\n- (4/8) 0차원자료형: int, float, bool, 명시적형변환\n- (5/8) 0차원자료형: 암묵적형변환\n- (6/8) string (1)\n- (7/8) string (2)\n- (8/8) 숙제설명, 코랩설명\n- appendix: 윈도우에 영어계정만들기\n\n\n파이썬 교재\n- 전자교재\n\nhttps://docs.python.org/3.9/tutorial/index.html\nhttps://wikidocs.net/book/1\nhttps://jakevdp.github.io/PythonDataScienceHandbook/\n\n- 종이책 - 효율적 개발로 이끄는 파이썬 실천 기술 - Learning python: powerful object-oriented programming - 전문가를 위한 파이썬 : 파이썬3 버전 기준 | 간단하고, 명료하고, 효율적인 파이썬 프로그래밍\n\n\n주피터노트북, 주피터랩\n- interactive notebook이 아니다.\n\na=3\na\n\n3\n\n\n\nb=3\nb\n\n3\n\n\n\na+b\n\n5\n\n\n- 주피터랩: 주피터노트북의 확장버전 - 저는 주피터랩을 더 선호합니다. - 그런데 주피터노트북을 쓸 경우도 있음.\n- 마크다운모드(글쓰기모드), 코드모드(프로그래밍모드)\n\n\n자료형\n- 파이썬의 기본자료형은 int, float, bool, str, list, tuple, dict, set 등이 있다. - 0차원 자료형: int, float, bool - 1차원 자료형: str, list, tuple, dict, set\n\nint, float, bool\n- int형\n\na=100\n\n\ntype(a)\n\nint\n\n\n- float형\n\na=1.2*3 \na\n\n3.5999999999999996\n\n\n\ntype(a)\n\nfloat\n\n\n\na?\n\n\nType:        float\nString form: 3.5999999999999996\nDocstring:   Convert a string or number to a floating point number, if possible.\n\n\n\n\n- bool형\n\na=True ## 숫자1으로 생각할 수 있음 \nb=False ## 숫자0으로 생각할 수 있음\n\n\ntype(a)\n\nbool\n\n\n\ntype(b)\n\nbool\n\n\n\na?\n\n\nType:        bool\nString form: True\nDocstring:  \nbool(x) -> bool\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.\n\n\n\n\n\nb?\n\n\nType:        bool\nString form: False\nDocstring:  \nbool(x) -> bool\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.\n\n\n\n\n- bool형의 연산\n\na=True ## 1\nb=False ## 0 \n\n\na+b\n\n1\n\n\n\na*b \n\n0\n\n\n- complex형\n\na=1+2j\nb=2-2j\n\n\ntype(a)\n\ncomplex\n\n\n\ntype(b)\n\ncomplex\n\n\n\na?\n\n\nType:        complex\nString form: (1+2j)\nDocstring:  \nCreate a complex number from a real part and an optional imaginary part.\nThis is equivalent to (real + imag*1j) where imag defaults to 0.\n\n\n\n\n\nb?\n\n\nType:        complex\nString form: (2-2j)\nDocstring:  \nCreate a complex number from a real part and an optional imaginary part.\nThis is equivalent to (real + imag*1j) where imag defaults to 0.\n\n\n\n\n\nc=a+b\n\n\nc\n\n(3+0j)\n\n\n- 형태변환: float \\(\\to\\) int\n(예시1)\n\na=3.0\ntype(a)\n\nfloat\n\n\n\na=int(a)\n\n\ntype(a)\n\nint\n\n\n(예시2) 이경우는 정보의 손실이 발생\n\na=3.14 \nint(a)\n\n3\n\n\n- 형태변환: int \\(\\to\\) float\n\na=3\ntype(a)\n\nint\n\n\n\na=float(a)\ntype(a)\n\nfloat\n\n\n- 형태변환: bool \\(\\to\\) int/float, int/float \\(\\to\\) bool\n(예시1)\n\na=True\ntype(a)\n\nbool\n\n\n\nint(a)\n\n1\n\n\n\nfloat(a)\n\n1.0\n\n\n(예시2)\n\na=1 \nbool(a)\n\nTrue\n\n\n\na=0\nbool(a)\n\nFalse\n\n\n(예시3)\n\na=1.0\nbool(a)\n\nTrue\n\n\n\na=0.0\nbool(a)\n\nFalse\n\n\n- 이상한 형태변환도 가능하다. (이런것도 바꿔주나 싶은것도 바꿔줌)\n\nbool(-3.14)\n\nTrue\n\n\n\n저는 이런 코드를 의도적으로 사용하지 않아요..\n\n\nint(3.14)\n\n3\n\n\n- 형태변환이 항상가능한것도 아님\n\nfloat(3+0j) # 사실상 3+0j=3 이므로 float으로 형변환하면 3.0이 되어야 할 것 같은데 변환불가능하다. \n\nTypeError: can't convert complex to float\n\n\n- 암묵적형변환 (implicit)\n(예비학습) implicit의 의미 - 추운날씨 -> 보일러좀 틀자! (explicit) / 오늘 날씨 좀 추운 것 같지 않아? (implicit) - 짜장면 먹을래? -> 싫어! (explicit) / 난 어제 짜장면 먹었는데.. (implicit)\n(예제)\n\nTrue * 1 # 1을 곱할건데 너 계속 True로 있을꺼야? \n\n1\n\n\n\n1 * 1.0 # 1.0을 곱할건데 너 계속 int로 있을꺼야? \n\n1.0\n\n\n\nTrue+True # +연산을 할건데 계속 True로 있을꺼야? \n\n2\n\n\n\n\n\nstr\n- 선언\n\na='guebin'\n\n\na\n\n'guebin'\n\n\n\n연산\n- 더하기(+)연산\n\na='X'\nb='2'\n\n\nc=a+b\nc\n\n'X2'\n\n\n- 빼기(-)연산\n\na='X2'\nb='2'\na-b\n\nTypeError: unsupported operand type(s) for -: 'str' and 'str'\n\n\n\n이런건 없다.\n\n- 곱하기(*)연산\n\na='X'\n\n\na+a+a\n\n'XXX'\n\n\n\na*3 # a*3 = a+a+a = 'X'+'X+'X'\n\n'XXX'\n\n\n아래도 가능하다.\n\n3*a\n\n'XXX'\n\n\n그리고 아래도 가능하다.\n\na='X'\nb=3 \na*b\n\n'XXX'\n\n\n대신에 의미상 맞지 않는 것은 수행되지 않고 에러가 난다.\n\na='X'\nb='Y'\na+b\n\n'XY'\n\n\n\na*b\n\nTypeError: can't multiply sequence by non-int of type 'str'\n\n\n- 나눗셈(/)연산\n\na='XX'\n\n\na/2\n\nTypeError: unsupported operand type(s) for /: 'str' and 'int'\n\n\n\n이런건 없다..\n\n\n\n인덱싱\n- str은 하나의 벡터 문자가 여러개 있는 형태라고 생각하면 된다.\n\na='guebin'\n\n\na\n\n'guebin'\n\n\n\n6개의 칸에 글씨가 하나씩 들어가 있음.\n\n- 대괄호 []안에 숫자를 넣는 방식으로 벡터의 원소를 호출할 수 있다. (주의: 인덱스가 0부터 시작함)\n\na[0] #첫번째원소\n\n'g'\n\n\n\na[1] #두번째원소 \n\n'u'\n\n\n마지막원소는 -1로 호출할 수도 있다.\n\na[-1]\n\n'n'\n\n\n마지막에서 2번째 원소는 -2로 호출가능하다.\n\na[-2]\n\n'i'\n\n\n- 요약하면 아래와 같은 방식으로 호출가능함.\n\n\n\ng\nu\ne\nb\ni\nn\n\n\n\n\n0\n1\n2\n3\n4\n5\n\n\n0\n-5\n-4\n-3\n-2\n-1\n\n\n\n\na[4]\n\n'i'\n\n\n\na[-2]\n\n'i'\n\n\n\na[-4]\n\n'e'\n\n\n- :을 이용하여 여러개의 원소를 호출할 수 있음.\n\na='guebin'\n\n\na[0:3] # a[0],a[1],a[2],a[3]이 아니라 a[0],a[1],a[2]까지만 뽑힌다. 즉 마지막의 3은 호출되지 않는다. \n\n'gue'\n\n\n\na[1:3] # a[1], a[2] 만 호출 // start=1,  stop=3 \n\n'ue'\n\n\nindex=1부터 시작해서 마지막원소까지 호출하려면?\n\na[5] # guebin의 마지막원소 'n'이 출려 \n\n'n'\n\n\n\na[1:5] # 5는 포함되지 않으므로 틀림\n\n'uebi'\n\n\n\na[1:6] # 정답\n\n'uebin'\n\n\n안 헷갈리는 방법은 없을까?\n\na[-1]\n\n'n'\n\n\n\na[1:-1] # 이것은 결국 (a[1:5]와 같은 것임) \n\n'uebi'\n\n\n해결책? 생략한다!!\n\na[1:]\n\n'uebin'\n\n\n- 생략의 응용1\n\na='k-pop' \na\n\n'k-pop'\n\n\n\na[2:5]\n\n'pop'\n\n\n\na[2:]\n\n'pop'\n\n\n- 생략의 응용2\n\na='k-pop'\na\n\n'k-pop'\n\n\n\na[0:2] # a[0],a[1]\n\n'k-'\n\n\n\na[:2] # a[0],a[1] \n\n'k-'\n\n\n- 생략의 응용3\n\na='k-pop'\na\n\n'k-pop'\n\n\n\na[0:5] # a[0],...,a[4]\n\n'k-pop'\n\n\n\na[:]\n\n'k-pop'\n\n\n\n\nstr 특수기능\n- 파이썬의 변수는 단순히 정보를 담는 그릇이 아니다. 유용한 기능을 제공하는 경우가 있다.\n\na='ABCD' # a라는 변수는 'ABCD'라는 정보를 담는 그릇의 역할만 하지 않고, 특화된 어떠한 기능도 제공한다. \na\n\n'ABCD'\n\n\n\na.lower() # a.lower()를 쓰면 a의 모든 문자를 소문자로 바꾸는 기능을 제공, lower(a)라고 읽자!\n\n'abcd'\n\n\n여기에서 lower()는 문자열에 특화된 기능임. 따라서 당연히 아래는 불가능\n\na=3.14\na.lower() # lower(a)\n\nAttributeError: 'float' object has no attribute 'lower'\n\n\n- 자료형에 특화된 기능(=함수)을 확인하는 방법? a.+ tab 으로 목록 확인 가능\n\na='guebin'\n\n\na.upper?\n\n\nSignature: a.upper()\nDocstring: Return a copy of the string converted to uppercase.\nType:      builtin_function_or_method\n\n\n\n\n\na.upper() # upper(a) \n\n'GUEBIN'\n\n\n\na.capitalize() # capitalize(a) \n\n'Guebin'\n\n\n- 문자열에 대한 다른 내용들은 추후에 다루겠음.\n- 마음의눈: a.f() 형태를 읽는 팁 - a.f()는 f(a)로 생각하면 편리함. - a.f(2)는 f(a,2)로 생각하면 편리함. - 이런점에서 R %>% 연산자와 비슷하다고 생각할 수 있다. (약간 다르긴함)\n- 사실 .은 좀 더 다양한 상황에서 쓰일 수 있다. 변수이름.함수이름() 의 형태가 아니라 - 패지키이름.함수이름() - 패키지이름.변수이름 - 패키지이름.패키지이름.함수이름() - …\n와 같이 다양한 형태가 가능하다. 근본적인 공통점은 .을 기준으로 상위개념.하위개념 으로 이해하는 것이 좋다.\n\n\n0차원 vs 1차원\n- len함수 소개: 원소의 갯수를 알려주는 함수.\n(0차원) len 함수가 동작하지 않음.\n\na=3.14\n\n\nlen(a)\n\nTypeError: object of type 'float' has no len()\n\n\n\nb=True\n\n\nlen(b)\n\nTypeError: object of type 'bool' has no len()\n\n\n(1차원) len 함수가 잘 동작함.\n\na='3.14'\nlen(a)\n\n4\n\n\n\nb=[1,2,3]\n\n\nlen(b)\n\n3\n\n\n\n\n\n숙제\n본인이름으로 str을 생성 \\(\\to\\) LMS에 스크린샷제출 - 성만 출력 - 이름만 출려\n(예시)\n\na='GuebinChoi'\n\n\na[:6]\n\n'Guebin'\n\n\n\na[6:]\n\n'Choi'"
  },
  {
    "objectID": "posts/2022-06-13-2022년 파이썬입문 기말고사.html",
    "href": "posts/2022-06-13-2022년 파이썬입문 기말고사.html",
    "title": "PP2023",
    "section": "",
    "text": "branch: master\nbadges: true\nauthor: 최규빈\n\n\n\n아래코드를 이용하여 numpy, matplotlib, pandas를 import하라.\n\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport pandas as pd\nfrom IPython.display import HTML\n\n\n\n\n(1) 도함수를 구하는 함수 derivate를 선언하라. 이 함수를 이용하여 \\(f(x)=x^2\\)의 그래프와 \\(f'(x)=2x\\)의 그래프를 \\(x \\in (-1,1)\\)의 범위에서 그려라.\n(2) 적당한 클래스 정의하여 인스턴스 a를 만들고 print(a)의 출력결과가 본인의 학번이 나오도록 하라.\n## 코드예시\nclass Klass:\n    ???\n    ???\na=Klass()\nprint(a)\n## 출력결과\n2022-43052\n(3) for문이 실행될때마다 [묵,찌,빠] 중에 하나를 내며 빠를 누적 3회 낼경우 for문이 멈추는 이터레이터를 생성하라.\n(4)-(6)\n\nclass GS25: \n    n=0 \n    total_number_of_guests = 0 \n    def __init__(self):\n        self.number_of_guests = 0 \n\n(4) 위의 클래스를 수정하여 아래와 같이 GS25에서 새로운 인스턴스가 생성될때마다\nGS25의 점포수가 ?개로 늘었습니다.\n라는 메시지가 출력되도록 하라.\n(5) 함수 come를 인스턴스 메소드로 정의하라. 이 메소드가 실행될때마다 각 점포의 손님 인스턴스 변수 number_of_guests와 클래스변수 total_number_of_guests를 1씩 증가시키고 아래의 메시지를 출력하라.\n새로운 손님이 오셨습니다!\nGS25를 방문한 총 손님수는 n명입니다. \n현재 GS25 점포를 방문한 손님수는 m명입니다. \n(6) 새로운 클래스메서드 show를 만들고 아래와 같은 메시지를 출력하도록 하라.\nGS25의 점포수: ??\nGS25를 방문한 총 손님수: ??\n(사용예시) (4)-(6)을 모두 적용한 경우 사용예시는 아래와 같다.\n\na=GS25() ## (4)의 사용예시\n\nGS25의 점포수가 1개로 늘었습니다.\n\n\n\nb=GS25() ## (4)의 사용예시\n\nGS25의 점포수가 2개로 늘었습니다.\n\n\n\na.come() ## (5)의 사용예시\n\n새로운 손님이 오셨습니다!\nGS25를 방문한 모든 손님수는 1명입니다.\n현재 GS25 점포를 방문한 손님수는 1명입니다. \n\n\n\na.come() ## (5)의 사용예시\n\n새로운 손님이 오셨습니다!\nGS25를 방문한 모든 손님수는 2명입니다.\n현재 GS25 점포를 방문한 손님수는 2명입니다. \n\n\n\nb.come() ## (5)의 사용예시\n\n새로운 손님이 오셨습니다!\nGS25를 방문한 모든 손님수는 3명입니다.\n현재 GS25 점포를 방문한 손님수는 1명입니다. \n\n\n\nGS25.show() ## (6)의 사용예시\n\nGS25의 점포수: 2\nGS25를 방문한 총 손님수: 3\n\n\n(7) __eq__는 연산 == 를 재정의하는 메소드이다. 클래스 RPS_BASE를 상속하여 새로운 클래스 RPS5를 만들라. 연산 ==를 재정의하여 RPS5의 두 인스턴스의 action이 같은 경우 true를 리턴하는 기능을 구현하라.\n\nclass RPS_BASE:\n    def __init__(self):\n        self.action = np.random.choice(['가위','바위','보'])\n\nhint: Appendix를 참고할 것\nhint: RPS5의 선언부분은 아래와 같은 형태를 가지고 있다.\nclass RPS5(???):\n    def __eq__(self,other):\n        return ??????\nhint: RPS5클래스의 사용예시는 아래와 같다.\n\na=RPS5()\na.action\n\n'바위'\n\n\n\nb=RPS5()\nb.action\n\n'보'\n\n\n\na==b\n\nFalse\n\n\n(8) __gt__는 연산 > 를 재정의하는 메소드이다. 클래스 RPS_BASE를 상속하여 새로운 클래스 RPS6를 만들라. 연산 >를 재정의하여 RPS6의 두 인스턴스 a,b의 action이 각각 (‘가위’,‘보’), (‘바위’,‘가위’), (‘보’,‘바위’) 인 경우 true를 리턴하는 기능을 구현하라.\nhint: Appendix를 참고할 것\nhint: RPS6클래스의 사용예시는 아래와 같다.\n\na=RPS6()\na.action\n\n'바위'\n\n\n\nb=RPS6()\nb.action\n\n'보'\n\n\n\na>b, a<b\n\n(False, True)\n\n\n(9)-(10)\n아래와 같은 데이터프레임을 선언하고 물음에 답하라.\n\nnp.random.seed(43052)\ndf=pd.DataFrame({'type':np.random.choice(['A','B'],100), 'score':np.random.randint(40,95,100)})\ndf\n\n\n\n\n\n  \n    \n      \n      type\n      score\n    \n  \n  \n    \n      0\n      B\n      45\n    \n    \n      1\n      A\n      40\n    \n    \n      2\n      B\n      79\n    \n    \n      3\n      B\n      46\n    \n    \n      4\n      B\n      57\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      95\n      B\n      69\n    \n    \n      96\n      A\n      71\n    \n    \n      97\n      A\n      93\n    \n    \n      98\n      A\n      63\n    \n    \n      99\n      A\n      82\n    \n  \n\n100 rows × 2 columns\n\n\n\n(9) type==’A’의 평균score를 구하는 코드를 작성하라.\n(10) type==’A’의 평균score보다 같거나 큰 값을 가지는 행을 출력하라.\n\n\n\n(1) 플레이어A는 (가위,가위) 중 하나를 선택할 수 있고 플레이어B는 (가위,바위) 중 하나를 선택할 수 있다. 각 플레이어는 각 패 중 하나를 랜덤으로 선택하는 액션을 한다고 가정하자. 아래에 해당하는 확률을 시뮬레이션을 이용하여 추정하라.\n\n플레이어A가 승리할 확률:\n플레이어B가 승리할 확률:\n플레이어A와 플레이어B가 비길 확률:\n\nhint: 50% 확률로 b가 승리하고 50% 확률로 비긴다.\n(2) 문제 (1)과 같이 아래의 상황을 가정하자.\n\n\n\n\n플레이어A\n플레이어B\n\n\n\n\n각 플레이어가 낼 수 있는 패 (candidate)\n(가위,가위)\n(가위,바위)\n\n\n각 패를 선택할 확률 (prob)\n(0.5,0.5)\n(0.5,0.5)\n\n\n\n각 플레이어는 아래와 같은 규칙으로 가위바위보 결과에 따른 보상점수를 적립한다고 하자. - 승리: 보상점수 2점 적립 - 무승부: 보상점수 1점 적립 - 패배: 보상점수 0점 적립\n100번째 대결까지 시뮬레이션을 시행하고 플레이어B가 가위를 낼 경우 얻은 보상점수의 총합과 바위를 낼 경우 얻은 보상점수의 총합을 각각 구하라. 플레이어B는 가위를 내는것이 유리한가? 바위를 내는것이 유리한가?\nhint: 플레이어B는 바위를 내는 것이 유리하다.\nhint: 플레이어B가 100번중에 49번 가위를 내고 51번 바위를 낸다면 플레이어B가 적립할 보상점수는 각각 아래와 같다. - 가위를 내었을 경우: 49 * 1 = 49점 - 바위를 내었을 경우: 51 * 2 = 102점 - 총 보상점수 = 49점 + 102점 = 151점\n(3) (2)에서 얻은 데이터를 학습하여 플레이어B가 “가위” 혹은 “바위” 를 선택할 확률을 매시점 조금씩 조정한다고 가정하자. 구체적으로는 현재시점까지 얻은 보상점수의 비율로 확률을 결정한다. 예를들어 플레이어B가 100회의 대결동안 누적한 보상점수의 총합이 아래와 같다고 하자.\n\n가위를 내었을 경우 보상점수 총합 = 50점\n바위를 내었을 경우 보상점수 총합 = 100점\n\n그렇다면 플레이어B는 각각 (50/150,100/150) 의 확률로 (가위,바위) 중 하나를 선택한다. 101번째 대결에 플레이어B가 가위를 내서 비겼다면 이후에는 (51/151,100/151) 의 확률로 (가위,바위) 중 하나를 선택한다. 102번째 대결에 플레이어B가 바위를 내서 이겼다면 이후에는 각각 (51/153,102/153) 의 확률로 (가위,바위) 중 하나를 선택한다. 이러한 상황을 요약하여 표로 정리하면 아래와 같다.\n\n\n\n\n\n\n\n\n\n시점\n플레이어B가 가위를 냈을 경우 얻은 점수 총합\n플레이어B가 바위를 냈을 경우 얻은 점수 총합\nt+1시점에서 플레이어B가 (가위,바위)를 낼 확률\n\n\n\n\nt=100\n50\n100\n(50/150, 100/150)\n\n\nt=101\n51\n100\n(51/151, 100/151)\n\n\nt=102\n51\n102\n(51/153, 102/153)\n\n\n\n이러한 방식으로 500회까지 게임을 진행하며 확률을 수정하였을 경우 501번째 대결에서 플레이어B가 (가위,바위)를 낼 확률은 각각 얼마인가?\nhint: 시간이 지날수록 플레이어B는 (가위,바위)중 바위를 내는 쪽이 유리하다는 것을 알게 될 것이다.\n\n앞으로 아래와 같은 용어를 사용한다. - (정의) 어떠한 플레이어가 양손 중 하나를 선택하는 확률을 데이터를 바탕으로 매 순간 업데이트 한다면 그 플레이어는 “학습모드 상태이다”고 표현한다. - (정의) 반대로 어떠한 플레이어가 양손 중 하나를 항상 동일한 확률로 낸다면 그 플레이어는 “학습모드 상태가 아니다”라고 표현한다.\n\n(4) 새로운 두명의 플레이어C와 플레이어D를 만들어라. 두 플레이어는 모두 동일하게 (가위,바위) 중 하나를 선택할 수 있다. 두 명의 플레이어는 100번째 대결까지는 두 가지 패중 하나를 랜덤하게 선택하고 101번째 대결부터 500번째 대결까지는 문제(3)의 플레이어B와 같은 방식으로 확률을 업데이트 하여 두 가지 패를 서로 다른 확률로 낸다고 하자. 즉 100번째 대결까지는 두 플레이어가 모두 학습모드 상태가 아니고 101번째부터 500번째 대결까지는 두 플레이어가 모두 학습모드 상태이다. 500번째 대결까지의 학습이 끝났을 경우 플레이어 C와 플레이어D가 각 패를 낼 확률은 각각 얼마인가?\n\n\n\n\n\n\n\n\n\n시점\n플레이어C가 (가위,바위)를 낼 확률\n플레이어D가 (가위,바위)를 낼 확률\n비고\n\n\n\n\nt <= 100\n(1/2, 1/2)\n(1/2, 1/2)\n양쪽 플레이어 모두 학습모드가 아님\n\n\nt <= 500\n대결 데이터를 학습하여 수정한 확률\n대결 데이터를 학습하여 수정한 확률\n양쪽 플레이어 모두 학습모드임\n\n\n\nhint: 시간이 지날수록 두 플레이어 모두 바위를 내는 쪽이 유리하다는 것을 알게 될 것이다.\n(5) 새로운 플레이어 E와 F를 생각하자. 플레이어E와 플레이어F는 각각 (가위,바위) 그리고 (가위,보) 중 하나를 선택할 수 있다고 가정하자. 시뮬레이션 대결결과를 이용하여 아래의 확률을 근사적으로 추정하라.\n\n플레이어E가 승리할 확률:\n플레이어F가 승리할 확률:\n플레이어E와 플레이어F가 비길 확률:\n\nhint: 플레이어E가 가위를 낸다면 최소한 지지는 않기 때문에 플레이어E가 좀 더 유리한 패를 가지고 있다. 따라서 플레이어E의 결과가 더 좋을 것이다.\n(6) (5)와 동일한 두 명의 플레이어E, F를 생각하자. 두 플레이어는 100회까지는 랜덤으로 자신의 패를 선택한다. 그리고 101회부터 500회까지는 플레이어F만 데이터로 부터 학습을 하여 수정된 확률을 사용한다. 500번의 대결이 끝나고 플레이어F가 (가위,보)를 선택하는 확률이 어떻게 업데이트 되어있는가?\n\n\n\n\n\n\n\n\n\n시점\n플레이어E가 (가위,바위)를 낼 확률\n플레이어F가 (가위,보)를 낼 확률\n비고\n\n\n\n\nt <= 100\n(1/2, 1/2)\n(1/2, 1/2)\n양쪽 플레이어 모두 학습모드가 아님\n\n\nt <= 500\n(1/2, 1/2)\n데이터를 학습하여 수정한 확률\n플레이어E는 학습모드아님 / 플레이어F는 학습모드\n\n\n\nhint: 플레이어F는 보를 내는 것이 낫다고 생각할 것이다. (가위를 내면 지거나 비기지만 보를 내면 지거나 이긴다.)\n(7) (6)번의 플레이어E와 플레이어F가 500회~1000회까지 추가로 게임을 한다. 이번에는 플레이어E만 데이터로부터 학습한다. 1000회까지 대결을 끝낸 이후 플레이어E가 (가위,바위)를 내는 확률은 어떻게 업데이트 되었는가?\n\n\n\n\n\n\n\n\n\n시점\n플레이어E가 (가위,바위)를 낼 확률\n플레이어F가 (가위,보)를 낼 확률\n비고\n\n\n\n\nt <= 100\n(1/2, 1/2)\n(1/2, 1/2)\n양쪽 플레이어 모두 학습모드가 아님\n\n\nt <= 500\n(1/2, 1/2)\n데이터를 학습하여 수정한 확률\n플레이어E는 학습모드아님 / 플레이어F는 학습모드\n\n\nt <= 1000\n데이터를 학습하여 수정한 확률\nt=500시점에 업데이트된 확률\n플레이어E는 학습모드 / 플레이어F는 학습모드아님\n\n\n\nhint: 플레이어F는 보를 내도록 학습되어 있다. 따라서 플레이어E가 바위를 내면 지고 가위를 내면 이길것이다. 따라서 플레이어E는 가위가 유리하다고 생각할 것이다.\n(8) (7)번의 플레이어E와 플레이어F가 1000회~30000회까지 추가로 게임을 한다. 이번에는 플레이어F만 데이터로부터 학습한다. 30000회까지 대결을 끝낸 이후 플레이어F가 (가위,보)를 내는 확률은 어떻게 업데이트 되었는가?\n\n\n\n\n\n\n\n\n\n시점\n플레이어E가 (가위,바위)를 낼 확률\n플레이어F가 (가위,보)를 낼 확률\n비고\n\n\n\n\nt <= 100\n(1/2, 1/2)\n(1/2, 1/2)\n양쪽 플레이어 모두 학습모드가 아님\n\n\nt <= 500\n(1/2, 1/2)\n데이터를 학습하여 수정한 확률\n플레이어E는 학습모드아님 / 플레이어F는 학습모드\n\n\nt <= 1000\n데이터를 학습하여 수정한 확률\nt=500시점에 업데이트된 확률\n플레이어E는 학습모드 / 플레이어F는 학습모드아님\n\n\nt <= 30000\nt=1000시점에 업데이트된 확률\n데이터를 학습하여 수정한 확률\n플레이어E는 학습모드아님 / 플레이어F는 학습모드\n\n\n\nhint: 플레이어F는 원래 보가 유리하다고 생각하여 보를 자주 내도록 학습되었다. 하지만 플레이어E가 그러한 플레이어F의 성향을 파악하고 가위를 주로 내도록 학습하였다. 플레이어F는 그러한 플레이어E의 성향을 다시 파악하여 이번에는 가위을 자주 내는 것이 유리하다고 생각할 것이다.\n(9) 플레이어E와 플레이어F의 대결기록을 초기화 한다. 이번에는 플레이어F가 항상 (3/4)의 확률로 가위를 (1/4)의 확률로 보를 낸다고 가정한다. 플레이어E는 100번의 대결까지는 랜덤으로 (가위,바위)중 하나를 내고 101번째 대결부터 1000번째 대결까지는 대결 데이터를 학습하여 수정한 확률을 사용한다고 하자. 1000번째 대결이후에 플레이어E가 (가위,바위)를 내는 확률이 어떻게 업데이트 되어있는가?\n\n\n\n\n\n\n\n\n\n시점\n플레이어E가 (가위,바위)를 낼 확률\n플레이어F가 (가위,보)를 낼 확률\n비고\n\n\n\n\nt <= 100\n(1/2, 1/2)\n(3/4, 1/4)\n양쪽 플레이어 모두 학습모드가 아님\n\n\nt <= 1000\n데이터를 학습하여 수정한 확률\n(3/4, 1/4)\n플레이어E는 학습모드 / 플레이어F는 학습모드 아님\n\n\n\n(10) 플레이어E와 플레이어F의 대결기록을 초기화 한다. 이번에는 플레이어F가 항상 (2/3)의 확률로 가위를 (1/3)의 확률로 보를 낸다고 가정한다. 플레이어E는 100번의 대결까지는 랜덤으로 (가위,바위)중 하나를 내고 101번째 대결부터 1000번째 대결까지는 대결 데이터를 학습하여 수정한 확률을 사용한다고 하자. 1000번째 대결이후에 플레이어E가 (가위,바위)를 내는 확률이 어떻게 업데이트 되어있는가?\n\n\n\n\n\n\n\n\n\n시점\n플레이어E가 (가위,바위)를 낼 확률\n플레이어F가 (가위,보)를 낼 확률\n비고\n\n\n\n\nt <= 100\n(1/2, 1/2)\n(2/3, 1/3)\n양쪽 플레이어 모두 학습모드가 아님\n\n\nt <= 1000\n데이터를 학습하여 수정한 확률\n(2/3, 1/3)\n플레이어E는 학습모드 / 플레이어F는 학습모드 아님\n\n\n\n\n\n\n- 아래의 클래스를 참고하여 문제1,2을 풀어라. (5월25일 강의노트에 소개된 클래스를 약간 정리한 것) - 참고하지 않아도 감점은 없음\n\nclass RPS:\n    def __init__(self,candidate):\n        self.candidate = candidate\n        self.actions = list() \n        self.rewards = list()\n        self.prob = [0.5,0.5]\n\n    def __eq__(self,other): # 연산 == 를 재정의 \n        return self.actions[-1] == other.actions[-1] \n        #note: 둘의 액션이 같으면 무승부 \n    \n    def __gt__(self,other): # 연산 > 를 재정의 \n        pair = self.actions[-1], other.actions[-1]\n        return pair == ('가위','보') or pair == ('바위','가위') or pair == ('보','바위') \n        #note: 가위>보, 바위>가위, 보>가위 \n    \n    def __mul__(self,other):\n        # step1: 각자의 패를 선택 \n        self.choose()\n        other.choose()\n        \n        # step2: 승패 판단 + upate reward\n        if self == other: # 무승부일경우 \n            self.rewards.append(1)\n            other.rewards.append(1)\n        elif self > other: # self의 승리 \n            self.rewards.append(2)\n            other.rewards.append(0)\n        else: # other의 승리 \n            self.rewards.append(0)\n            other.rewards.append(2)\n        \n        # step3: update data\n        self.update_data()\n        other.update_data()\n    \n    def update_data(self):\n        self.data = pd.DataFrame({'actions':self.actions, 'rewards':self.rewards})\n    \n    def _repr_html_(self):\n        html_str = \"\"\"\n        낼 수 있는 패: {} <br/> \n        데이터: <br/>\n        {}\n        \"\"\"        \n        return html_str.format(self.candidate,self.data._repr_html_())\n    \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate,p=self.prob))\n\n- 사용예시\n\na=RPS(['가위','가위'])\nb=RPS(['가위','보'])\n\n\nfor i in range(5):\n    a*b\n\n\na\n\n\n\n        낼 수 있는 패: ['가위', '가위']  \n        데이터: \n        \n\n\n  \n    \n      \n      actions\n      rewards\n    \n  \n  \n    \n      0\n      가위\n      2\n    \n    \n      1\n      가위\n      2\n    \n    \n      2\n      가위\n      1\n    \n    \n      3\n      가위\n      2\n    \n    \n      4\n      가위\n      2\n    \n  \n\n\n        \n\n\n\nb\n\n\n\n        낼 수 있는 패: ['가위', '보']  \n        데이터: \n        \n\n\n  \n    \n      \n      actions\n      rewards\n    \n  \n  \n    \n      0\n      보\n      0\n    \n    \n      1\n      보\n      0\n    \n    \n      2\n      가위\n      1\n    \n    \n      3\n      보\n      0\n    \n    \n      4\n      보\n      0"
  },
  {
    "objectID": "posts/2022-04-13-(7주차) 4월13일.html",
    "href": "posts/2022-04-13-(7주차) 4월13일.html",
    "title": "PP2023",
    "section": "",
    "text": "(7주차) 4월13일\n\nnumpy (rand, randn, randint, choice, 통계분포, np.where/np.argwhere, 인덱싱고급, np.ix_)\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n강의영상\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-yPErl_8ayWONJ_f-XH6MuR\n\n- (1/3) rand, randn\n- (2/3) randint\n- (3/3) choice, 통계분포, np.where/np.argwhere, 인덱싱고급, np.ix_\n\n\nimport\n\nimport numpy as np\n\n\n\nnumpy공부 5단계: 랜덤모듈\n\nnp.random.rand()\n- 0~1사이에서 10개의 난수 생성\n\nnp.random.rand(10)\n\narray([0.9762396 , 0.62290682, 0.65602078, 0.22890413, 0.01139937,\n       0.71156552, 0.22585515, 0.98642156, 0.20169783, 0.52544263])\n\n\n- 0~2사이에서 10개의 난수 생성\n\nnp.random.rand(10)*2 \n\narray([0.19486166, 1.31320638, 1.75920753, 0.03976132, 0.65443053,\n       0.98238346, 0.81586536, 1.26374209, 0.05189084, 1.53713552])\n\n\n- 1~2사이에서 10개의 난수 생성\n\nnp.random.rand(10)+1\n\narray([1.14697821, 1.52687013, 1.10827739, 1.87820387, 1.81630002,\n       1.93842216, 1.30725718, 1.21386634, 1.9331912 , 1.29694134])\n\n\n- 1~3사이에서 10개의 난수 생성\n\nnp.random.rand(10)*2+1 # 1~3\n\narray([2.10122574, 2.67412063, 2.70573365, 1.49312813, 2.72674064,\n       2.20040351, 2.26697979, 1.07834112, 2.6602285 , 1.60157633])\n\n\n\n\nnp.random.randn()\n- N(0,1)에서 10개 추출\n\nnp.random.randn(10) # 표준정규분포에서 10개의 샘플 추출 \n\narray([-0.40371384,  0.56295305, -1.03454983, -0.67628805, -0.89951532,\n       -0.1925445 ,  1.43684725,  0.34022492,  0.96763699, -2.0699127 ])\n\n\n- N(1,1)에서 10개 추출\n\nnp.random.randn(10)+1 \n\narray([ 0.69440765, -0.58892798,  1.86823224,  1.50473088,  1.56127732,\n        1.53295801, -0.44982257,  0.41660235,  0.50013233,  3.07135415])\n\n\n- N(0,4)에서 10개 추출 (평균이 0이고 분산이 4인 분포)\n\nnp.random.randn(10)*2\n\narray([ 0.48765347, -2.686622  ,  6.03529241,  0.52181081,  5.31070099,\n       -1.02246697, -0.3058778 ,  0.16147941, -2.11923353, -2.55772141])\n\n\n- N(3,4)에서 10개 추출\n\nnp.random.randn(10)*2+3 \n\narray([6.20706555, 3.95308508, 7.02954382, 2.57838168, 3.40580485,\n       4.37254926, 3.94572032, 2.32058837, 3.74756129, 4.81608642])\n\n\n\n\nnp.random.randint()\n- [0,7)의 범위에서 하나의 정수를 랜덤으로 생성\n\nnp.random.randint(7) # [0,7)의 범위에서 하나의 정수 생성 \n\n2\n\n\n- [0,7)의 범위에서 20개의 정수를 랜덤으로 생성\n\nnp.random.randint(7,size=(20,)) # [0,7)의 범위에서 20개의 정수 생성 \n\narray([5, 6, 6, 0, 6, 6, 2, 0, 3, 6, 2, 3, 2, 2, 6, 6, 5, 2, 3, 2])\n\n\n- [0,7)의 범위에서 (2,2) shape 으로 정수를 랜덤으로 생성\n\nnp.random.randint(7,size=(2,2)) # [0,7)의 범위에서 (2,2) shape의 정수 생성 \n\narray([[6, 4],\n       [3, 1]])\n\n\n- 위와 같은 코드를 아래와 같이 구현가능\n\nnp.random.randint(low=7,size=(5,5)) # [0,7)의 범위에서 (5,5) shape의 정수 생성 \n\narray([[4, 1, 2, 0, 4],\n       [5, 0, 1, 1, 3],\n       [2, 1, 4, 6, 6],\n       [4, 1, 6, 1, 5],\n       [4, 2, 1, 3, 4]])\n\n\n- [10,20) 의 범위에서 (5,5) shape 정수를 랜덤으로 생성\n\nnp.random.randint(low=10,high=20,size=(5,5)) # [10,20)의 범위에서 (5,5)shape의 정수생성 \n\narray([[10, 13, 11, 15, 17],\n       [10, 16, 15, 15, 11],\n       [15, 14, 11, 19, 11],\n       [10, 13, 13, 13, 14],\n       [14, 19, 17, 13, 19]])\n\n\n- 의문: np.random.randint(low=7,size=(5,5)) 가 좀 이상하다. 사실 np.random.randint(high=7,size=(5,5))가 되어야 맞지 않는가?\n-> 저도 그렇게 생각하긴 하는데요, 구현이 이렇게 되어있습니다. 도움말 확인!\nReturn random integers from the \"discrete uniform\" distribution of the specified dtype in the \"half-open\" interval [`low`, `high`). If `high` is None (the default), then results are from [0, `low`).\n\n\nnp.random.choice()\n- ver1\n\nnp.random.choice(5,20) # [0,5)에서 20개를 뽑음, 중복허용 \n\narray([1, 1, 4, 3, 0, 2, 4, 4, 4, 4, 0, 4, 2, 2, 2, 2, 2, 1, 4, 1])\n\n\n\n이것은 np.random.randint(5,size=(20,)) 와 같은 코드임\n\n- ver2\n\nnp.random.choice([0,1,2,3],20) # [0,1,2,3]에서 20개를 뽑음, 중복허용\n\narray([1, 0, 0, 1, 3, 3, 0, 1, 0, 0, 3, 3, 0, 1, 2, 3, 2, 1, 2, 3])\n\n\n\nnp.random.choice([\"apple\",\"orange\",\"banana\"],20)\n\narray(['orange', 'orange', 'orange', 'apple', 'orange', 'apple', 'apple',\n       'apple', 'orange', 'orange', 'orange', 'apple', 'apple', 'banana',\n       'banana', 'orange', 'orange', 'orange', 'orange', 'banana'],\n      dtype='<U6')\n\n\n\nnp.random.choice([\"apple\",\"orange\",\"banana\"],2,replace=False) # 중복허용 X \n\narray(['banana', 'orange'], dtype='<U6')\n\n\n\n\n통계분포\n\nnp.random.binomial(n=10,p=0.2,size=(5,)) # X1, ..., X5 ~ B(10,0.2) \n\narray([0, 1, 4, 1, 3])\n\n\n\nnp.random.normal(loc=10,scale=2,size=(5,)) # X1, ..., X5 ~ N(10,4) \n\narray([ 8.33296606,  7.28476525, 10.53464049,  8.70471009,  8.54969039])\n\n\n\nnp.radom.randn(5)*2 + 10와 같은코드\n\n\nnp.random.uniform(low=2,high=4,size=(5,)) # X1, ..., X5 ~ U(2,4) \n\narray([3.77048793, 2.5993732 , 2.93630494, 2.43154214, 3.63709163])\n\n\n\nnp.random.rand(5)*2+2와 같은 코드\n\n\nnp.random.poisson(lam=5,size=(5,)) # X1,...,X5 ~ Poi(5) \n\narray([4, 9, 4, 5, 0])\n\n\n\n\n\nnumpy공부 6단계: 기타 유용한 기본기능들\n\nnp.where, np.argwhere\n- 1차원\n\na=np.array([0,0,0,1,0])\na\n\narray([0, 0, 0, 1, 0])\n\n\n\nnp.where(a==1) # 조건 a==1을 만족하는 인덱스를 출력하라!\n\n(array([3]),)\n\n\n\nnp.argwhere(a==1)\n\narray([[3]])\n\n\n- 2차원\n\nnp.random.seed(43052)\na=np.random.randn(12).reshape(3,4)\na\n\narray([[ 0.38342049,  1.0841745 ,  1.14277825,  0.30789368],\n       [ 0.23778744,  0.35595116, -1.66307542, -1.38277318],\n       [-1.92684484, -1.4862163 ,  0.00692519, -0.03488725]])\n\n\n\nnp.where(a<0) # 조건을 만족하는 인덱스가 (1,2), (1,3), (2,0), (2,1), (2,3) 이라는 의미\n\n(array([1, 1, 2, 2, 2]), array([2, 3, 0, 1, 3]))\n\n\n\nnp.argwhere(a<0) # 조건을 만족하는 인덱스가 (1,2), (1,3), (2,0), (2,1), (2,3) 이라는 의미\n\narray([[1, 2],\n       [1, 3],\n       [2, 0],\n       [2, 1],\n       [2, 3]])\n\n\n\na[np.where(a<0)] # 조건을 만족하는 인덱스가 모두 출력 => 1차원 array로 출력 \n\narray([-1.66307542, -1.38277318, -1.92684484, -1.4862163 , -0.03488725])\n\n\n\na[np.argwhere(a<0)] # 출력불가능\n\nIndexError: index 3 is out of bounds for axis 0 with size 3\n\n\n\na[np.argwhere(a<0)[0][0],np.argwhere(a<0)[0][1]] # 어거지로 출력할수는 있음 \n\n-1.6630754187023522\n\n\n- np.where의 특수기능\n\nnp.random.seed(43052) \na=np.random.randn(12).reshape(3,4) \na\n\narray([[ 0.38342049,  1.0841745 ,  1.14277825,  0.30789368],\n       [ 0.23778744,  0.35595116, -1.66307542, -1.38277318],\n       [-1.92684484, -1.4862163 ,  0.00692519, -0.03488725]])\n\n\n\nnp.where(a<0,0,a) # a<0을 체크 => 조건에 맞으면 0 => 조건에 안맞으면 a \n\narray([[0.38342049, 1.0841745 , 1.14277825, 0.30789368],\n       [0.23778744, 0.35595116, 0.        , 0.        ],\n       [0.        , 0.        , 0.00692519, 0.        ]])\n\n\n\nnp.where(a<0,0,1) # a<0을 체크 => 조건에 맞으면 0 => 조건에 안맞으면 1\n\narray([[1, 1, 1, 1],\n       [1, 1, 0, 0],\n       [0, 0, 1, 0]])\n\n\n- 요약 - np.where: 인덱스의 좌표를 읽는 가독성은 떨어짐. 그런데 조건에 맞는 원소를 출력하거나 처리하는 (특수기능) 목적으로는 좋은 함수\n- np.argwhere: 인덱스의 좌표를 읽는 가독성은 좋은 편임. 그런데 조건에 맞는 원소를 출력하거나 처리하는 기능은 떨어짐\n\n\n인덱싱고급\n- 원래 a는 2d array\n\na=np.arange(12).reshape(3,4)\na\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n- 경우1: 인덱싱 결과가 1d array로 나올수 있음\n\na[0,:] # 인덱싱의 결과 축의 갯수가 바뀐다! 2d array -> 1d array\n\narray([0, 1, 2, 3])\n\n\n- 경우2: 물론 인덱싱 결과가 2d array로 나올 수도 있음\n\na[[0,1],:] # 이것은 축의 숫자가 유지된다. 2d array -> 2d array \n\narray([[0, 1, 2, 3],\n       [4, 5, 6, 7]])\n\n\n- 경우1의 상황에서도 축의 갯수를 유지하면서 인덱싱하려면?\n\na[[0],:] # 이번에는 인덱싱의 결과 축의 갯수가 유지된다! 2d array -> 2d array\n\narray([[0, 1, 2, 3]])\n\n\n\na[:,[0]] #\n\narray([[0],\n       [4],\n       [8]])\n\n\n- 미묘한 차이를 이해할것\n\na[0,:], a[[0],:]\n\n(array([0, 1, 2, 3]), array([[0, 1, 2, 3]]))\n\n\n\na[:,0], a[:,[0]]\n\n(array([0, 4, 8]),\n array([[0],\n        [4],\n        [8]]))\n\n\n\n\nnp.ix_\n- 아래의 인덱싱을 비교하자.\n\na=np.arange(12).reshape(3,4)\na\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n\na[0:2,0:2]\n\narray([[0, 1],\n       [4, 5]])\n\n\n\na[[0,1],0:2]\n\narray([[0, 1],\n       [4, 5]])\n\n\n\na[0:2,[0,1]]\n\narray([[0, 1],\n       [4, 5]])\n\n\n- 언뜻 생각하면 위의 결과와 a[[0,1],[0,1]]는 결과가 동일할 것 같다.\n\na[[0,1],[0,1]]\n\narray([0, 5])\n\n\n\n실제로는 [a[0,0],a[1,1]]이 array로 나옴\n\n- 사실 np.where에서 이미 관찰하였음\n\na\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n\nnp.where(a % 5 ==0)\n\n(array([0, 1, 2]), array([0, 1, 2]))\n\n\n\na[np.where(a % 5 ==0)]\n\narray([ 0,  5, 10])\n\n\n\na[[0, 1, 2],[0, 1, 2]]\n\narray([ 0,  5, 10])\n\n\n- a[[0,1],[0,1]]이 a[0:2,0:2]를 의미하게 하려면 아래와 같이 하면 된다.\n\na[np.ix_([0,1],[0,1])] # 유용해보이지만 생각보다 잘 쓰이는건 아님 \n\narray([[0, 1],\n       [4, 5]])\n\n\n\n\n\n숙제\n\nnp.random.uniform(low=1.3,high=1.7,size=(10,))\n\narray([1.42531485, 1.54567744, 1.44735207, 1.33217747, 1.48856969,\n       1.47329978, 1.38976795, 1.30469965, 1.66634909, 1.65330027])\n\n\n위와 같은코드를 np.random.rand()를 이용하여 구현하라."
  },
  {
    "objectID": "posts/2022-04-06-(6주차) 4월6일.html",
    "href": "posts/2022-04-06-(6주차) 4월6일.html",
    "title": "PP2023",
    "section": "",
    "text": "(5주차) 4월6일\n\nnumpy (선언, 브로드캐스팅, 수학연산, 인덱싱, reshape, 랜덤으로 생성, 행렬관련기능)\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n강의영상\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-zaw-dCrB3YG7QJUInlJ0P7\n\n- (1/5) 넘파이공부 1단계: 선언, 기본연산 브로드캐스팅, 기타수학연산지원\n- (2/5) 넘파이공부 2단계: 인덱싱1차원, 인덱싱2차원\n- (3/5) 넘파이공부 2단계: 1차원 배열의 선언\n- (4/5) 넘파이공부 2단계: reshape\n- (5/5) 넘파이공부 2단계: 2차원 배열의 선언, 랜덤으로 배열 생성, 행렬관련기능\n\n\nimport\n\nimport numpy as np\n\n\n\n넘파이 공부 1단계\n\n선언\n\na=np.array([1,2,3]) # list를 만들고 ndarray화 시킴 \nl=[1,2,3]\n\n\n\n기본연산 브로드캐스팅\n\na+1 ## [1,2,3] + 1 = [2,3,4]\n\narray([2, 3, 4])\n\n\n\nl+1\n\nTypeError: can only concatenate list (not \"int\") to list\n\n\n\na*2\n\narray([2, 4, 6])\n\n\n\nl*2\n\n[1, 2, 3, 1, 2, 3]\n\n\n\na/2\n\narray([0.5, 1. , 1.5])\n\n\n\nl/2\n\nTypeError: unsupported operand type(s) for /: 'list' and 'int'\n\n\n\na**2\n\narray([1, 4, 9])\n\n\n\nl**2\n\nTypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int'\n\n\n\na%2 # %2 = 2로 나눈 나머지를 리턴 a=[1,2,3] \n\narray([1, 0, 1])\n\n\n\nl%2\n\nTypeError: unsupported operand type(s) for %: 'list' and 'int'\n\n\n\n\n기타수학연산지원\n\nnp.sqrt(a), np.sqrt(l)\n\n(array([1.        , 1.41421356, 1.73205081]),\n array([1.        , 1.41421356, 1.73205081]))\n\n\n\nnp.log(a), np.log(l)\n\n(array([0.        , 0.69314718, 1.09861229]),\n array([0.        , 0.69314718, 1.09861229]))\n\n\n\nnp.exp(a), np.exp(l)\n\n(array([ 2.71828183,  7.3890561 , 20.08553692]),\n array([ 2.71828183,  7.3890561 , 20.08553692]))\n\n\n\nnp.sin(a), np.sin(l)\n\n(array([0.84147098, 0.90929743, 0.14112001]),\n array([0.84147098, 0.90929743, 0.14112001]))\n\n\n\n\n\n넘파이 공부 2단계\n\n인덱싱 1차원\n- 선언\n\nl=[11,22,33,44,55,66] \na=np.array(l) \n\n- 인덱스로 접근\n\nl[0],l[1],l[2],l[3],l[-2],l[-1]\n\n(11, 22, 33, 44, 55, 66)\n\n\n\na[0],a[1],a[2],a[3],a[-2],a[-1]\n\n(11, 22, 33, 44, 55, 66)\n\n\n- : 이용 (슬라이싱)\n\nl[2:4] # index 2에서 시작, index 4는 포함하지 않음 \n\n[33, 44]\n\n\n\na[2:4] \n\narray([33, 44])\n\n\n- 정수배열에 의한 인덱싱\n\na\n\narray([11, 22, 33, 44, 55, 66])\n\n\n\na[[0,2,4]] # index=0, index=2, index=4 에 해당하는 원소를 뽑고 싶다 \n\narray([11, 33, 55])\n\n\n\nl[[0,2,4]] # 리스트는 불가능 \n\nTypeError: list indices must be integers or slices, not list\n\n\n- 부울값에 의한 인덱싱\n\na\n\narray([11, 22, 33, 44, 55, 66])\n\n\n\na[[True,False,True,False,True,False]] \n\narray([11, 33, 55])\n\n\n응용하면?\n\na < 33 \n\narray([ True,  True, False, False, False, False])\n\n\n\na[a<33]\n\narray([11, 22])\n\n\n리스트는 불가능\n\nl<33 # 여기에서부터 불가능 \n\nTypeError: '<' not supported between instances of 'list' and 'int'\n\n\n\nl[[True,False,True,False,True,False]] # 이것도 불가능 \n\nTypeError: list indices must be integers or slices, not list\n\n\n\n\n인덱싱 2차원\n- 중첩리스트와 2차원 np.array 선언\n\nA = [[1,2,3,4],[-1,-2,-3,-4],[5,6,7,8],[-5,-6,-7,-8]]\nA2 = np.array(A)\n\n\nA2\n\narray([[ 1,  2,  3,  4],\n       [-1, -2, -3, -4],\n       [ 5,  6,  7,  8],\n       [-5, -6, -7, -8]])\n\n\n\nA\n\n[[1, 2, 3, 4], [-1, -2, -3, -4], [5, 6, 7, 8], [-5, -6, -7, -8]]\n\n\n- A의 원소 인덱싱\n\nA[0][0] # (1,1)의 원소 \n\n1\n\n\n\nA[1][2] # (2,3)의 원소 \n\n-3\n\n\n\nA[-1][0] # (4,1)의 원소 \n\n-5\n\n\n- A2의 원소 인덱싱\n\nA2[0][0] # (1,1)의 원소 \n\n1\n\n\n\nA2[1][2] # (2,3)의 원소 \n\n-3\n\n\n\nA2[-1][0] # (4,1)의 원소 \n\n-5\n\n\n- A2에서만 되는 기술 (넘파이에서 제시하는 신기술, R에서는 기본적으로 쓰던것, 이중list는 불가능)\n\nA2[0,0] # (1,1)의 원소 \n\n1\n\n\n\nA2[1,2] # (2,3)의 원소 \n\n-3\n\n\n\nA2[-1,0] # (4,1)의 원소 \n\n-5\n\n\n- 정수배열에 의한 인덱싱 & 슬라이싱!\n\nA2\n\narray([[ 1,  2,  3,  4],\n       [-1, -2, -3, -4],\n       [ 5,  6,  7,  8],\n       [-5, -6, -7, -8]])\n\n\n\nA2[0,0:2] # 1행1열, 1행2열 \n\narray([1, 2])\n\n\n\nA2[0,:] # 1행 \n\narray([1, 2, 3, 4])\n\n\n\nA2[0] # 1행\n\narray([1, 2, 3, 4])\n\n\n\nA2[[0,2],:] # 1행, 3행 \n\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n\n\n\nA2[[0,2]] # 1행, 3행 \n\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n\n\n\nA2[:,0] # 1열 \n\narray([ 1, -1,  5, -5])\n\n\n\nA2[:,[0]] # 1열 \n\narray([[ 1],\n       [-1],\n       [ 5],\n       [-5]])\n\n\n\nA2[:,[0,2]] # 1열, 3열\n\narray([[ 1,  3],\n       [-1, -3],\n       [ 5,  7],\n       [-5, -7]])\n\n\n\nA2[0:2,[0,2]] # 1행~2행 //  1열,3열 \n\narray([[ 1,  3],\n       [-1, -3]])\n\n\n\n\n1차원 배열의 선언\n- 리스트나 튜플을 선언하고 형변환\n\nnp.array((1,2,3)) # 튜플->넘파이어레이 \n\narray([1, 2, 3])\n\n\n\nnp.array([1,2,3]) # 리스트 ->넘파이어레이 \n\narray([1, 2, 3])\n\n\n- range()를 이용해서 선언하고 형변환\n\nnp.array(range(10)) # range(10) -> 넘파이어레이 \n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n- np.zeros, np.ones\n\nnp.zeros(3) \n\narray([0., 0., 0.])\n\n\n\nnp.ones(4)\n\narray([1., 1., 1., 1.])\n\n\n- np.linspace\n\nnp.linspace(0,1,12) # 0에서 시작하고 1에서 끝남 (양끝점 모두 포함)\n\narray([0.        , 0.09090909, 0.18181818, 0.27272727, 0.36363636,\n       0.45454545, 0.54545455, 0.63636364, 0.72727273, 0.81818182,\n       0.90909091, 1.        ])\n\n\n\nlen(np.linspace(0,1,12)) # 길이는 12\n\n12\n\n\n- np.arange\n\nnp.arange(5) # np.array(range(5))\n\narray([0, 1, 2, 3, 4])\n\n\n\nnp.arange(1,6) # np.array(range(1,6))\n\narray([1, 2, 3, 4, 5])\n\n\n\n\nreshape\n- reshape: ndarray의 특수한 기능\n\na=np.array([11,22,33,44,55,66])\na ## 길이가 6인 벡터 \n\narray([11, 22, 33, 44, 55, 66])\n\n\n\na.reshape(2,3) ## (2,3) matrix 라고 생각해도 무방 \n\narray([[11, 22, 33],\n       [44, 55, 66]])\n\n\nnote: reshape은 a자체를 변화시키는것은 아님\n\na # a는 그대로 있음 \n\narray([11, 22, 33, 44, 55, 66])\n\n\n\nb= a.reshape(2,3) # a를 reshape한 결과를 b에 저장 \nb\n\narray([[11, 22, 33],\n       [44, 55, 66]])\n\n\n\na # a는 여전히 그대로 있음\n\narray([11, 22, 33, 44, 55, 66])\n\n\n- 다시 b를 a처럼 바꾸고 싶다\n\nb\n\narray([[11, 22, 33],\n       [44, 55, 66]])\n\n\n\nb.reshape(6) # b는 (2,3) matrix , 그런데 이것을 길이가 6인 벡터로 만들고 싶다. \n\narray([11, 22, 33, 44, 55, 66])\n\n\n- reshape with -1\n\na=np.arange(24) # np.array(range(24))\na\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23])\n\n\n\na.reshape(2,-1)\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]])\n\n\n\na.reshape(3,-1)\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7],\n       [ 8,  9, 10, 11, 12, 13, 14, 15],\n       [16, 17, 18, 19, 20, 21, 22, 23]])\n\n\n\na.reshape(4,-1)\n\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23]])\n\n\n\na.reshape(5,-1)\n\nValueError: cannot reshape array of size 24 into shape (5,newaxis)\n\n\n\na.reshape(6,-1)\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15],\n       [16, 17, 18, 19],\n       [20, 21, 22, 23]])\n\n\n\na.reshape(7,-1)\n\nValueError: cannot reshape array of size 24 into shape (7,newaxis)\n\n\n\na.reshape(8,-1)\n\narray([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11],\n       [12, 13, 14],\n       [15, 16, 17],\n       [18, 19, 20],\n       [21, 22, 23]])\n\n\n\na.reshape(12,-1)\n\narray([[ 0,  1],\n       [ 2,  3],\n       [ 4,  5],\n       [ 6,  7],\n       [ 8,  9],\n       [10, 11],\n       [12, 13],\n       [14, 15],\n       [16, 17],\n       [18, 19],\n       [20, 21],\n       [22, 23]])\n\n\n\nb= a.reshape(12,-1)\nb\n\narray([[ 0,  1],\n       [ 2,  3],\n       [ 4,  5],\n       [ 6,  7],\n       [ 8,  9],\n       [10, 11],\n       [12, 13],\n       [14, 15],\n       [16, 17],\n       [18, 19],\n       [20, 21],\n       [22, 23]])\n\n\n\nb.reshape(-1) # b를 다시 길이가 24인 벡터로!\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23])\n\n\n\n\n2차원 배열의 선언\n\nnp.zeros((3,3))\n\narray([[0., 0., 0.],\n       [0., 0., 0.],\n       [0., 0., 0.]])\n\n\n\nnp.ones((3,3))\n\narray([[1., 1., 1.],\n       [1., 1., 1.],\n       [1., 1., 1.]])\n\n\n\nnp.eye(3)\n\narray([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])\n\n\n\nnp.diag([1,2,3,-1])\n\narray([[ 1,  0,  0,  0],\n       [ 0,  2,  0,  0],\n       [ 0,  0,  3,  0],\n       [ 0,  0,  0, -1]])\n\n\n\n\n랜덤으로 배열 생성\n\nnp.random.randn(10) # 표쥰정규분포에서 10개를 뽑음 \n\narray([ 0.27184979, -0.4540305 ,  0.24538219, -3.11389327,  1.06478234,\n        0.12051154,  0.01503231, -0.06744028,  2.30710253,  0.78840453])\n\n\n\nnp.random.rand(10) # 0~1사이에서 10개를 뽑음\n\narray([0.67729671, 0.19584606, 0.4564896 , 0.9308976 , 0.49080792,\n       0.03410752, 0.47480477, 0.44519947, 0.20608611, 0.85576604])\n\n\n\nnp.random.randn(4).reshape(2,2) # 표준정규분포에서 4개를 뽑고 (2,2) ndarray로 형태변환 \n\narray([[-0.97378852,  0.5250826 ],\n       [-0.97400213, -0.59600022]])\n\n\n\nnp.random.rand(4).reshape(2,2) # 0~1 4개를 뽑고 (2,2) ndarray로 형태변환 \n\narray([[0.03708309, 0.56122376],\n       [0.80934488, 0.65723348]])\n\n\n\n\n행렬관련기능\n\nA=np.arange(4).reshape(2,2) \nA\n\narray([[0, 1],\n       [2, 3]])\n\n\n\nA.T # .T는 전치행렬을 구해줌 \n\narray([[0, 2],\n       [1, 3]])\n\n\n\nnp.linalg.inv(A) # np.linalg.inv는 역행렬을 구해주는 함수 \n\narray([[-1.5,  0.5],\n       [ 1. ,  0. ]])\n\n\n\nA @ np.linalg.inv(A) # @는 행렬곱을 수행 \n\narray([[1., 0.],\n       [0., 1.]])\n\n\n\n\n\n숙제\n\nA=np.array(range(6)) \nA # 길이가 6인 벡터 \n\narray([0, 1, 2, 3, 4, 5])\n\n\n위와 같이 길이가 6인 벡터 A를 (2,3) ndarray로 변경 (reshape를 이용)\n\n\n참고\n- 혹시 행렬을 처음 보시는 학생이 있다면 아래주소의 영상에서 1-4를 학습하시면 됩니다. (1-5까지 있는데 1-4까지만 보시면됩니다) 혹은 스스로 학습하셔도 무방합니다.\n\nhttps://guebin.github.io/IR2021/2021/10/29/(A2)-%EB%A7%A4%ED%8A%B8%EB%A6%AD%EC%8A%A4.html\n\n- 행렬을 알고 있다면 위의 주소의 영상은 skip 하셔도 무방합니다."
  },
  {
    "objectID": "posts/2022-05-04-(10주차) 5월6일.html",
    "href": "posts/2022-05-04-(10주차) 5월6일.html",
    "title": "PP2023",
    "section": "",
    "text": "판다스\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-yVqpHCud2whEIsN36jRJzd\n\n- (1/8) 부분 데이터 꺼내기: 판다스를 왜 써야할까?\n- (2/8) pandas 개발동기\n- (3/8) 열의 이름 부여\n- (4/8) 행의 이름 부여, 자료형, len, shape, for문의 반복변수, pd.Series\n- (5/8) 첫번째 칼럼을 선택, 여러개의 칼럼을 선택\n- (6/8) 첫번째 행의 선택, 여러개의 행을 선택\n- (7/8) query (1)\n- (8/8) query (2), 판다스공부 3단계\n\n\n\n\nimport numpy as np\nimport pandas as pd\n\n\n\n\n\n\n- 예제1: 기본인덱싱\n\na='asdf'\na[2]\n\n'd'\n\n\n\na[-1]\n\n'f'\n\n\n- 예제2: 슬라이싱\n\na='asdf'\na[1:3]\n\n'sd'\n\n\n\na[-2:]\n\n'df'\n\n\n- 예제3: 스트라이딩\n\na='asdfg'\na[::2]\n\n'adg'\n\n\n- 예제4: 불가능한것\n\na='asdf'\na[[1,2]] # 정수인덱스를 리스트화 시켜서 인덱싱하는 것은 불가능 \n\nTypeError: string indices must be integers\n\n\n\na='asdf'\na[[True,True,False,False]] \n\nTypeError: string indices must be integers\n\n\n\n\n\n- 예제1: 인덱스의 리스트 (혹은 ndarray)를 전달\n\na=np.arange(55,61)\na\n\narray([55, 56, 57, 58, 59, 60])\n\n\n\na[[1,2,-1]]\n\narray([56, 57, 60])\n\n\n\na[np.array([1,2,-1])]\n\narray([56, 57, 60])\n\n\n- 예제2: bool로 이루어진 리스트 (혹은 ndarray)를 전달\n\na=np.arange(55,61)\na\n\narray([55, 56, 57, 58, 59, 60])\n\n\n\na[[True,True,False,False,False,False]]\n\narray([55, 56])\n\n\n\na[np.array([True,True,False,False,False,False])]\n\narray([55, 56])\n\n\n\na[a<58]\n\narray([55, 56, 57])\n\n\n\n\n\n- 예제1\n\na = np.arange(4*3).reshape(4,3)\na\n\narray([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11]])\n\n\n\na[0:2,1]\n\narray([1, 4])\n\n\n- 예제2: 차원을 유지하면서 인덱싱을 하고 싶으면?\n\na = np.arange(4*3).reshape(4,3)\na[0:2,[1]]\n\narray([[1],\n       [4]])\n\n\n\n\n\n- 예제1: (key,value)\n\nd={'att':65, 'rep':45, 'mid':30, 'fin':100}\nd\n\n{'att': 65, 'rep': 45, 'mid': 30, 'fin': 100}\n\n\n\nd['att'] # key를 넣으면 value가 리턴\n\n65\n\n\n- 예제2: numpy와 비교\n\nnp.random.seed(43052)\natt = np.random.choice(np.arange(10,21)*5,200)\nrep = np.random.choice(np.arange(5,21)*5,200)\nmid = np.random.choice(np.arange(0,21)*5,200)\nfin = np.random.choice(np.arange(0,21)*5,200)\nkey = ['202212'+str(s) for s in np.random.choice(np.arange(300,501),200,replace=False)]\ntest_dic = {key[i] : {'att':att[i], 'rep':rep[i], 'mid':mid[i], 'fin':fin[i]} for i in range(200)}\ntest_ndarray = np.array([key,att,rep,mid,fin],dtype=np.int64).T\ndel(att);del(rep);del(mid);del(fin);del(key)\n\n학번 ’202212460’에 해당하는 학생의 출석점수를 알고 싶다면?\n(풀이1)\n\ntest_dic['202212460']['att']\n\n55\n\n\n(풀이2)\n\ntest_ndarray[test_ndarray[:,0] == 202212460, 1] ## 이게 무슨코드야 도데체!\n\narray([55])\n\n\n(풀이2)가 (풀이1)에 비하여 불편한 점 - test_ndarray의 첫칼럼은 student id 이고 두번째 칼럼은 att라는 사실을 암기하고 있어야 한다. - student id가 아니고 만약에 학생이름을 써서 데이터를 정리한다면 모든 자료형은 문자형이 되어야 한다. - 작성한 코드의 가독성이 없다. (위치로 접근하기 때문)\n- 요약: hash 스타일로 정보를 추출하는 것이 유용할 때가 있다. 그리고 보통 hash 스타일로 정보를 뽑는 것이 유리하다. (사실 numpy는 정보추출을 위해 개발된 자료형이 아니라 행렬 및 벡터의 수학연산을 지원하기 위해 개발된 자료형이다)\n- 소망: 정보를 추출할때는 hash 스타일도 유용하다는 것은 이해함 \\(\\to\\) 하지만 나는 가끔 넘파이스타일로 정보를 뽑고 싶은걸? 그리고 딕셔너리 형태가 아니고 엑셀처럼(행렬처럼) 데이터를 보고 싶은걸? \\(\\to\\) pandas의 개발\n\n\n\n\n\n\n\nnp.random.seed(43052)\natt = np.random.choice(np.arange(10,21)*5,20)\nrep = np.random.choice(np.arange(5,21)*5,20)\nmid = np.random.choice(np.arange(0,21)*5,20)\nfin = np.random.choice(np.arange(0,21)*5,20)\nkey = ['202212'+str(s) for s in np.random.choice(np.arange(300,501),20,replace=False)]\ntest_dic = {key[i] : {'att':att[i], 'rep':rep[i], 'mid':mid[i], 'fin':fin[i]} for i in range(20)}\n\n\ntest_dic\n\n{'202212380': {'att': 65, 'rep': 55, 'mid': 50, 'fin': 40},\n '202212370': {'att': 95, 'rep': 100, 'mid': 50, 'fin': 80},\n '202212363': {'att': 65, 'rep': 90, 'mid': 60, 'fin': 30},\n '202212488': {'att': 55, 'rep': 80, 'mid': 75, 'fin': 80},\n '202212312': {'att': 80, 'rep': 30, 'mid': 30, 'fin': 100},\n '202212377': {'att': 75, 'rep': 40, 'mid': 100, 'fin': 15},\n '202212463': {'att': 65, 'rep': 45, 'mid': 45, 'fin': 90},\n '202212471': {'att': 60, 'rep': 60, 'mid': 25, 'fin': 0},\n '202212400': {'att': 95, 'rep': 65, 'mid': 20, 'fin': 10},\n '202212469': {'att': 90, 'rep': 80, 'mid': 80, 'fin': 20},\n '202212318': {'att': 55, 'rep': 75, 'mid': 35, 'fin': 25},\n '202212432': {'att': 95, 'rep': 95, 'mid': 45, 'fin': 0},\n '202212443': {'att': 95, 'rep': 55, 'mid': 15, 'fin': 35},\n '202212367': {'att': 50, 'rep': 80, 'mid': 40, 'fin': 30},\n '202212458': {'att': 50, 'rep': 55, 'mid': 15, 'fin': 85},\n '202212396': {'att': 95, 'rep': 30, 'mid': 30, 'fin': 95},\n '202212482': {'att': 50, 'rep': 50, 'mid': 45, 'fin': 10},\n '202212452': {'att': 65, 'rep': 55, 'mid': 15, 'fin': 45},\n '202212387': {'att': 70, 'rep': 70, 'mid': 40, 'fin': 35},\n '202212354': {'att': 90, 'rep': 90, 'mid': 80, 'fin': 90}}\n\n\n\n테이블형태로 보고 싶다.\n\n(방법1) – 행렬이기는 하지만 방법 2,3,4,5 에 비하여 우리가 원하는 만큼 가독성을 주는 형태는 아님..\n\ntest_ndarray = np.array([key,att,rep,mid,fin],dtype=np.int64).T\ntest_ndarray\n\narray([[202212380,        65,        55,        50,        40],\n       [202212370,        95,       100,        50,        80],\n       [202212363,        65,        90,        60,        30],\n       [202212488,        55,        80,        75,        80],\n       [202212312,        80,        30,        30,       100],\n       [202212377,        75,        40,       100,        15],\n       [202212463,        65,        45,        45,        90],\n       [202212471,        60,        60,        25,         0],\n       [202212400,        95,        65,        20,        10],\n       [202212469,        90,        80,        80,        20],\n       [202212318,        55,        75,        35,        25],\n       [202212432,        95,        95,        45,         0],\n       [202212443,        95,        55,        15,        35],\n       [202212367,        50,        80,        40,        30],\n       [202212458,        50,        55,        15,        85],\n       [202212396,        95,        30,        30,        95],\n       [202212482,        50,        50,        45,        10],\n       [202212452,        65,        55,        15,        45],\n       [202212387,        70,        70,        40,        35],\n       [202212354,        90,        90,        80,        90]])\n\n\n(방법2)\n\npd.DataFrame(test_dic).T\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212377\n      75\n      40\n      100\n      15\n    \n    \n      202212463\n      65\n      45\n      45\n      90\n    \n    \n      202212471\n      60\n      60\n      25\n      0\n    \n    \n      202212400\n      95\n      65\n      20\n      10\n    \n    \n      202212469\n      90\n      80\n      80\n      20\n    \n    \n      202212318\n      55\n      75\n      35\n      25\n    \n    \n      202212432\n      95\n      95\n      45\n      0\n    \n    \n      202212443\n      95\n      55\n      15\n      35\n    \n    \n      202212367\n      50\n      80\n      40\n      30\n    \n    \n      202212458\n      50\n      55\n      15\n      85\n    \n    \n      202212396\n      95\n      30\n      30\n      95\n    \n    \n      202212482\n      50\n      50\n      45\n      10\n    \n    \n      202212452\n      65\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      70\n      40\n      35\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n(방법3)\n\ntest_dic2 = {'att':{key[i]:att[i] for i in range(20)}, \n             'rep':{key[i]:rep[i] for i in range(20)},\n             'mid':{key[i]:mid[i] for i in range(20)},\n             'fin':{key[i]:fin[i] for i in range(20)}}\n\n\npd.DataFrame(test_dic2)\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212377\n      75\n      40\n      100\n      15\n    \n    \n      202212463\n      65\n      45\n      45\n      90\n    \n    \n      202212471\n      60\n      60\n      25\n      0\n    \n    \n      202212400\n      95\n      65\n      20\n      10\n    \n    \n      202212469\n      90\n      80\n      80\n      20\n    \n    \n      202212318\n      55\n      75\n      35\n      25\n    \n    \n      202212432\n      95\n      95\n      45\n      0\n    \n    \n      202212443\n      95\n      55\n      15\n      35\n    \n    \n      202212367\n      50\n      80\n      40\n      30\n    \n    \n      202212458\n      50\n      55\n      15\n      85\n    \n    \n      202212396\n      95\n      30\n      30\n      95\n    \n    \n      202212482\n      50\n      50\n      45\n      10\n    \n    \n      202212452\n      65\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      70\n      40\n      35\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n(방법4)\n\ndf = pd.DataFrame({'att':att, 'rep':rep, 'mid':mid, 'fin':fin},index=key)\ndf\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212377\n      75\n      40\n      100\n      15\n    \n    \n      202212463\n      65\n      45\n      45\n      90\n    \n    \n      202212471\n      60\n      60\n      25\n      0\n    \n    \n      202212400\n      95\n      65\n      20\n      10\n    \n    \n      202212469\n      90\n      80\n      80\n      20\n    \n    \n      202212318\n      55\n      75\n      35\n      25\n    \n    \n      202212432\n      95\n      95\n      45\n      0\n    \n    \n      202212443\n      95\n      55\n      15\n      35\n    \n    \n      202212367\n      50\n      80\n      40\n      30\n    \n    \n      202212458\n      50\n      55\n      15\n      85\n    \n    \n      202212396\n      95\n      30\n      30\n      95\n    \n    \n      202212482\n      50\n      50\n      45\n      10\n    \n    \n      202212452\n      65\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      70\n      40\n      35\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n(방법5)\n\ndf = pd.DataFrame({'att':att, 'rep':rep, 'mid':mid, 'fin':fin})\ndf\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      0\n      65\n      55\n      50\n      40\n    \n    \n      1\n      95\n      100\n      50\n      80\n    \n    \n      2\n      65\n      90\n      60\n      30\n    \n    \n      3\n      55\n      80\n      75\n      80\n    \n    \n      4\n      80\n      30\n      30\n      100\n    \n    \n      5\n      75\n      40\n      100\n      15\n    \n    \n      6\n      65\n      45\n      45\n      90\n    \n    \n      7\n      60\n      60\n      25\n      0\n    \n    \n      8\n      95\n      65\n      20\n      10\n    \n    \n      9\n      90\n      80\n      80\n      20\n    \n    \n      10\n      55\n      75\n      35\n      25\n    \n    \n      11\n      95\n      95\n      45\n      0\n    \n    \n      12\n      95\n      55\n      15\n      35\n    \n    \n      13\n      50\n      80\n      40\n      30\n    \n    \n      14\n      50\n      55\n      15\n      85\n    \n    \n      15\n      95\n      30\n      30\n      95\n    \n    \n      16\n      50\n      50\n      45\n      10\n    \n    \n      17\n      65\n      55\n      15\n      45\n    \n    \n      18\n      70\n      70\n      40\n      35\n    \n    \n      19\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n\ndf=df.set_index([key])\ndf\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212377\n      75\n      40\n      100\n      15\n    \n    \n      202212463\n      65\n      45\n      45\n      90\n    \n    \n      202212471\n      60\n      60\n      25\n      0\n    \n    \n      202212400\n      95\n      65\n      20\n      10\n    \n    \n      202212469\n      90\n      80\n      80\n      20\n    \n    \n      202212318\n      55\n      75\n      35\n      25\n    \n    \n      202212432\n      95\n      95\n      45\n      0\n    \n    \n      202212443\n      95\n      55\n      15\n      35\n    \n    \n      202212367\n      50\n      80\n      40\n      30\n    \n    \n      202212458\n      50\n      55\n      15\n      85\n    \n    \n      202212396\n      95\n      30\n      30\n      95\n    \n    \n      202212482\n      50\n      50\n      45\n      10\n    \n    \n      202212452\n      65\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      70\n      40\n      35\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n\n\n\n- 예제1: 출석점수를 출력\n\ntest_dic2['att']\n\n{'202212380': 65,\n '202212370': 95,\n '202212363': 65,\n '202212488': 55,\n '202212312': 80,\n '202212377': 75,\n '202212463': 65,\n '202212471': 60,\n '202212400': 95,\n '202212469': 90,\n '202212318': 55,\n '202212432': 95,\n '202212443': 95,\n '202212367': 50,\n '202212458': 50,\n '202212396': 95,\n '202212482': 50,\n '202212452': 65,\n '202212387': 70,\n '202212354': 90}\n\n\n\ndf['att']\n\n202212380    65\n202212370    95\n202212363    65\n202212488    55\n202212312    80\n202212377    75\n202212463    65\n202212471    60\n202212400    95\n202212469    90\n202212318    55\n202212432    95\n202212443    95\n202212367    50\n202212458    50\n202212396    95\n202212482    50\n202212452    65\n202212387    70\n202212354    90\nName: att, dtype: int64\n\n\n- 예제2: 학번 202212380’의 출석점수 출력\n\ntest_dic2['att']['202212380']\n\n65\n\n\n\ndf['att']['202212380']\n\n65\n\n\n\n\n\n- 예제1: 첫번째 학생의 기말고사 성적을 출력하고 싶다.\n\ntest_ndarray[0,-1]\n\n40\n\n\n\ndf.iloc[0,-1]\n\n40\n\n\n\n벼락치기: df에서 iloc이라는 특수기능을 이용하면 넘파이 인덱싱처럼 원소출력이 가능하다.\n\n- 예제2: 홀수번째 학생의 점수를 뽑고 싶다.\n\ntest_ndarray[::2]\n\narray([[202212380,        65,        55,        50,        40],\n       [202212363,        65,        90,        60,        30],\n       [202212312,        80,        30,        30,       100],\n       [202212463,        65,        45,        45,        90],\n       [202212400,        95,        65,        20,        10],\n       [202212318,        55,        75,        35,        25],\n       [202212443,        95,        55,        15,        35],\n       [202212458,        50,        55,        15,        85],\n       [202212482,        50,        50,        45,        10],\n       [202212387,        70,        70,        40,        35]])\n\n\n\ndf.iloc[::2]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212463\n      65\n      45\n      45\n      90\n    \n    \n      202212400\n      95\n      65\n      20\n      10\n    \n    \n      202212318\n      55\n      75\n      35\n      25\n    \n    \n      202212443\n      95\n      55\n      15\n      35\n    \n    \n      202212458\n      50\n      55\n      15\n      85\n    \n    \n      202212482\n      50\n      50\n      45\n      10\n    \n    \n      202212387\n      70\n      70\n      40\n      35\n    \n  \n\n\n\n\n- 예제3: 맨 끝에서 3명의 점수를 출력하고 싶다.\n\ntest_ndarray[-3:]\n\narray([[202212452,        65,        55,        15,        45],\n       [202212387,        70,        70,        40,        35],\n       [202212354,        90,        90,        80,        90]])\n\n\n\ndf.iloc[-3:]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212452\n      65\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      70\n      40\n      35\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n\ndf[-3:]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212452\n      65\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      70\n      40\n      35\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n- 예제4: 맨 끝에서 3명의 점수중 마지막 2개의 칼럼만 출력하고 싶다.\n\ntest_ndarray[-3:,-2:]\n\narray([[15, 45],\n       [40, 35],\n       [80, 90]])\n\n\n\ndf.iloc[-3:,-2:]\n\n\n\n\n\n  \n    \n      \n      mid\n      fin\n    \n  \n  \n    \n      202212452\n      15\n      45\n    \n    \n      202212387\n      40\n      35\n    \n    \n      202212354\n      80\n      90\n    \n  \n\n\n\n\n\n\n\n- 예제1: 중간고사 점수가 20점 이상이면서 동시에 출석점수가 60점미만인 학생들의 기말고사 점수를 출력\n(방법1) 데이터베이스 스타일\n\ndf.query(\"mid >= 20 and att <60\")\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212318\n      55\n      75\n      35\n      25\n    \n    \n      202212367\n      50\n      80\n      40\n      30\n    \n    \n      202212482\n      50\n      50\n      45\n      10\n    \n  \n\n\n\n\n\ndf.query(\"mid >= 20 and att <60\")['fin']\n\n202212488    80\n202212318    25\n202212367    30\n202212482    10\nName: fin, dtype: int64\n\n\n(방법2) 넘파이 스타일이라면?\n\ntest_ndarray\n\narray([[202212380,        65,        55,        50,        40],\n       [202212370,        95,       100,        50,        80],\n       [202212363,        65,        90,        60,        30],\n       [202212488,        55,        80,        75,        80],\n       [202212312,        80,        30,        30,       100],\n       [202212377,        75,        40,       100,        15],\n       [202212463,        65,        45,        45,        90],\n       [202212471,        60,        60,        25,         0],\n       [202212400,        95,        65,        20,        10],\n       [202212469,        90,        80,        80,        20],\n       [202212318,        55,        75,        35,        25],\n       [202212432,        95,        95,        45,         0],\n       [202212443,        95,        55,        15,        35],\n       [202212367,        50,        80,        40,        30],\n       [202212458,        50,        55,        15,        85],\n       [202212396,        95,        30,        30,        95],\n       [202212482,        50,        50,        45,        10],\n       [202212452,        65,        55,        15,        45],\n       [202212387,        70,        70,        40,        35],\n       [202212354,        90,        90,        80,        90]])\n\n\n\ntest_ndarray[:,3] >= 20  ## 중간고사가 20점이상\n\narray([ True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True, False,  True, False,  True,  True, False,\n        True,  True])\n\n\n\ntest_ndarray[:,1] < 60  ## 출석이 60미만\n\narray([False, False, False,  True, False, False, False, False, False,\n       False,  True, False, False,  True,  True, False,  True, False,\n       False, False])\n\n\n\n(test_ndarray[:,3] >= 20) & (test_ndarray[:,1] < 60)\n\narray([False, False, False,  True, False, False, False, False, False,\n       False,  True, False, False,  True, False, False,  True, False,\n       False, False])\n\n\n\nnote: test_ndarray[:,3] >= 20 & test_ndarray[:,1] < 60 와 같이 하면 에러가 난다. 조심하자!\n\n\ntest_ndarray[(test_ndarray[:,3] >= 20) & (test_ndarray[:,1] < 60),-1] # 이게 무슨코드야\n\narray([80, 25, 30, 10])\n\n\n\n구현난이도 어려움, 가독성 꽝\n\n- 예제2: ’중간고사점수<기말고사점수’인 학생들의 출석점수 평균을 구하자.\n\ndf.query('mid<fin')['att'].mean()\n\n76.66666666666667\n\n\n\n\n\n\n\n\n\n\n- 방법1: dictionary에서 만든다.\n\npd.DataFrame({'att':[30,40,50],'mid':[50,60,70]})\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      0\n      30\n      50\n    \n    \n      1\n      40\n      60\n    \n    \n      2\n      50\n      70\n    \n  \n\n\n\n\n\npd.DataFrame({'att':(30,40,50),'mid':(50,60,70)})\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      0\n      30\n      50\n    \n    \n      1\n      40\n      60\n    \n    \n      2\n      50\n      70\n    \n  \n\n\n\n\n\npd.DataFrame({'att':np.array([30,40,50]),'mid':np.array([50,60,70])})\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      0\n      30\n      50\n    \n    \n      1\n      40\n      60\n    \n    \n      2\n      50\n      70\n    \n  \n\n\n\n\n- 방법: 2차원 ndarray에서 만든다.\n\nnp.arange(2*3).reshape(2,3)\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n\npd.DataFrame(np.arange(2*3).reshape(2,3))\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n    \n  \n  \n    \n      0\n      0\n      1\n      2\n    \n    \n      1\n      3\n      4\n      5\n    \n  \n\n\n\n\n\n\n\n- 방법1: 딕셔너리를 통하여 만들면 딕셔너리의 key가 자동으로 열의 이름이 된다.\n\npd.DataFrame({'att':np.array([30,40,50]),'mid':np.array([50,60,70])})\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      0\n      30\n      50\n    \n    \n      1\n      40\n      60\n    \n    \n      2\n      50\n      70\n    \n  \n\n\n\n\n- 방법2: pd.DataFrame()의 옵션에 columns를 이용\n\npd.DataFrame(np.arange(2*3).reshape(2,3),columns=['X1','X2','X3'])\n\n\n\n\n\n  \n    \n      \n      X1\n      X2\n      X3\n    \n  \n  \n    \n      0\n      0\n      1\n      2\n    \n    \n      1\n      3\n      4\n      5\n    \n  \n\n\n\n\n- 방법3: df.columns에 원하는 열이름을 덮어씀 (1)\n\ndf=pd.DataFrame(np.arange(2*3).reshape(2,3))\ndf\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n    \n  \n  \n    \n      0\n      0\n      1\n      2\n    \n    \n      1\n      3\n      4\n      5\n    \n  \n\n\n\n\n\ndf.columns = ['X1','X2','X3']\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      X1\n      X2\n      X3\n    \n  \n  \n    \n      0\n      0\n      1\n      2\n    \n    \n      1\n      3\n      4\n      5\n    \n  \n\n\n\n\n\ndf.columns\n\nIndex(['X1', 'X2', 'X3'], dtype='object')\n\n\n- 방법4: df.columns에 원하는 열이름을 덮어씀 (2)\n\ndf=pd.DataFrame(np.arange(2*3).reshape(2,3))\ndf\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n    \n  \n  \n    \n      0\n      0\n      1\n      2\n    \n    \n      1\n      3\n      4\n      5\n    \n  \n\n\n\n\n\ndf.columns = pd.Index(['X1','X2','X3'])\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      X1\n      X2\n      X3\n    \n  \n  \n    \n      0\n      0\n      1\n      2\n    \n    \n      1\n      3\n      4\n      5\n    \n  \n\n\n\n\n방법4가 방법3의 방식보다 컴퓨터가 이해하기 좋다. (= 불필요한 에러를 방지할 수 있다)\n\ndf.columns, type(df.columns)\n\n(Index(['X1', 'X2', 'X3'], dtype='object'), pandas.core.indexes.base.Index)\n\n\n\n['X1','X2','X3'], type(['X1','X2','X3'])\n\n(['X1', 'X2', 'X3'], list)\n\n\n\npd.Index(['X1','X2','X3']), type(pd.Index(['X1','X2','X3']))\n\n(Index(['X1', 'X2', 'X3'], dtype='object'), pandas.core.indexes.base.Index)\n\n\n\n\n\n- 방법1: 중첩 dict이면 nested dic의 key가 알아서 행의 이름으로 된다.\n\npd.DataFrame({'att':{'guebin':30, 'iu':40, 'hynn':50} , 'mid':{'guebin':5, 'iu':45, 'hynn':90}})\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      guebin\n      30\n      5\n    \n    \n      iu\n      40\n      45\n    \n    \n      hynn\n      50\n      90\n    \n  \n\n\n\n\n- 방법2: pd.DataFrame()의 index 옵션 이용\n\npd.DataFrame({'att':[30,40,50] , 'mid':[5,45,90]}, index=['guebin','iu','hynn'])\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      guebin\n      30\n      5\n    \n    \n      iu\n      40\n      45\n    \n    \n      hynn\n      50\n      90\n    \n  \n\n\n\n\n- 방법3: df.index에 덮어씌움\n\ndf=pd.DataFrame({'att':[30,40,50] , 'mid':[5,45,90]})\ndf\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      0\n      30\n      5\n    \n    \n      1\n      40\n      45\n    \n    \n      2\n      50\n      90\n    \n  \n\n\n\n\n\ndf.index = pd.Index(['guebin','iu','hynn'])\n#df.index = ['guebin','iu','hynn'] <- 이것도 실행 되기는 된다.\ndf\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      guebin\n      30\n      5\n    \n    \n      iu\n      40\n      45\n    \n    \n      hynn\n      50\n      90\n    \n  \n\n\n\n\n- 방법4: df.set_index() 를 이용하여 덮어씌운다\n\ndf=pd.DataFrame({'att':[30,40,50] , 'mid':[5,45,90]})\ndf\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      0\n      30\n      5\n    \n    \n      1\n      40\n      45\n    \n    \n      2\n      50\n      90\n    \n  \n\n\n\n\n\ndf.set_index(pd.Index(['guebin','iu','hynn']))\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      guebin\n      30\n      5\n    \n    \n      iu\n      40\n      45\n    \n    \n      hynn\n      50\n      90\n    \n  \n\n\n\n\n(주의) 아래는 에러가 난다.\n\ndf.set_index(['guebin','iu','hynn'])\n\nKeyError: \"None of ['guebin', 'iu', 'hynn'] are in the columns\"\n\n\n\ndf.set_index([['guebin','iu','hynn']]) # 꺽쇠를 한번 더 넣어주면 에러를 피할수 있다. \n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      guebin\n      30\n      5\n    \n    \n      iu\n      40\n      45\n    \n    \n      hynn\n      50\n      90\n    \n  \n\n\n\n\n\n\n\n\ndf = pd.DataFrame({'att':[30,40,50],'mid':[5,45,90]})\ndf\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      0\n      30\n      5\n    \n    \n      1\n      40\n      45\n    \n    \n      2\n      50\n      90\n    \n  \n\n\n\n\n- type\n\ntype(df)\n\npandas.core.frame.DataFrame\n\n\n- len\n\nlen(df) # row의 갯수 \n\n3\n\n\n- shape\n\ndf.shape \n\n(3, 2)\n\n\n- for문의 반복변수\n\nfor k in df:\n    print(k) # 딕셔너리같죠\n\natt\nmid\n\n\n\nfor k in {'att':[30,40,50],'mid':[5,45,90]}: \n    print(k)\n\natt\nmid\n\n\n\n\n\n- 2차원 ndarray가 pd.DataFrame에 대응한다면 1차원 ndarray는 pd.Series에 대응한다.\n\na=pd.Series(np.random.randn(10))\na\n\n0    0.453758\n1   -0.716270\n2   -0.167750\n3    0.089546\n4    0.874006\n5    0.401627\n6    0.204911\n7    1.042722\n8   -0.352356\n9   -1.241658\ndtype: float64\n\n\n\ntype(a)\n\npandas.core.series.Series\n\n\n\nlen(a)\n\n10\n\n\n\na.shape\n\n(10,)\n\n\n\nfor value in a: \n    print(value)\n\n0.45375797778887145\n-0.7162702753778524\n-0.1677503294060748\n0.08954572073306402\n0.8740060519863648\n0.40162700372357163\n0.20491068603376858\n1.0427224662413124\n-0.3523562215445016\n-1.2416580554177619\n\n\n\n\n\n\n- 데이터\n\nnp.random.seed(43052)\natt = np.random.choice(np.arange(10,21)*5,20)\nrep = np.random.choice(np.arange(5,21)*5,20)\nmid = np.random.choice(np.arange(0,21)*5,20)\nfin = np.random.choice(np.arange(0,21)*5,20)\nkey = ['202212'+str(s) for s in np.random.choice(np.arange(300,501),20,replace=False)]\n\n\ndf=pd.DataFrame({'att':att,'rep':rep,'mid':mid,'fin':fin},index=key)\ndf\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212377\n      75\n      40\n      100\n      15\n    \n    \n      202212463\n      65\n      45\n      45\n      90\n    \n    \n      202212471\n      60\n      60\n      25\n      0\n    \n    \n      202212400\n      95\n      65\n      20\n      10\n    \n    \n      202212469\n      90\n      80\n      80\n      20\n    \n    \n      202212318\n      55\n      75\n      35\n      25\n    \n    \n      202212432\n      95\n      95\n      45\n      0\n    \n    \n      202212443\n      95\n      55\n      15\n      35\n    \n    \n      202212367\n      50\n      80\n      40\n      30\n    \n    \n      202212458\n      50\n      55\n      15\n      85\n    \n    \n      202212396\n      95\n      30\n      30\n      95\n    \n    \n      202212482\n      50\n      50\n      45\n      10\n    \n    \n      202212452\n      65\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      70\n      40\n      35\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n\n\n- 방법1\n\ndf.att\n\n202212380    65\n202212370    95\n202212363    65\n202212488    55\n202212312    80\n202212377    75\n202212463    65\n202212471    60\n202212400    95\n202212469    90\n202212318    55\n202212432    95\n202212443    95\n202212367    50\n202212458    50\n202212396    95\n202212482    50\n202212452    65\n202212387    70\n202212354    90\nName: att, dtype: int64\n\n\n- 방법2: dict스타일\n\ndf['att']\n\n202212380    65\n202212370    95\n202212363    65\n202212488    55\n202212312    80\n202212377    75\n202212463    65\n202212471    60\n202212400    95\n202212469    90\n202212318    55\n202212432    95\n202212443    95\n202212367    50\n202212458    50\n202212396    95\n202212482    50\n202212452    65\n202212387    70\n202212354    90\nName: att, dtype: int64\n\n\n- 방법3: dict스타일\n\ndf[['att']]\n\n\n\n\n\n  \n    \n      \n      att\n    \n  \n  \n    \n      202212380\n      65\n    \n    \n      202212370\n      95\n    \n    \n      202212363\n      65\n    \n    \n      202212488\n      55\n    \n    \n      202212312\n      80\n    \n    \n      202212377\n      75\n    \n    \n      202212463\n      65\n    \n    \n      202212471\n      60\n    \n    \n      202212400\n      95\n    \n    \n      202212469\n      90\n    \n    \n      202212318\n      55\n    \n    \n      202212432\n      95\n    \n    \n      202212443\n      95\n    \n    \n      202212367\n      50\n    \n    \n      202212458\n      50\n    \n    \n      202212396\n      95\n    \n    \n      202212482\n      50\n    \n    \n      202212452\n      65\n    \n    \n      202212387\n      70\n    \n    \n      202212354\n      90\n    \n  \n\n\n\n\n\ndf.att 나 df[‘att’]는 series를 리턴하고 df[[‘att’]]는 dataframe을 리턴한다.\n\n- 방법4: ndarray스타일\n\ndf.iloc[:,0] \n\n202212380    65\n202212370    95\n202212363    65\n202212488    55\n202212312    80\n202212377    75\n202212463    65\n202212471    60\n202212400    95\n202212469    90\n202212318    55\n202212432    95\n202212443    95\n202212367    50\n202212458    50\n202212396    95\n202212482    50\n202212452    65\n202212387    70\n202212354    90\nName: att, dtype: int64\n\n\n- 방법5: ndarray스타일\n\ndf.iloc[:,[0]]\n\n\n\n\n\n  \n    \n      \n      att\n    \n  \n  \n    \n      202212380\n      65\n    \n    \n      202212370\n      95\n    \n    \n      202212363\n      65\n    \n    \n      202212488\n      55\n    \n    \n      202212312\n      80\n    \n    \n      202212377\n      75\n    \n    \n      202212463\n      65\n    \n    \n      202212471\n      60\n    \n    \n      202212400\n      95\n    \n    \n      202212469\n      90\n    \n    \n      202212318\n      55\n    \n    \n      202212432\n      95\n    \n    \n      202212443\n      95\n    \n    \n      202212367\n      50\n    \n    \n      202212458\n      50\n    \n    \n      202212396\n      95\n    \n    \n      202212482\n      50\n    \n    \n      202212452\n      65\n    \n    \n      202212387\n      70\n    \n    \n      202212354\n      90\n    \n  \n\n\n\n\n\ndf.iloc[:,0]은 series를 리턴하고 df.iloc[:,[0]]은 dataframe을 리턴한다.\n\n- 방법6: ndarray 스타일과 dict 스타일의 혼합\n\ndf.loc[:,'att'] \n\n202212380    65\n202212370    95\n202212363    65\n202212488    55\n202212312    80\n202212377    75\n202212463    65\n202212471    60\n202212400    95\n202212469    90\n202212318    55\n202212432    95\n202212443    95\n202212367    50\n202212458    50\n202212396    95\n202212482    50\n202212452    65\n202212387    70\n202212354    90\nName: att, dtype: int64\n\n\n- 방법7: ndarray 스타일과 dict 스타일의 혼합\n\ndf.loc[:,['att']] \n\n\n\n\n\n  \n    \n      \n      att\n    \n  \n  \n    \n      202212380\n      65\n    \n    \n      202212370\n      95\n    \n    \n      202212363\n      65\n    \n    \n      202212488\n      55\n    \n    \n      202212312\n      80\n    \n    \n      202212377\n      75\n    \n    \n      202212463\n      65\n    \n    \n      202212471\n      60\n    \n    \n      202212400\n      95\n    \n    \n      202212469\n      90\n    \n    \n      202212318\n      55\n    \n    \n      202212432\n      95\n    \n    \n      202212443\n      95\n    \n    \n      202212367\n      50\n    \n    \n      202212458\n      50\n    \n    \n      202212396\n      95\n    \n    \n      202212482\n      50\n    \n    \n      202212452\n      65\n    \n    \n      202212387\n      70\n    \n    \n      202212354\n      90\n    \n  \n\n\n\n\n\ndf.loc[:,‘att’]은 series를 리턴하고 df.loc[:,[‘att’]]은 dataframe을 리턴한다.\n\n- 방법7: nparray 스타일 + bool 인덱싱\n\ndf.iloc[:,[True,False,False,False]]\n\n\n\n\n\n  \n    \n      \n      att\n    \n  \n  \n    \n      202212380\n      65\n    \n    \n      202212370\n      95\n    \n    \n      202212363\n      65\n    \n    \n      202212488\n      55\n    \n    \n      202212312\n      80\n    \n    \n      202212377\n      75\n    \n    \n      202212463\n      65\n    \n    \n      202212471\n      60\n    \n    \n      202212400\n      95\n    \n    \n      202212469\n      90\n    \n    \n      202212318\n      55\n    \n    \n      202212432\n      95\n    \n    \n      202212443\n      95\n    \n    \n      202212367\n      50\n    \n    \n      202212458\n      50\n    \n    \n      202212396\n      95\n    \n    \n      202212482\n      50\n    \n    \n      202212452\n      65\n    \n    \n      202212387\n      70\n    \n    \n      202212354\n      90\n    \n  \n\n\n\n\n- 방법8: ndarray와 dict의 홉합형 + bool 인덱싱\n\ndf.loc[:,[True,False,False,False]]\n\n\n\n\n\n  \n    \n      \n      att\n    \n  \n  \n    \n      202212380\n      65\n    \n    \n      202212370\n      95\n    \n    \n      202212363\n      65\n    \n    \n      202212488\n      55\n    \n    \n      202212312\n      80\n    \n    \n      202212377\n      75\n    \n    \n      202212463\n      65\n    \n    \n      202212471\n      60\n    \n    \n      202212400\n      95\n    \n    \n      202212469\n      90\n    \n    \n      202212318\n      55\n    \n    \n      202212432\n      95\n    \n    \n      202212443\n      95\n    \n    \n      202212367\n      50\n    \n    \n      202212458\n      50\n    \n    \n      202212396\n      95\n    \n    \n      202212482\n      50\n    \n    \n      202212452\n      65\n    \n    \n      202212387\n      70\n    \n    \n      202212354\n      90\n    \n  \n\n\n\n\n\n\n\n- 방법1: dict 스타일\n\ndf[['att','fin']]\n\n\n\n\n\n  \n    \n      \n      att\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      40\n    \n    \n      202212370\n      95\n      80\n    \n    \n      202212363\n      65\n      30\n    \n    \n      202212488\n      55\n      80\n    \n    \n      202212312\n      80\n      100\n    \n    \n      202212377\n      75\n      15\n    \n    \n      202212463\n      65\n      90\n    \n    \n      202212471\n      60\n      0\n    \n    \n      202212400\n      95\n      10\n    \n    \n      202212469\n      90\n      20\n    \n    \n      202212318\n      55\n      25\n    \n    \n      202212432\n      95\n      0\n    \n    \n      202212443\n      95\n      35\n    \n    \n      202212367\n      50\n      30\n    \n    \n      202212458\n      50\n      85\n    \n    \n      202212396\n      95\n      95\n    \n    \n      202212482\n      50\n      10\n    \n    \n      202212452\n      65\n      45\n    \n    \n      202212387\n      70\n      35\n    \n    \n      202212354\n      90\n      90\n    \n  \n\n\n\n\n- 방법2: ndarray 스타일 (정수리스트로 인덱싱, 슬라이싱, 스트라이딩)\n\ndf.iloc[:,[0,1]] # 정수의 리스트를 전달하여 컬럼추출\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n    \n  \n  \n    \n      202212380\n      65\n      55\n    \n    \n      202212370\n      95\n      100\n    \n    \n      202212363\n      65\n      90\n    \n    \n      202212488\n      55\n      80\n    \n    \n      202212312\n      80\n      30\n    \n    \n      202212377\n      75\n      40\n    \n    \n      202212463\n      65\n      45\n    \n    \n      202212471\n      60\n      60\n    \n    \n      202212400\n      95\n      65\n    \n    \n      202212469\n      90\n      80\n    \n    \n      202212318\n      55\n      75\n    \n    \n      202212432\n      95\n      95\n    \n    \n      202212443\n      95\n      55\n    \n    \n      202212367\n      50\n      80\n    \n    \n      202212458\n      50\n      55\n    \n    \n      202212396\n      95\n      30\n    \n    \n      202212482\n      50\n      50\n    \n    \n      202212452\n      65\n      55\n    \n    \n      202212387\n      70\n      70\n    \n    \n      202212354\n      90\n      90\n    \n  \n\n\n\n\n\ndf.iloc[:,range(2)] \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n    \n  \n  \n    \n      202212380\n      65\n      55\n    \n    \n      202212370\n      95\n      100\n    \n    \n      202212363\n      65\n      90\n    \n    \n      202212488\n      55\n      80\n    \n    \n      202212312\n      80\n      30\n    \n    \n      202212377\n      75\n      40\n    \n    \n      202212463\n      65\n      45\n    \n    \n      202212471\n      60\n      60\n    \n    \n      202212400\n      95\n      65\n    \n    \n      202212469\n      90\n      80\n    \n    \n      202212318\n      55\n      75\n    \n    \n      202212432\n      95\n      95\n    \n    \n      202212443\n      95\n      55\n    \n    \n      202212367\n      50\n      80\n    \n    \n      202212458\n      50\n      55\n    \n    \n      202212396\n      95\n      30\n    \n    \n      202212482\n      50\n      50\n    \n    \n      202212452\n      65\n      55\n    \n    \n      202212387\n      70\n      70\n    \n    \n      202212354\n      90\n      90\n    \n  \n\n\n\n\n\ndf.iloc[:,:2]  # 슬라이싱 , 0,1,2에서 마지막 2는 제외되고 0,1에 해당하는 것만 추출\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n    \n  \n  \n    \n      202212380\n      65\n      55\n    \n    \n      202212370\n      95\n      100\n    \n    \n      202212363\n      65\n      90\n    \n    \n      202212488\n      55\n      80\n    \n    \n      202212312\n      80\n      30\n    \n    \n      202212377\n      75\n      40\n    \n    \n      202212463\n      65\n      45\n    \n    \n      202212471\n      60\n      60\n    \n    \n      202212400\n      95\n      65\n    \n    \n      202212469\n      90\n      80\n    \n    \n      202212318\n      55\n      75\n    \n    \n      202212432\n      95\n      95\n    \n    \n      202212443\n      95\n      55\n    \n    \n      202212367\n      50\n      80\n    \n    \n      202212458\n      50\n      55\n    \n    \n      202212396\n      95\n      30\n    \n    \n      202212482\n      50\n      50\n    \n    \n      202212452\n      65\n      55\n    \n    \n      202212387\n      70\n      70\n    \n    \n      202212354\n      90\n      90\n    \n  \n\n\n\n\n\ndf.iloc[:,::2]  # 스트라이딩\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      202212380\n      65\n      50\n    \n    \n      202212370\n      95\n      50\n    \n    \n      202212363\n      65\n      60\n    \n    \n      202212488\n      55\n      75\n    \n    \n      202212312\n      80\n      30\n    \n    \n      202212377\n      75\n      100\n    \n    \n      202212463\n      65\n      45\n    \n    \n      202212471\n      60\n      25\n    \n    \n      202212400\n      95\n      20\n    \n    \n      202212469\n      90\n      80\n    \n    \n      202212318\n      55\n      35\n    \n    \n      202212432\n      95\n      45\n    \n    \n      202212443\n      95\n      15\n    \n    \n      202212367\n      50\n      40\n    \n    \n      202212458\n      50\n      15\n    \n    \n      202212396\n      95\n      30\n    \n    \n      202212482\n      50\n      45\n    \n    \n      202212452\n      65\n      15\n    \n    \n      202212387\n      70\n      40\n    \n    \n      202212354\n      90\n      80\n    \n  \n\n\n\n\n- 방법3: ndarray 와 dict의 혼합형\n\ndf.loc[:,['att','mid']] \n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      202212380\n      65\n      50\n    \n    \n      202212370\n      95\n      50\n    \n    \n      202212363\n      65\n      60\n    \n    \n      202212488\n      55\n      75\n    \n    \n      202212312\n      80\n      30\n    \n    \n      202212377\n      75\n      100\n    \n    \n      202212463\n      65\n      45\n    \n    \n      202212471\n      60\n      25\n    \n    \n      202212400\n      95\n      20\n    \n    \n      202212469\n      90\n      80\n    \n    \n      202212318\n      55\n      35\n    \n    \n      202212432\n      95\n      45\n    \n    \n      202212443\n      95\n      15\n    \n    \n      202212367\n      50\n      40\n    \n    \n      202212458\n      50\n      15\n    \n    \n      202212396\n      95\n      30\n    \n    \n      202212482\n      50\n      45\n    \n    \n      202212452\n      65\n      15\n    \n    \n      202212387\n      70\n      40\n    \n    \n      202212354\n      90\n      80\n    \n  \n\n\n\n\n\ndf.loc[:,'att':'mid']  # 마지막의 mid도 포함된다. \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n    \n    \n      202212370\n      95\n      100\n      50\n    \n    \n      202212363\n      65\n      90\n      60\n    \n    \n      202212488\n      55\n      80\n      75\n    \n    \n      202212312\n      80\n      30\n      30\n    \n    \n      202212377\n      75\n      40\n      100\n    \n    \n      202212463\n      65\n      45\n      45\n    \n    \n      202212471\n      60\n      60\n      25\n    \n    \n      202212400\n      95\n      65\n      20\n    \n    \n      202212469\n      90\n      80\n      80\n    \n    \n      202212318\n      55\n      75\n      35\n    \n    \n      202212432\n      95\n      95\n      45\n    \n    \n      202212443\n      95\n      55\n      15\n    \n    \n      202212367\n      50\n      80\n      40\n    \n    \n      202212458\n      50\n      55\n      15\n    \n    \n      202212396\n      95\n      30\n      30\n    \n    \n      202212482\n      50\n      50\n      45\n    \n    \n      202212452\n      65\n      55\n      15\n    \n    \n      202212387\n      70\n      70\n      40\n    \n    \n      202212354\n      90\n      90\n      80\n    \n  \n\n\n\n\n\ndf.loc[:,'rep':] \n\n\n\n\n\n  \n    \n      \n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      55\n      50\n      40\n    \n    \n      202212370\n      100\n      50\n      80\n    \n    \n      202212363\n      90\n      60\n      30\n    \n    \n      202212488\n      80\n      75\n      80\n    \n    \n      202212312\n      30\n      30\n      100\n    \n    \n      202212377\n      40\n      100\n      15\n    \n    \n      202212463\n      45\n      45\n      90\n    \n    \n      202212471\n      60\n      25\n      0\n    \n    \n      202212400\n      65\n      20\n      10\n    \n    \n      202212469\n      80\n      80\n      20\n    \n    \n      202212318\n      75\n      35\n      25\n    \n    \n      202212432\n      95\n      45\n      0\n    \n    \n      202212443\n      55\n      15\n      35\n    \n    \n      202212367\n      80\n      40\n      30\n    \n    \n      202212458\n      55\n      15\n      85\n    \n    \n      202212396\n      30\n      30\n      95\n    \n    \n      202212482\n      50\n      45\n      10\n    \n    \n      202212452\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      40\n      35\n    \n    \n      202212354\n      90\n      80\n      90\n    \n  \n\n\n\n\n- 방법4: bool을 이용한 인덱싱\n\ndf.iloc[:,[True,False,True,False]]\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      202212380\n      65\n      50\n    \n    \n      202212370\n      95\n      50\n    \n    \n      202212363\n      65\n      60\n    \n    \n      202212488\n      55\n      75\n    \n    \n      202212312\n      80\n      30\n    \n    \n      202212377\n      75\n      100\n    \n    \n      202212463\n      65\n      45\n    \n    \n      202212471\n      60\n      25\n    \n    \n      202212400\n      95\n      20\n    \n    \n      202212469\n      90\n      80\n    \n    \n      202212318\n      55\n      35\n    \n    \n      202212432\n      95\n      45\n    \n    \n      202212443\n      95\n      15\n    \n    \n      202212367\n      50\n      40\n    \n    \n      202212458\n      50\n      15\n    \n    \n      202212396\n      95\n      30\n    \n    \n      202212482\n      50\n      45\n    \n    \n      202212452\n      65\n      15\n    \n    \n      202212387\n      70\n      40\n    \n    \n      202212354\n      90\n      80\n    \n  \n\n\n\n\n\ndf.loc[:,[True,False,True,False]]\n\n\n\n\n\n  \n    \n      \n      att\n      mid\n    \n  \n  \n    \n      202212380\n      65\n      50\n    \n    \n      202212370\n      95\n      50\n    \n    \n      202212363\n      65\n      60\n    \n    \n      202212488\n      55\n      75\n    \n    \n      202212312\n      80\n      30\n    \n    \n      202212377\n      75\n      100\n    \n    \n      202212463\n      65\n      45\n    \n    \n      202212471\n      60\n      25\n    \n    \n      202212400\n      95\n      20\n    \n    \n      202212469\n      90\n      80\n    \n    \n      202212318\n      55\n      35\n    \n    \n      202212432\n      95\n      45\n    \n    \n      202212443\n      95\n      15\n    \n    \n      202212367\n      50\n      40\n    \n    \n      202212458\n      50\n      15\n    \n    \n      202212396\n      95\n      30\n    \n    \n      202212482\n      50\n      45\n    \n    \n      202212452\n      65\n      15\n    \n    \n      202212387\n      70\n      40\n    \n    \n      202212354\n      90\n      80\n    \n  \n\n\n\n\n\n\n\n- 방법1\n\ndf.iloc[0]\n\natt    65\nrep    55\nmid    50\nfin    40\nName: 202212380, dtype: int64\n\n\n- 방법2\n\ndf.iloc[[0]]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n  \n\n\n\n\n- 방법3\n\ndf.iloc[0,:]\n\natt    65\nrep    55\nmid    50\nfin    40\nName: 202212380, dtype: int64\n\n\n- 방법4\n\ndf.iloc[[0],:]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n  \n\n\n\n\n- 방법5\n\ndf.loc['202212380']\n\natt    65\nrep    55\nmid    50\nfin    40\nName: 202212380, dtype: int64\n\n\n- 방법6\n\ndf.loc[['202212380']]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n  \n\n\n\n\n- 방법7\n\ndf.loc['202212380',:]\n\natt    65\nrep    55\nmid    50\nfin    40\nName: 202212380, dtype: int64\n\n\n- 방법8\n\ndf.loc[['202212380'],:]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n  \n\n\n\n\n- 방법9\n\nlen(df)\n\n20\n\n\n\n_lst = [True]+[False]*19\n\n\ndf.iloc[_lst] \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n  \n\n\n\n\n\ndf.iloc[_lst,:] \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n  \n\n\n\n\n\ndf.loc[_lst] \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n  \n\n\n\n\n\ndf.loc[_lst,:] \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n  \n\n\n\n\n\n\n\n- 방법1\n\ndf.iloc[[0,2]] \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n  \n\n\n\n\n\ndf.iloc[[0,2],:] \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n  \n\n\n\n\n- 방법2\n\ndf.loc[['202212380','202212363']] \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n  \n\n\n\n\n\ndf.loc[['202212380','202212363'],:] \n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n  \n\n\n\n\n- 그 밖의 방법들\n\ndf.iloc[::3] # 스트라이딩\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212463\n      65\n      45\n      45\n      90\n    \n    \n      202212469\n      90\n      80\n      80\n      20\n    \n    \n      202212443\n      95\n      55\n      15\n      35\n    \n    \n      202212396\n      95\n      30\n      30\n      95\n    \n    \n      202212387\n      70\n      70\n      40\n      35\n    \n  \n\n\n\n\n\ndf.iloc[:5]\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n  \n\n\n\n\n\ndf.loc[:'202212312']\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n  \n\n\n\n\n\ndf.loc[list(df.att<80),'rep':]\n\n\n\n\n\n  \n    \n      \n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      55\n      50\n      40\n    \n    \n      202212363\n      90\n      60\n      30\n    \n    \n      202212488\n      80\n      75\n      80\n    \n    \n      202212377\n      40\n      100\n      15\n    \n    \n      202212463\n      45\n      45\n      90\n    \n    \n      202212471\n      60\n      25\n      0\n    \n    \n      202212318\n      75\n      35\n      25\n    \n    \n      202212367\n      80\n      40\n      30\n    \n    \n      202212458\n      55\n      15\n      85\n    \n    \n      202212482\n      50\n      45\n      10\n    \n    \n      202212452\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      40\n      35\n    \n  \n\n\n\n\n\ndf.loc[df.att<80,'rep':]\n\n\n\n\n\n  \n    \n      \n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      55\n      50\n      40\n    \n    \n      202212363\n      90\n      60\n      30\n    \n    \n      202212488\n      80\n      75\n      80\n    \n    \n      202212377\n      40\n      100\n      15\n    \n    \n      202212463\n      45\n      45\n      90\n    \n    \n      202212471\n      60\n      25\n      0\n    \n    \n      202212318\n      75\n      35\n      25\n    \n    \n      202212367\n      80\n      40\n      30\n    \n    \n      202212458\n      55\n      15\n      85\n    \n    \n      202212482\n      50\n      45\n      10\n    \n    \n      202212452\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      40\n      35\n    \n  \n\n\n\n\n\ndf.iloc[list(df.att<80),1:]\n\n\n\n\n\n  \n    \n      \n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      55\n      50\n      40\n    \n    \n      202212363\n      90\n      60\n      30\n    \n    \n      202212488\n      80\n      75\n      80\n    \n    \n      202212377\n      40\n      100\n      15\n    \n    \n      202212463\n      45\n      45\n      90\n    \n    \n      202212471\n      60\n      25\n      0\n    \n    \n      202212318\n      75\n      35\n      25\n    \n    \n      202212367\n      80\n      40\n      30\n    \n    \n      202212458\n      55\n      15\n      85\n    \n    \n      202212482\n      50\n      45\n      10\n    \n    \n      202212452\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      40\n      35\n    \n  \n\n\n\n\n- 아래는 에러가 난다 주의!\n\ndf.iloc[df.att<80,1:]\n\nValueError: Location based indexing can only have [integer, integer slice (START point is INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types\n\n\n\n\n\n- 예제1\n\ndf.query('att==90 and mid>30')\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212469\n      90\n      80\n      80\n      20\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n- 예제2\n\ndf.query('att<rep and mid<fin')\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212458\n      50\n      55\n      15\n      85\n    \n  \n\n\n\n\n- 예제3\n\ndf.query('att < rep < 80')\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212318\n      55\n      75\n      35\n      25\n    \n    \n      202212458\n      50\n      55\n      15\n      85\n    \n  \n\n\n\n\n- 예제4\n\ndf.query('50 < att <= 90 and mid < fin')\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212463\n      65\n      45\n      45\n      90\n    \n    \n      202212452\n      65\n      55\n      15\n      45\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n- 예제5\n\ndf.query(' (mid+fin)/2 >=60')\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212463\n      65\n      45\n      45\n      90\n    \n    \n      202212396\n      95\n      30\n      30\n      95\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n- 예제6\n\n_mean  = df.att.mean()\n_mean \n\n73.0\n\n\n\ndf.query('att >= 73')\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212377\n      75\n      40\n      100\n      15\n    \n    \n      202212400\n      95\n      65\n      20\n      10\n    \n    \n      202212469\n      90\n      80\n      80\n      20\n    \n    \n      202212432\n      95\n      95\n      45\n      0\n    \n    \n      202212443\n      95\n      55\n      15\n      35\n    \n    \n      202212396\n      95\n      30\n      30\n      95\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n\ndf.query('att >= @_mean')\n# df.query('att>= _mean')은 실행 안된다.\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212377\n      75\n      40\n      100\n      15\n    \n    \n      202212400\n      95\n      65\n      20\n      10\n    \n    \n      202212469\n      90\n      80\n      80\n      20\n    \n    \n      202212432\n      95\n      95\n      45\n      0\n    \n    \n      202212443\n      95\n      55\n      15\n      35\n    \n    \n      202212396\n      95\n      30\n      30\n      95\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n- 예제7\n\ndf\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212380\n      65\n      55\n      50\n      40\n    \n    \n      202212370\n      95\n      100\n      50\n      80\n    \n    \n      202212363\n      65\n      90\n      60\n      30\n    \n    \n      202212488\n      55\n      80\n      75\n      80\n    \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212377\n      75\n      40\n      100\n      15\n    \n    \n      202212463\n      65\n      45\n      45\n      90\n    \n    \n      202212471\n      60\n      60\n      25\n      0\n    \n    \n      202212400\n      95\n      65\n      20\n      10\n    \n    \n      202212469\n      90\n      80\n      80\n      20\n    \n    \n      202212318\n      55\n      75\n      35\n      25\n    \n    \n      202212432\n      95\n      95\n      45\n      0\n    \n    \n      202212443\n      95\n      55\n      15\n      35\n    \n    \n      202212367\n      50\n      80\n      40\n      30\n    \n    \n      202212458\n      50\n      55\n      15\n      85\n    \n    \n      202212396\n      95\n      30\n      30\n      95\n    \n    \n      202212482\n      50\n      50\n      45\n      10\n    \n    \n      202212452\n      65\n      55\n      15\n      45\n    \n    \n      202212387\n      70\n      70\n      40\n      35\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n\ndf.query(\"index <= '202212354' or index=='202212387'\")\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      202212312\n      80\n      30\n      30\n      100\n    \n    \n      202212318\n      55\n      75\n      35\n      25\n    \n    \n      202212387\n      70\n      70\n      40\n      35\n    \n    \n      202212354\n      90\n      90\n      80\n      90\n    \n  \n\n\n\n\n사실 이 기능은 시계열자료에서 꽃핀다.\n- 예제8\n\npd.date_range('20211226',periods=10)\n\nDatetimeIndex(['2021-12-26', '2021-12-27', '2021-12-28', '2021-12-29',\n               '2021-12-30', '2021-12-31', '2022-01-01', '2022-01-02',\n               '2022-01-03', '2022-01-04'],\n              dtype='datetime64[ns]', freq='D')\n\n\n\n_df=pd.DataFrame(np.random.normal(size=(10,4)),columns=list('ABCD'),index=pd.date_range('20211226',periods=10))\n_df\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      D\n    \n  \n  \n    \n      2021-12-26\n      -0.367399\n      0.925727\n      -0.378494\n      -1.597765\n    \n    \n      2021-12-27\n      -0.016530\n      1.041946\n      1.511319\n      -0.970646\n    \n    \n      2021-12-28\n      -1.556636\n      1.629024\n      -0.965807\n      0.309184\n    \n    \n      2021-12-29\n      0.554734\n      0.712753\n      0.769650\n      0.277420\n    \n    \n      2021-12-30\n      -0.897457\n      0.110547\n      1.026816\n      0.294377\n    \n    \n      2021-12-31\n      0.904037\n      -0.809864\n      0.473510\n      -0.047875\n    \n    \n      2022-01-01\n      -0.850946\n      -0.915568\n      -1.549329\n      -0.040507\n    \n    \n      2022-01-02\n      0.054391\n      -0.732693\n      0.409205\n      -1.165549\n    \n    \n      2022-01-03\n      0.053472\n      0.800553\n      -0.040499\n      -0.447199\n    \n    \n      2022-01-04\n      -0.304462\n      1.257485\n      0.888741\n      0.615561\n    \n  \n\n\n\n\n\n_df.query(\" '2021-12-29' <=  index <= '2022-01-03' \")\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      D\n    \n  \n  \n    \n      2021-12-29\n      0.554734\n      0.712753\n      0.769650\n      0.277420\n    \n    \n      2021-12-30\n      -0.897457\n      0.110547\n      1.026816\n      0.294377\n    \n    \n      2021-12-31\n      0.904037\n      -0.809864\n      0.473510\n      -0.047875\n    \n    \n      2022-01-01\n      -0.850946\n      -0.915568\n      -1.549329\n      -0.040507\n    \n    \n      2022-01-02\n      0.054391\n      -0.732693\n      0.409205\n      -1.165549\n    \n    \n      2022-01-03\n      0.053472\n      0.800553\n      -0.040499\n      -0.447199\n    \n  \n\n\n\n\n\n_df.query(\" '2021-12-29' <=  index <= '2022-01-03' and A+B<C  \")\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      D\n    \n  \n  \n    \n      2021-12-30\n      -0.897457\n      0.110547\n      1.026816\n      0.294377\n    \n    \n      2021-12-31\n      0.904037\n      -0.809864\n      0.473510\n      -0.047875\n    \n    \n      2022-01-01\n      -0.850946\n      -0.915568\n      -1.549329\n      -0.040507\n    \n    \n      2022-01-02\n      0.054391\n      -0.732693\n      0.409205\n      -1.165549\n    \n  \n\n\n\n\n- query가 만능은 아니다.\n\ndf.columns = pd.Index(['att score', 'rep score', 'mid score', 'fin score'])\n\n\ndf.query(\" att score < 90 \")\n# df.loc[df['att score'] < 90,:] <-- 이렇게 구현하면 된다! (아니면 변수이름을 바꿔주는 코드를 짜든가)\n\nSyntaxError: invalid syntax (<unknown>, line 1)\n\n\n\n\n\n\n\n\n\nndarray = np.arange(2*3).reshape(2,3)\ndf = pd.DataFrame(ndarray)\ndf\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n    \n  \n  \n    \n      0\n      0\n      1\n      2\n    \n    \n      1\n      3\n      4\n      5\n    \n  \n\n\n\n\n\nndarray.T\n\narray([[0, 3],\n       [1, 4],\n       [2, 5]])\n\n\n\ndf.T\n\n\n\n\n\n  \n    \n      \n      0\n      1\n    \n  \n  \n    \n      0\n      0\n      3\n    \n    \n      1\n      1\n      4\n    \n    \n      2\n      2\n      5\n    \n  \n\n\n\n\n\n\n\n\nndarray.sum(axis=0)\n\narray([3, 5, 7])\n\n\n\ndf.sum(axis=0)\n\n0    3\n1    5\n2    7\ndtype: int64\n\n\n\nndarray.sum(axis=1)\n\narray([ 3, 12])\n\n\n\ndf.sum(axis=1)\n\n0     3\n1    12\ndtype: int64\n\n\n\n\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n    \n  \n  \n    \n      0\n      0\n      1\n      2\n    \n    \n      1\n      3\n      4\n      5\n    \n  \n\n\n\n\n\nndarray.cumsum(axis=0)\n\narray([[0, 1, 2],\n       [3, 5, 7]])\n\n\n\ndf.cumsum(axis=0)\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n    \n  \n  \n    \n      0\n      0\n      1\n      2\n    \n    \n      1\n      3\n      5\n      7\n    \n  \n\n\n\n\n\nndarray.cumsum(axis=1)\n\narray([[ 0,  1,  3],\n       [ 3,  7, 12]])\n\n\n\ndf.cumsum(axis=1)\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n    \n  \n  \n    \n      0\n      0\n      1\n      3\n    \n    \n      1\n      3\n      7\n      12\n    \n  \n\n\n\n\n\n\n\n\nndarray.tolist()\n\n[[0, 1, 2], [3, 4, 5]]\n\n\n\ndf.to_dict()\n\n{0: {0: 0, 1: 3}, 1: {0: 1, 1: 4}, 2: {0: 2, 1: 5}}\n\n\n\ndf.to_numpy()\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n\ndf.to_numpy().tolist()\n\n[[0, 1, 2], [3, 4, 5]]\n\n\n\n\n\n\n\n\n\n생략\n\n\n\n\n- 아래의 데이터프레임에서 1,3번째 열을 추출하라.\n\ndf= pd.DataFrame({'att':[90,90,95],'rep':[80,90,90],'mid':[50,60,70], 'fin':[70,80,50]})\ndf\n\n\n\n\n\n  \n    \n      \n      att\n      rep\n      mid\n      fin\n    \n  \n  \n    \n      0\n      90\n      80\n      50\n      70\n    \n    \n      1\n      90\n      90\n      60\n      80\n    \n    \n      2\n      95\n      90\n      70\n      50"
  },
  {
    "objectID": "posts/2022-03-28-(4주차) 3월28일.html",
    "href": "posts/2022-03-28-(4주차) 3월28일.html",
    "title": "PP2023",
    "section": "",
    "text": "(4주차) 3월23일\n\n개발환경의 변천사, 1세대 프로그래머부터 5세대 프로그래머까지\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n강의영상\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-zcnjAged1xIatgznRTy93c\n\n- (1/8) 파이썬이 어려웠던 이유\n- (2/8) 1세대 프로그래머\n- (3/8) 1세대 프로그래머의 삶 with python\n- (4/8) 1세대 프로그래머의 삶 with ipython\n- (5/8) 2세대 프로그래머, 3세대 프로그래머 (1)\n- (6/8) 3세대 프로그래머(2), 4세대 프로그래머\n- (7/8) 5세대 프로그래머\n- (8/8) 다양한 개발환경 구축방법 다시 리뷰, 숙제설명\n\n\n파이썬이 어려웠던 이유\n- 파이썬 배우는 초보자에게 가장 어려운것! - 선생님마다 설치하는 방법이 모두 다름\n- 왜 저렇게 설치방법이 다른가? 왜 다른 방법으로 각각 파이썬을 실행하는가? 이런것이 너무 어려움 - 방법1: 파이썬프로그램 다운로드 -> 시작버튼 눌러서 설치 - 방법2: 아나콘다 설치 (그럼 자동으로 파이썬이 설치됨) - 방법3: 아나콘다 설치 + 가상환경 - …\n- 심지어 실행하는것도 다름 - 방법1: 파이썬 프롬프트 - 방법2: .py를 이용하여 실행? - 방법3: IDLE - 방법4: 파이참 - 방법5: 스파이더 - 방법6: Visual Studio Code - 방법7: 주피터노트북, 주피터랩 - 가상환경을 만들어서 해라.. - 아나콘다 네비게이터에 주피터가 있다.. - …\n- 머리아프니까 collab을 쓰라는 사람도 있음. 아니면 도커이미지를 줄테니까 그걸 쓰라는 사람도 있음. AWS를 쓰라는 사람도 있음.. \\(\\to\\) 이게 더 머리아픔\n- 핵심: 그냥 (1) 컴퓨터에 (2) 파이썬을 깔아서 (3) 실행하는 것임\n- 의문: 그런데 방법이 왜이렇게 많은가? 엑셀처럼 프로그램 설치하고 아이콘 더블클릭하면 끝나는 식으로 만들어야 하는것 아닌가?\n\n개발환경 구축방법이 많은 이유?\n- 파이썬 개발환경 구축은 수많은 방법이 있다.\n- 이는 마치 라면의 레시피를 검색하면 수많은 방법이 나오는것과 유사함. - 방법1: 스프를 먼저 넣고 끓인다음 라면을 넣어야 합니다. - 방법2: 양은냄비에 물넣고 물이 끊으면 라면과 스프를 같이 넣고 마지막에 계란을 넣는다. - 방법3: 먹다남은 삼겹살을 후라이팬에 볶은다음에 물을 붓고 라면을 넣는다. - 방법4: 용기에 라면+스프+뜨거운물 랩을 씌운뒤에 젓가락으로 구멍을 뚫고 전자렌지에 돌린다. - …\n- 우리는 모든 방법을 나열할 순 없지만 모든 방법을 이해할 수 있다. 왜냐하면 라면을 끓이는 공통적인 맥락을 우리는 알고 있으니까\n- 파이썬을 설치하는 다양한 방법 역시 공통맥락을 파악하면 이해하기 쉽다.\n- 제목적: 파이썬을 설치하고 실행하는 공통맥락을 설명하고 싶음\n- 설치하는 방법이 다양한 이유? 파이썬이 인기있음 + 다양한 방법을 설치를 하면 각자의 장점이 뚜렷해서\n\n\n\n1세대 프로그래머\n\npython\n- 윈도우에서 anaconda prompt 실행 -> python\n(base) C:\\Users\\python>python\nPython 3.9.7 (default, Sep 16 2021, 16:59:28) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> [1,2,3]+[4]\n[1, 2, 3, 4]\n>>> a=[1,2,3]+[4]\n>>> a\n[1, 2, 3, 4]\n- 2개를 실행할 수도 있음. (두 환경은 각각 서로 독립적인 파이썬, 변수가 공유되지 않음) \\(\\star\\)\n- 아쉬운점: `?list’와 같이 도움말 기능이 동작하지 않음\n>>> ?list\n  File \"<stdin>\", line 1\n    ?list\n    ^\nSyntaxError: invalid syntax\n>>> \n\n\nipython\n- 윈도우에서 anaconda prompt 실행 -> ipython\n(base) C:\\Users\\python>ipython\nPython 3.9.7 (default, Sep 16 2021, 16:59:28) [MSC v.1916 64 bit (AMD64)]\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.29.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: a=[1,2,3]\n\nIn [2]: a\nOut[2]: [1, 2, 3]\n\nIn [3]: a+[4]\nOut[3]: [1, 2, 3, 4]\n- ?list가 가능\nIn [4]: ?list\nInit signature: list(iterable=(), /)\nDocstring:\nBuilt-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.\nType:           type\nSubclasses:     _HashedSeq, StackSummary, DeferredConfigList, SList, _ImmutableLineList, FormattedText, NodeList, _ExplodedList, Stack, _Accumulator, ...\n\n- 색깔이 알록달록해서 문법을 보기 편하다. (구문강조)\n\n\n1세대 프로그래머의 삶 with python\n- 1부터 10까지 합을 구하는 프로그램을 만들고 싶음\n- 시도1: python을 키고 아래와 같이 실행\n(base) C:\\Users\\python>python\nPython 3.9.7 (default, Sep 16 2021, 16:59:28) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> total = 0\n>>> for i in range(10):\n...     total=total+i\n...\n>>> total\n45\n>>>\n- 반성: 정답은 55인데 45가 출력되었다! \\(\\to\\) range(10)을 range(1,11)으로 바꿔야겠다!\n- 시도2: range(1,11)을 바꿔야겠다고 생각하고 다시 입력하다가 오타가 발생\n>>> total =0\n>>> for i in range(1,11):\n...     total = totla +i\n...\n\n앗 totla이라고 잘못쳤다.\n\n- 반성: 다음에는 정신을 똑바로 차려야겠다.\n- 불편한점: … 다..\n\n\n1세대 프로그래머의 삶 with ipython\n- ipython을 사용한 프로그래머는 좀더 상황이 낫다\n(base) C:\\Users\\python>ipython\nPython 3.9.7 (default, Sep 16 2021, 16:59:28) [MSC v.1916 64 bit (AMD64)]\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.29.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: total = 0\n\nIn [2]: for i in range(1,11):\n   ...:     total = total + i\n   ...:\n\nIn [3]: total\nOut[3]: 55\n\n편한점1: 자동으로 들여쓰기가 되어서 편함\n편한점2: 화살표를 이용해서 for문을 쓰는 도중에 위아래로 이동가능\n불편한점1: 화살표로 이동할수는 있는데 마우스로는 이동할 수 없다.\n불편한점2: 내가 작성한 코드를 관리하기 어렵다.\n\n\n\n\n2세대 프로그래머: 메모장 + anconda prompt를 이용 (.py를 이용한 python활용)\n- 메모장을 키고 아래의 내용을 적는다.\ntotal = 0 \nfor i in range(1,11): \n    total = total + i\nprint(total)\n- 파일이름을 mysum.py로 저장한다.\n- anaconda prompt에서 mysum.py파일이 저장된 폴더로 이동 -> 실행\n(base) C:\\Users\\python>cd Desktop\n\n(base) C:\\Users\\python\\Desktop>dir\n C 드라이브의 볼륨에는 이름이 없습니다.\n 볼륨 일련 번호: 9AFD-A05F\n\n C:\\Users\\python\\Desktop 디렉터리\n\n2022-03-27  오전 11:32    <DIR>          .\n2022-03-27  오전 11:32    <DIR>          ..\n2022-03-27  오전 12:01             2,306 Chrome.lnk\n2022-03-26  오후 08:32             2,332 Microsoft Edge.lnk\n2022-03-27  오전 11:33                71 mysum.py\n               3개 파일               4,709 바이트\n               2개 디렉터리  743,643,467,776 바이트 남음\n\n(base) C:\\Users\\python\\Desktop>python mysum.py\n55\n\n(base) C:\\Users\\python\\Desktop>\n- 소감 - 편한점1: 마우스를 이용하여 이동가능 - 편한점2: 내가 작업한 내용은 바탕화면의 메모장에 저장이 되어있음 - 아쉬운점: ipython의 장점은 활용못함 (구문강조, 도움말기능)\n\n\n3세대 프로그래머: 메모장 + ipython\n- 전체적인 개발방식 - 메모장: 코드를 편집, 저장 - ipython: anaconda prompt처럼 메모장의 코드를 실행하고 결과를 확인 + 구문강조, 도움말확인기능 등을 이용하여 짧은 코드를 빠르게 작성\n- 기능 - ipython에서 !python mysum.py를 입력하면 anaconda prompt에서 python mysum.py를 입력한 것과 같은 효과 - ipython에서 %run mysum을 입력하면 메모장에서 mysum.py에 입력된 내용을 복사해서 ipython에 붙여넣어 실행한것과 같은 효과\n\n\n4세대 프로그래머: IDE(통합개발환경)를 사용\n- 메모장과 ipython을 하나로 통합한 프로그램이 등장! - jupyter notebook, jupyter lab - spyder - idle - VScode - …\n- 주피터의 트릭 (실제로 주피터는 ipython에 기생할 뿐 아무런 역할도 안해요)\n\n주피터를 실행\n새노트북을 생성 (파이썬으로 선택)\n\n\n컴퓨터는 내부적으로 ipython을 실행하고 그 ipython이랑 여러분이 방금만든 그 노트북과 연결\n\n\n처음보이는 cell에 1+1을 입력 -> 쉬프트엔터 -> 결과2가 출력\n\n\n처음보이는 cell하나 = 자동으로 열린 하나의 메모장\ncell 1+1을 입력 = 메모장에 1+1을 적음\n쉬프트+엔터후 결과2를 출력 = cell의 내용을 복사 -> ipython에 붙여넣음 -> ipython 계산된 결과를 복사 -> cell로 돌아와 붙여넣기\n\n\n새로운 cell을 추가하고 2+2을 입력 -> 쉬프트엔터 -> 결과4가 출력\n\n\n새로운 cell을 추가 = 새로운 메모장 추가\ncell 2+2을 입력 = 새로운 메모장에 2+2를 적음\n쉬프트+엔터후 결과4를 출력 = cell의 내용을 복사 -> ipython에 붙여넣음 -> ipython 계산된 결과를 복사 -> cell로 돌아와 붙여넣기\n\n- 중요한 사실들 - IDE는 내부적으로 연산을 수행하는 능력이 없다. (생각해볼것: 왜 R을 꼭 설치하고 Rstudio를 설치해야 했을까?) - 주피터에서 커널을 재시작한다는 의미는 메모장이 열린채로 ipython을 껐다가 다시 실행한다는 의미 - 주피터는 단순히 ’메모장의 내용을 복사하여 붙여넣는 기계’라고 볼 수 있다. 이렇게 생각하면 주피터는 꼭 ipython에 연결할 이유는 없다. 실제로 주피터에 R을 연결해서 쓸 수 있다. 즉 하나의 IDE가 여러개의 언어와 연결될 수 있다. - Jupyterlab이라는 프로그램은 크롬에 있는 내용과 ipython간의 통신을 제어하는 프로그램일 뿐이다.\n\n\n5세대 프로그래머: 가상컴퓨터(anaconda), 원격컴퓨터(server), 클라우드컴퓨터(colab)의 개념 등장\n- 지금까지는 ipython이 실행되는 컴퓨터와 크롬이 실행되는 컴퓨터가 동일하다는 전제였음.\n- 생각해보니까 어차피 ipython이 실행된 컴퓨터에서 내가 크롬에 입력한 명령 “전달”되기만 하면 되므로 꼭 같은 컴퓨터일 필요는 없다.\n\n모델1: 원격컴퓨터\n- 준비상태 - 전북대컴퓨터: ipython을 실행 + 이 컴퓨터는 인터넷 연결이 되어있어야함 - 우리집노트북: 크롬실행 + 이 컴퓨터도 인터넷이 연결되어 있어야함\n- 명령입력 - 우리집노트북 크롬에서 1+1을 입력하고 쉬프트 엔터를 누름\n- 우리집노트북 -> 전북대컴퓨터 - 우리집 노트북의 내부의 어떤프로그램은 1+1이라는 명령을 복사하여 카카오톡으로 전북대 컴퓨터에 전달 - 전북대 컴퓨터의 내부의 어떤프로그램은 1+1이라는 명령을 카톡으로 받아서 그것을 ipython에게 전달\n- 전북대컴퓨터 -> 우리집노트북 - 전북대컴퓨터 내부의 ipython은 2라는 출력결과를 계산함 - 전북대컴퓨터 내부의 어떤프로그램은 계산결과를 카톡으로 우리집 노트북에 알려줌 - 나는 우리집 노트북에서 계산결과를 받아볼 수 있다.\n\n\n모델2: 원격컴퓨터 + 가상컴퓨터\n- 준비상태 - 성능좋은 전북대 컴퓨터 1개 - 내 노트북 1개 (그냥 싸고 가벼운거) - 대학원생 아이패드 1개 (그냥 싸고 가벼운거)\n- 아이디어\n\n성능좋은 전북대 컴퓨터를 논리적으로 3개로 분리 \\(\\to\\) 이를 각각 (base) (py39jl17) (py38r40) 컴퓨터라고 하자.\n나는 (py39jl17)에 접속하여 파이썬 3.9와 줄리아 1.7을 설치한뒤 실습한다.\n대학원생은 (py38r40)에 접속하여 파이썬 3.8과 R 4.0을 설치하고 실습한다.\n(base)는 예비용으로 아무것도 설치안한 깨끗한 상태 유지\n내가 뭘 실수해서 (py39jl17)컴퓨터가 망가졌으나 (py38r40)은 아무 타격없다.\n나는 (py39jl17)를 삭제하고 (base)로 부터 다시 새로운 컴퓨터를 복사하여 (py39jl17)을 다시 만든다.\n\n\n\n모델3: 가상컴퓨터\n- 여러분들 사례 - 여러분들의 컴퓨터는 (base), (py39) 2개의 컴퓨터로 나누어져 있음 - 여러분들이 (py39)에만 주피터랩을 설치 - (py39)에 있는 ipython과 여러분의 크롬창이 서로 통신하면서 실습 - 장점: 서로 다른 환경에 서로다른 파이썬과 R등을 설치할 수 있다. \\(\\to\\) 패키지간의 충돌이 최소화 (파이썬 입문 수업을 듣고, 이후에 파이썬을 이용하는 어떤수업을 들음)\n\n\n모델4: 클라우드\n- 사례1 - 성능이 그저그런 컴퓨터 27개 - 대학원생을 포함하여 쓸 사람은 5명 - 한사람당 27/5(=5.4)대의 컴퓨터식 할당\n- 사례2: 구글코랩 - 구글에 여러가지 성능을 가진 컴퓨터가 \\(n\\)대 있음 - \\(m\\)명의 사람이 \\(n\\)대의 컴퓨터에 접속 - 적당히 컴퓨터 자언을 분배하여 사용\n\n\n\n요약 및 정리\n- 결국 (1) 컴퓨터에 (2) 파이썬을 설치하고 (3) 실행하는 과정은 생각보다 다양한 선택의 조합이 가능하다.\n\n그냥 내 노트북에 파이썬을 설치할지? 내 노트북안에 가상컴퓨터를 만들고 거기에 파이썬을 설치할지? 학교의 데스크탑에 파이썬을 설치하고 쓸지? 설치를 안하고 구글컴퓨터에 설치된 파이썬을 난 쓰기만 할지?\npython설치할지? ipython를 설치할지? 어차피 가상환경을 쓸꺼니가 anaconda를 설치할지? 아니면 코랩쓸꺼니까 설치안할지?\n어떤 IDE를 쓸지? IDE를 쓰지 않을지? 내가 IDE를 직접구성해서 만들지?\n\n하지만 공통적으로 관통하는 원리가 있다\n\n\n숙제\n- 주피터랩에서 ’myprod.py’파일을 만들고 1부터 5까지의 곱을 계산하는 코드를 작성후 %run myprod를 실행하여 출력결과를 확인"
  },
  {
    "objectID": "posts/2022-06-14-2022년 파이썬입문 기말고사 풀이.html",
    "href": "posts/2022-06-14-2022년 파이썬입문 기말고사 풀이.html",
    "title": "PP2023",
    "section": "",
    "text": "branch: master\nbadges: true\nauthor: 최규빈\n\n\n\n아래코드를 이용하여 numpy, matplotlib, pandas를 import하라.\n\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport pandas as pd\nfrom IPython.display import HTML\n\n\n\n\n(1) 도함수를 구하는 함수 derivate를 선언하라. 이 함수를 이용하여 \\(f(x)=x^2\\)의 그래프와 \\(f'(x)=2x\\)의 그래프를 \\(x \\in (-1,1)\\)의 범위에서 그려라.\n(풀이)\n\ndef f(x): \n    return x**2 \n\n\ndef derivate(f): \n    def df(x): \n        h=0.000000000001\n        return (f(x+h)-f(x))/h \n    return df\n\n\nx = np.linspace(-1,1,100)\nplt.plot(x,f(x))\nplt.plot(x,derivate(f)(x))\n\n\n\n\n(2) 적당한 클래스 정의하여 인스턴스 a를 만들고 print(a)의 출력결과가 본인의 학번이 나오도록 하라.\n(풀이)\n\nclass Klass:\n    def __str__(self):\n        return('2022-43052')\n\n\na=Klass()\nprint(a)\n\n2022-43052\n\n\n(3) for문이 실행될때마다 [묵,찌,빠] 중에 하나를 내며 빠를 누적 3회 낼경우 for문이 멈추는 이터레이터를 생성하라.\n(풀이)\n\nclass Klass: # 찌를 내는순간 for문이 멈추도록 하는 이터레이터를 만들자\n    def __init__(self): \n        self.candidate = [\"묵\",\"찌\",\"빠\"] \n        self.dic = {'묵':0,'찌':0,'빠':0}\n    def __iter__(self):\n        return self \n    def __next__(self):\n        action = np.random.choice(self.candidate)\n        self.dic[action] += 1\n        if self.dic['빠']==3:\n            print(\"빠가 3번 누적되어 for문을 멈춥니다\")\n            raise StopIteration\n        else:\n            return action\n\n\na=Klass()\nfor i in a:\n    print(i)\n\n빠\n묵\n빠\n빠가 3번 누적되어 for문을 멈춥니다\n\n\n(4)-(6)\n\nclass GS25: \n    n=0 \n    total_number_of_guests = 0 \n    def __init__(self):\n        self.number_of_guests = 0 \n\n(4) 위의 클래스를 수정하여 아래와 같이 GS25에서 새로운 인스턴스가 생성될때마다\nGS25의 점포수가 ?개로 늘었습니다.\n라는 메시지가 출력되도록 하라.\n(5) 함수 come를 인스턴스 메소드로 정의하라. 이 메소드가 실행될때마다 각 점포의 손님 인스턴스 변수 number_of_guests와 클래스변수 total_number_of_guests를 1씩 증가시키고 아래의 메시지를 출력하라.\n새로운 손님이 오셨습니다!\nGS25를 방문한 총 손님수는 n명입니다. \n현재 GS25 점포를 방문한 손님수는 m명입니다. \n(6) 새로운 클래스메서드 show를 만들고 아래와 같은 메시지를 출력하도록 하라.\nGS25의 점포수: ??\nGS25를 방문한 총 손님수: ??\n(풀이)\n\nclass GS25: \n    n=0 \n    total_number_of_guests = 0 \n    def __init__(self):\n        self.number_of_guests = 0 \n        GS25.n += 1 \n        print(\"GS25의 점포수가 {}개로 늘었습니다.\".format(GS25.n))\n    def come(self):\n        GS25.total_number_of_guests += 1 \n        self.number_of_guests += 1\n        print(\"새로운 손님이 오셨습니다!\")\n        print(\"GS25를 방문한 총 손님수는 {}명입니다.\".format(GS25.total_number_of_guests))\n        print(\"현재 GS25 점포를 방문한 손님수는 {}명입니다.\".format(self.number_of_guests))\n    @classmethod\n    def show(cls):\n        print(\"GS25의 점포수: {}\".format(cls.n))\n        print(\"GS25를 방문한 총 손님수: {}\".format(cls.total_number_of_guests))\n\n\na=GS25() ## (4)의 사용예시\n\nGS25의 점포수가 1개로 늘었습니다.\n\n\n\nb=GS25() ## (4)의 사용예시\n\nGS25의 점포수가 2개로 늘었습니다.\n\n\n\na.come() ## (5)의 사용예시\n\n새로운 손님이 오셨습니다!\nGS25를 방문한 총 손님수는 1명입니다.\n현재 GS25 점포를 방문한 손님수는 1명입니다.\n\n\n\na.come() ## (5)의 사용예시\n\n새로운 손님이 오셨습니다!\nGS25를 방문한 총 손님수는 2명입니다.\n현재 GS25 점포를 방문한 손님수는 2명입니다.\n\n\n\nb.come() ## (5)의 사용예시\n\n새로운 손님이 오셨습니다!\nGS25를 방문한 총 손님수는 3명입니다.\n현재 GS25 점포를 방문한 손님수는 1명입니다.\n\n\n\nGS25.show() ## (6)의 사용예시\n\nGS25의 점포수: 2\nGS25를 방문한 총 손님수: 3\n\n\n(7) __eq__는 연산 == 를 재정의하는 메소드이다. 클래스 RPS_BASE를 상속하여 새로운 클래스 RPS5를 만들라. 연산 ==를 재정의하여 RPS7의 두 인스턴스의 action이 같은 경우 true를 리턴하는 기능을 구현하라.\n\nclass RPS_BASE:\n    def __init__(self):\n        self.action = np.random.choice(['가위','바위','보'])\n\n(풀이)\n\nclass RPS7(RPS_BASE):\n    def __eq__(self,other):\n        return self.action == other.action \n\n\na=RPS7()\na.action\n\n'바위'\n\n\n\nb=RPS7()\nb.action\n\n'가위'\n\n\n\na==b\n\nFalse\n\n\n(8) __gt__는 연산 > 를 재정의하는 메소드이다. 클래스 RPS_BASE를 상속하여 새로운 클래스 RPS6를 만들라. 연산 >를 재정의하여 RPS6의 두 인스턴스 a,b의 action이 각각 (‘가위’,‘보’), (‘바위’,‘가위’), (‘보’,‘바위’) 인 경우 true를 리턴하는 기능을 구현하라.\n(풀이)\n\nclass RPS8(RPS_BASE):\n    def __gt__(self,other): # 연산 > 를 재정의 \n        pair = self.action, other.action\n        return pair == ('가위','보') or pair == ('바위','가위') or pair == ('보','바위') \n\n\na=RPS8()\na.action\n\n'보'\n\n\n\nb=RPS8()\nb.action\n\n'가위'\n\n\n\na>b, a<b\n\n(False, True)\n\n\n(9)-(10)\n아래와 같은 데이터프레임을 선언하고 물음에 답하라.\n\nnp.random.seed(43052)\ndf=pd.DataFrame({'type':np.random.choice(['A','B'],100), 'score':np.random.randint(40,95,100)})\ndf\n\n\n\n\n\n  \n    \n      \n      type\n      score\n    \n  \n  \n    \n      0\n      B\n      45\n    \n    \n      1\n      A\n      40\n    \n    \n      2\n      B\n      79\n    \n    \n      3\n      B\n      46\n    \n    \n      4\n      B\n      57\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      95\n      B\n      69\n    \n    \n      96\n      A\n      71\n    \n    \n      97\n      A\n      93\n    \n    \n      98\n      A\n      63\n    \n    \n      99\n      A\n      82\n    \n  \n\n100 rows × 2 columns\n\n\n\n(9) type==’A’의 평균score를 구하는 코드를 작성하라.\n(풀이)\n\nm = df.query(\"type=='A'\").score.mean()\nm\n\n68.4\n\n\n(10) type==’A’의 평균score보다 같거나 큰 값을 가지는 행을 출력하라.\n(풀이)\n\n# \n# 아래모두 정답으로 인정 (문제설명이 불충분) \n# df.query(\"type=='A' and score >= @m\") \n# df.query(\"score >= @m\") \n\n\n\n\n\nclass RPS:\n    def __init__(self,candidate):\n        self.candidate = candidate\n        self.actions = list() \n        self.rewards = list()\n        self.prob = [0.5,0.5]\n\n    def __eq__(self,other): # 연산 == 를 재정의 \n        return self.actions[-1] == other.actions[-1] \n        #note: 둘의 액션이 같으면 무승부 \n    \n    def __gt__(self,other): # 연산 > 를 재정의 \n        pair = self.actions[-1], other.actions[-1]\n        return pair == ('가위','보') or pair == ('바위','가위') or pair == ('보','바위') \n        #note: 가위>보, 바위>가위, 보>가위 \n    \n    def __mul__(self,other):\n        # step1: 각자의 패를 선택 \n        self.choose()\n        other.choose()\n        \n        # step2: 승패 판단 + upate reward\n        if self == other: # 무승부일경우 \n            self.rewards.append(1)\n            other.rewards.append(1)\n        elif self > other: # self의 승리 \n            self.rewards.append(2)\n            other.rewards.append(0)\n        else: # other의 승리 \n            self.rewards.append(0)\n            other.rewards.append(2)\n        \n        # step3: update data\n        self.update_data()\n        other.update_data()\n    \n    def update_data(self):\n        self.data = pd.DataFrame({'actions':self.actions, 'rewards':self.rewards})\n    \n    def _repr_html_(self):\n        html_str = \"\"\"\n        낼 수 있는 패: {} <br/> \n        데이터: <br/>\n        {}\n        \"\"\"        \n        return html_str.format(self.candidate,self.data._repr_html_())\n    \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate,p=self.prob))\n\n(1) 플레이어A는 (가위,가위) 중 하나를 선택할 수 있고 플레이어B는 (가위,바위) 중 하나를 선택할 수 있다. 각 플레이어는 각 패 중 하나를 랜덤으로 선택하는 액션을 한다고 가정하자. 아래에 해당하는 확률을 시뮬레이션을 이용하여 추정하라.\n\n플레이어A가 승리할 확률:\n플레이어B가 승리할 확률:\n플레이어A와 플레이어B가 비길 확률:\n\nhint: 50% 확률로 b가 승리하고 50% 확률로 비긴다.\n(풀이)\n\nPlayerA = RPS(['가위','가위']) \nPlayerB = RPS(['가위','바위']) \n\nfor _ in range(100):\n    PlayerA * PlayerB\n\n\nprint('플레이어A가 승리할 확률: {}'.format(sum(PlayerA.data.rewards==2)/100))\nprint('플레이어B가 승리할 확률: {}'.format(sum(PlayerA.data.rewards==0)/100))\nprint('플레이어A와 플레이어B가 비길 확률: {}'.format(sum(PlayerA.data.rewards==1)/100))\n\n플레이어A가 승리할 확률: 0.0\n플레이어B가 승리할 확률: 0.57\n플레이어A와 플레이어B가 비길 확률: 0.43\n\n\n(2) 문제 (1)과 같이 아래의 상황을 가정하자.\n\n\n\n\n플레이어A\n플레이어B\n\n\n\n\n각 플레이어가 낼 수 있는 패 (candidate)\n(가위,가위)\n(가위,바위)\n\n\n각 패를 선택할 확률 (prob)\n(0.5,0.5)\n(0.5,0.5)\n\n\n\n각 플레이어는 아래와 같은 규칙으로 가위바위보 결과에 따른 보상점수를 적립한다고 하자. - 승리: 보상점수 2점 적립 - 무승부: 보상점수 1점 적립 - 패배: 보상점수 0점 적립\n100번째 대결까지 시뮬레이션을 시행하고 플레이어B가 가위를 낼 경우 얻은 보상점수의 총합과 바위를 낼 경우 얻은 보상점수의 총합을 각각 구하라. 플레이어B는 가위를 내는것이 유리한가? 바위를 내는것이 유리한가?\nhint: 플레이어B는 바위를 내는 것이 유리하다.\nhint: 플레이어B가 100번중에 49번 가위를 내고 51번 바위를 낸다면 플레이어B가 적립할 보상점수는 각각 아래와 같다. - 가위를 내었을 경우: 49 * 1 = 49점 - 바위를 내었을 경우: 51 * 2 = 102점 - 총 보상점수 = 49점 + 102점 = 151점\n(풀이)\n\nprint('플레이어B가 가위를 낼 경우 얻은 보상점수의 총합: {}'.format(PlayerB.data.query(\" actions=='가위'\").rewards.sum()))\nprint('플레이어B가 바위를 낼 경우 얻은 보상점수의 총합: {}'.format(PlayerB.data.query(\" actions=='바위'\").rewards.sum()))\n\n플레이어B가 가위를 낼 경우 얻은 보상점수의 총합: 43\n플레이어B가 바위를 낼 경우 얻은 보상점수의 총합: 114\n\n\n(3) (2)에서 얻은 데이터를 학습하여 플레이어B가 “가위” 혹은 “바위” 를 선택할 확률을 매시점 조금씩 조정한다고 가정하자. 구체적으로는 현재시점까지 얻은 보상점수의 비율로 확률을 결정한다. 예를들어 플레이어B가 100회의 대결동안 누적한 보상점수의 총합이 아래와 같다고 하자.\n\n가위를 내었을 경우 보상점수 총합 = 50점\n바위를 내었을 경우 보상점수 총합 = 100점\n\n그렇다면 플레이어B는 각각 (50/150,100/150) 의 확률로 (가위,바위) 중 하나를 선택한다. 101번째 대결에 플레이어B가 가위를 내서 비겼다면 이후에는 (51/151,100/151) 의 확률로 (가위,바위) 중 하나를 선택한다. 102번째 대결에 플레이어B가 바위를 내서 이겼다면 이후에는 각각 (51/153,102/153) 의 확률로 (가위,바위) 중 하나를 선택한다. 이러한 상황을 요약하여 표로 정리하면 아래와 같다.\n\n\n\n\n\n\n\n\n\n시점\n플레이어B가 가위를 냈을 경우 얻은 점수 총합\n플레이어B가 바위를 냈을 경우 얻은 점수 총합\nt+1시점에서 플레이어B가 (가위,바위)를 낼 확률\n\n\n\n\nt=100\n50\n100\n(50/150, 100/150)\n\n\nt=101\n51\n100\n(51/151, 100/151)\n\n\nt=102\n51\n102\n(51/153, 102/153)\n\n\n\n이러한 방식으로 500회까지 게임을 진행하며 확률을 수정하였을 경우 501번째 대결에서 플레이어B가 (가위,바위)를 낼 확률은 각각 얼마인가?\nhint: 시간이 지날수록 플레이어B는 (가위,바위)중 바위를 내는 쪽이 유리하다는 것을 알게 될 것이다.\n(풀이)\n\nclass RPS2(RPS):\n    def __init__(self,candidate):\n        # 기존내용\n        self.candidate = candidate\n        self.actions = list() \n        self.rewards = list()\n        self.prob = [0.5,0.5]\n        # 새롭게 정의하는 내용 \n        self.data = dict()\n        self.trainable=False # 학습모드 설정 \n        \n    def update_data(self):\n        a = self.actions[-1]\n        r = self.rewards[-1] \n        self.data[a] = self.data.get(a,0)+r \n        \n    def _repr_html_(self):\n        html_str = \"\"\"\n        낼 수 있는 패: {} <br/> \n        확률: {} <br/>\n        데이터: {} \n        \"\"\"        \n        return html_str.format(self.candidate,self.prob,self.data)\n    \n    def choose(self):\n        if self.trainable:  # if self.trainalbe==True: \n            a1 = self.candidate[0] # action1 \n            a2 = self.candidate[1] # action2 \n            r1 = self.data[a1] # reward from action1 \n            r2 = self.data[a2] # reward from action2 \n            self.prob = [r1/(r1+r2), r2/(r1+r2)] \n        self.actions.append(np.random.choice(self.candidate,p=self.prob))\n\n\nPlayerA=RPS2(['가위','가위'])\nPlayerB=RPS2(['가위','바위'])\n\n\n#\n# 1~100 \nPlayerA.trainable=False \nPlayerB.trainable=False \nfor _ in range(100):\n    PlayerA * PlayerB \n# 100~500     \nPlayerA.trainable=False \nPlayerB.trainable=True\nfor _ in range(400):\n    PlayerA * PlayerB \n\n\nPlayerB\n\n\n        낼 수 있는 패: ['가위', '바위']  \n        확률: [0.1923536439665472, 0.8076463560334528] \n        데이터: {'바위': 678, '가위': 161} \n        \n\n\n\n앞으로 아래와 같은 용어를 사용한다. - (정의) 어떠한 플레이어가 양손 중 하나를 선택하는 확률을 데이터를 바탕으로 매 순간 업데이트 한다면 그 플레이어는 “학습모드 상태이다”고 표현한다. - (정의) 반대로 어떠한 플레이어가 양손 중 하나를 항상 동일한 확률로 낸다면 그 플레이어는 “학습모드 상태가 아니다”라고 표현한다.\n\n(4) 새로운 두명의 플레이어C와 플레이어D를 만들어라. 두 플레이어는 모두 동일하게 (가위,바위) 중 하나를 선택할 수 있다. 두 명의 플레이어는 100번째 대결까지는 두 가지 패중 하나를 랜덤하게 선택하고 101번째 대결부터 500번째 대결까지는 문제(3)의 플레이어B와 같은 방식으로 확률을 업데이트 하여 두 가지 패를 서로 다른 확률로 낸다고 하자. 즉 100번째 대결까지는 두 플레이어가 모두 학습모드 상태가 아니고 101번째부터 500번째 대결까지는 두 플레이어가 모두 학습모드 상태이다. 500번째 대결까지의 학습이 끝났을 경우 플레이어 C와 플레이어D가 각 패를 낼 확률은 각각 얼마인가?\n\n\n\n\n\n\n\n\n\n시점\n플레이어C가 (가위,바위)를 낼 확률\n플레이어D가 (가위,바위)를 낼 확률\n비고\n\n\n\n\nt <= 100\n(1/2, 1/2)\n(1/2, 1/2)\n양쪽 플레이어 모두 학습모드가 아님\n\n\nt <= 500\n대결 데이터를 학습하여 수정한 확률\n대결 데이터를 학습하여 수정한 확률\n양쪽 플레이어 모두 학습모드임\n\n\n\nhint: 시간이 지날수록 두 플레이어 모두 바위를 내는 쪽이 유리하다는 것을 알게 될 것이다.\n(풀이)\n\nPlayerC=RPS2(['가위','바위'])\nPlayerD=RPS2(['가위','바위'])\n\n\n#\n# 1~100 \nPlayerC.trainable=False \nPlayerD.trainable=False \nfor _ in range(100):\n    PlayerC * PlayerD\n# 100~500     \nPlayerC.trainable=True\nPlayerD.trainable=True\nfor _ in range(400):\n    PlayerC * PlayerD \n\n\nPlayerC\n\n\n        낼 수 있는 패: ['가위', '바위']  \n        확률: [0.07692307692307693, 0.9230769230769231] \n        데이터: {'바위': 469, '가위': 39} \n        \n\n\n\nPlayerD\n\n\n        낼 수 있는 패: ['가위', '바위']  \n        확률: [0.07942973523421588, 0.9205702647657841] \n        데이터: {'바위': 453, '가위': 39} \n        \n\n\n(5) 새로운 플레이어 E와 F를 생각하자. 플레이어E와 플레이어F는 각각 (가위,바위) 그리고 (가위,보) 중 하나를 선택할 수 있다고 가정하자. 시뮬레이션 대결결과를 이용하여 아래의 확률을 근사적으로 추정하라.\n\n플레이어E가 승리할 확률:\n플레이어F가 승리할 확률:\n플레이어E와 플레이어F가 비길 확률:\n\nhint: 플레이어E가 가위를 낸다면 최소한 지지는 않기 때문에 플레이어E가 좀 더 유리한 패를 가지고 있다. 따라서 플레이어E의 결과가 더 좋을 것이다.\n\nPlayerE=RPS(['가위','바위'])\nPlayerF=RPS(['가위','보']) \n\nfor _ in range(100):\n    PlayerE * PlayerF\n\nprint('플레이어E가 승리할 확률: {}'.format(sum(PlayerE.data.rewards==2)/100))\nprint('플레이어F가 승리할 확률: {}'.format(sum(PlayerE.data.rewards==0)/100))\nprint('플레이어E와 플레이어F가 비길 확률: {}'.format(sum(PlayerE.data.rewards==1)/100))\n\n플레이어E가 승리할 확률: 0.47\n플레이어F가 승리할 확률: 0.36\n플레이어E와 플레이어F가 비길 확률: 0.17\n\n\n(6) (5)와 동일한 두 명의 플레이어E, F를 생각하자. 두 플레이어는 100회까지는 랜덤으로 자신의 패를 선택한다. 그리고 101회부터 500회까지는 플레이어F만 데이터로 부터 학습을 하여 수정된 확률을 사용한다. 500번의 대결이 끝나고 플레이어F가 (가위,보)를 선택하는 확률이 어떻게 업데이트 되어있는가?\n\n\n\n\n\n\n\n\n\n시점\n플레이어E가 (가위,바위)를 낼 확률\n플레이어F가 (가위,보)를 낼 확률\n비고\n\n\n\n\nt <= 100\n(1/2, 1/2)\n(1/2, 1/2)\n양쪽 플레이어 모두 학습모드가 아님\n\n\nt <= 500\n(1/2, 1/2)\n데이터를 학습하여 수정한 확률\n플레이어E는 학습모드아님 / 플레이어F는 학습모드\n\n\n\nhint: 플레이어F는 보를 내는 것이 낫다고 생각할 것이다. (가위를 내면 지거나 비기지만 보를 내면 지거나 이긴다.)\n\nPlayerE=RPS2(['가위','바위'])\nPlayerF=RPS2(['가위','보'])\n\n\n#\n# 1~100 \nPlayerE.trainable=False \nPlayerF.trainable=False \nfor _ in range(100):\n    PlayerE * PlayerF\n# 100~500     \nPlayerE.trainable=False\nPlayerF.trainable=True\nfor _ in range(400):\n    PlayerE * PlayerF\n\n\nPlayerE\n\n\n        낼 수 있는 패: ['가위', '바위']  \n        확률: [0.5, 0.5] \n        데이터: {'바위': 112, '가위': 441} \n        \n\n\n\nPlayerF\n\n\n        낼 수 있는 패: ['가위', '보']  \n        확률: [0.10067114093959731, 0.8993288590604027] \n        데이터: {'보': 402, '가위': 45} \n        \n\n\n(7) (6)번의 플레이어E와 플레이어F가 500회~1000회까지 추가로 게임을 한다. 이번에는 플레이어E만 데이터로부터 학습한다. 1000회까지 대결을 끝낸 이후 플레이어E가 (가위,바위)를 내는 확률은 어떻게 업데이트 되었는가?\n\n\n\n\n\n\n\n\n\n시점\n플레이어E가 (가위,바위)를 낼 확률\n플레이어F가 (가위,보)를 낼 확률\n비고\n\n\n\n\nt <= 100\n(1/2, 1/2)\n(1/2, 1/2)\n양쪽 플레이어 모두 학습모드가 아님\n\n\nt <= 500\n(1/2, 1/2)\n데이터를 학습하여 수정한 확률\n플레이어E는 학습모드아님 / 플레이어F는 학습모드\n\n\nt <= 1000\n데이터를 학습하여 수정한 확률\nt=500시점에 업데이트된 확률\n플레이어E는 학습모드 / 플레이어F는 학습모드아님\n\n\n\nhint: 플레이어F는 보를 내도록 학습되어 있다. 따라서 플레이어E가 바위를 내면 지고 가위를 내면 이길것이다. 따라서 플레이어E는 가위가 유리하다고 생각할 것이다.\n\n# \n# 500~1000     \nPlayerE.trainable=True\nPlayerF.trainable=False\nfor _ in range(500):\n    PlayerE * PlayerF\n\n\nPlayerE\n\n\n        낼 수 있는 패: ['가위', '바위']  \n        확률: [0.902158273381295, 0.09784172661870504] \n        데이터: {'바위': 136, '가위': 1256} \n        \n\n\n\nPlayerF\n\n\n        낼 수 있는 패: ['가위', '보']  \n        확률: [0.10067114093959731, 0.8993288590604027] \n        데이터: {'보': 528, '가위': 80} \n        \n\n\n(8) (7)번의 플레이어E와 플레이어F가 1000회~30000회까지 추가로 게임을 한다. 이번에는 플레이어F만 데이터로부터 학습한다. 30000회까지 대결을 끝낸 이후 플레이어F가 (가위,보)를 내는 확률은 어떻게 업데이트 되었는가?\n\n\n\n\n\n\n\n\n\n시점\n플레이어E가 (가위,바위)를 낼 확률\n플레이어F가 (가위,보)를 낼 확률\n비고\n\n\n\n\nt <= 100\n(1/2, 1/2)\n(1/2, 1/2)\n양쪽 플레이어 모두 학습모드가 아님\n\n\nt <= 500\n(1/2, 1/2)\n데이터를 학습하여 수정한 확률\n플레이어E는 학습모드아님 / 플레이어F는 학습모드\n\n\nt <= 1000\n데이터를 학습하여 수정한 확률\nt=500시점에 업데이트된 확률\n플레이어E는 학습모드 / 플레이어F는 학습모드아님\n\n\nt <= 30000\nt=1000시점에 업데이트된 확률\n데이터를 학습하여 수정한 확률\n플레이어E는 학습모드아님 / 플레이어F는 학습모드\n\n\n\nhint: 플레이어F는 원래 보가 유리하다고 생각하여 보를 자주 내도록 학습되었다. 하지만 플레이어E가 그러한 플레이어F의 성향을 파악하고 가위를 주로 내도록 학습하였다. 플레이어F는 그러한 플레이어E의 성향을 다시 파악하여 이번에는 가위을 자주 내는 것이 유리하다고 생각할 것이다.\n\n# \n# 1000~30000 \nPlayerE.trainable=False\nPlayerF.trainable=True\nfor _ in range(29000):\n    PlayerE * PlayerF\n\n\nPlayerE\n\n\n        낼 수 있는 패: ['가위', '바위']  \n        확률: [0.902158273381295, 0.09784172661870504] \n        데이터: {'바위': 4468, '가위': 33162} \n        \n\n\n\nPlayerF\n\n\n        낼 수 있는 패: ['가위', '보']  \n        확률: [0.9214985023917028, 0.0785014976082972] \n        데이터: {'보': 1756, '가위': 20614} \n        \n\n\n(9) 플레이어E와 플레이어F의 대결기록을 초기화 한다. 이번에는 플레이어F가 항상 (3/4)의 확률로 가위를 (1/4)의 확률로 보를 낸다고 가정한다. 플레이어E는 100번의 대결까지는 랜덤으로 (가위,바위)중 하나를 내고 101번째 대결부터 1000번째 대결까지는 대결 데이터를 학습하여 수정한 확률을 사용한다고 하자. 1000번째 대결이후에 플레이어E가 (가위,바위)를 내는 확률이 어떻게 업데이트 되어있는가?\n\n\n\n\n\n\n\n\n\n시점\n플레이어E가 (가위,바위)를 낼 확률\n플레이어F가 (가위,보)를 낼 확률\n비고\n\n\n\n\nt <= 100\n(1/2, 1/2)\n(3/4, 1/4)\n양쪽 플레이어 모두 학습모드가 아님\n\n\nt <= 1000\n데이터를 학습하여 수정한 확률\n(3/4, 1/4)\n플레이어E는 학습모드 / 플레이어F는 학습모드 아님\n\n\n\n(풀이)\n\nPlayerE=RPS2(['가위','바위'])\nPlayerF=RPS2(['가위','보'])\n\n\n#\n# 1~100 \nPlayerE.trainable=False \nPlayerF.trainable=False \nPlayerF.prob=[3/4,1/4]\nfor _ in range(100):\n    PlayerE * PlayerF\n# 100~1000     \nPlayerE.trainable=True\nPlayerF.trainable=False\nfor _ in range(900):\n    PlayerE * PlayerF\n\n\nPlayerE\n\n\n        낼 수 있는 패: ['가위', '바위']  \n        확률: [0.363831308077198, 0.636168691922802] \n        데이터: {'바위': 892, '가위': 509} \n        \n\n\n\n바위가 좀 더 유리하게 나온다\n\n(추가풀이)\n\n# 계속시행한다면?\nPlayerE.trainable=True\nPlayerF.trainable=False\nfor _ in range(10000*100):\n    PlayerE * PlayerF\n\n\nPlayerE\n\n\n        낼 수 있는 패: ['가위', '바위']  \n        확률: [0.1438411969483742, 0.8561588030516258] \n        데이터: {'바위': 1248374, '가위': 209736} \n        \n\n\n\nE가 가위를 냈을경우 보상의 기대값은 \\(1\\times 3/4 + 2 \\times 1/4 = 5/4\\) 이고 바위를 냈을경우 보상의 기대값은 \\(2\\times 3/4 + 0 \\times 1/4 = 6/4\\) 이므로 바위가 더 유리하다. 따라서 점점 바위를 내도록 학습한다.\n\n(10) 플레이어E와 플레이어F의 대결기록을 초기화 한다. 이번에는 플레이어F가 항상 (2/3)의 확률로 가위를 (1/3)의 확률로 보를 낸다고 가정한다. 플레이어E는 100번의 대결까지는 랜덤으로 (가위,바위)중 하나를 내고 101번째 대결부터 1000번째 대결까지는 대결 데이터를 학습하여 수정한 확률을 사용한다고 하자. 1000번째 대결이후에 플레이어E가 (가위,바위)를 내는 확률이 어떻게 업데이트 되어있는가?\n\n\n\n\n\n\n\n\n\n시점\n플레이어E가 (가위,바위)를 낼 확률\n플레이어F가 (가위,보)를 낼 확률\n비고\n\n\n\n\nt <= 100\n(1/2, 1/2)\n(2/3, 1/3)\n양쪽 플레이어 모두 학습모드가 아님\n\n\nt <= 1000\n데이터를 학습하여 수정한 확률\n(2/3, 1/3)\n플레이어E는 학습모드 / 플레이어F는 학습모드 아님\n\n\n\n\nPlayerE=RPS2(['가위','바위'])\nPlayerF=RPS2(['가위','보'])\n\n\n#\n# 1~100 \nPlayerE.trainable=False \nPlayerF.trainable=False \nPlayerF.prob=[2/3,1/3]\nfor _ in range(100):\n    PlayerE * PlayerF\n# 100~1000     \nPlayerE.trainable=True\nPlayerF.trainable=False\nfor _ in range(900):\n    PlayerE * PlayerF\n\n\nPlayerE\n\n\n        낼 수 있는 패: ['가위', '바위']  \n        확률: [0.5139500734214391, 0.48604992657856094] \n        데이터: {'바위': 664, '가위': 700} \n        \n\n\n\nPlayerF\n\n\n        낼 수 있는 패: ['가위', '보']  \n        확률: [0.6666666666666666, 0.3333333333333333] \n        데이터: {'가위': 344, '보': 292} \n        \n\n\n\nE가 가위를 냈을경우 보상의 기대값은 \\(1\\times 2/3 + 2 \\times 1/3 = 4/3\\) 이고 바위를 냈을 경우 보상의 기대값은 \\(2\\times 2/3 + 0 \\times 1/3 = 4/3\\) 이므로 가위도 바위도 유리하지 않다. 따라서 가위와 바위를 어떠한 확률로 내든 상관없다.\n\n문제2의 추가해설\n(프로그래밍 팁)\n기본적인 구현기능인 RPS클래스를 상속을 이용하여 적절하게 modify하면 문제를 쉽게 풀 수 있습니다. 문항에 따라서 어떤것은 기본 RPS클래스를 쓰는것이 유리하고 어떠한 것은 새로운 클래스를 정의하는 것이 유리할 수 있습니다. 예를들어 2-(1),(2),(5)는 RPS클래스를 그대로 쓰는 것이 유리했으며 나머지는 새로운 클래스인 RPS2를 사용하는것이 문제풀이에 유리했습니다.\n(계산팁)\n추가확률을 계산할 경우 pandas의 dataframe을 이용하는 것보다 RPS2에서 제가 구현한 것 처럼 dict와 같은 내장자료형을 이용하는 것이 훨씬 연산속도가 빠릅니다. 가령 8번문제의 경우 알고리즘에 따라서 연산시간이 오래걸릴 수도 있는데 제가 짠 코드를 기반으로 코랩에서 돌리면 2.4116초 정도로 결과를 얻을 수 있습니다. 연산속도의 차이가 나는 이유는 (1) 기본적으로 판다스는 느리며 (2) RPS의 data에는 모든 자료를 저장는데 RPS2의 data는 각 패를 내었을 경우 보상의 누적만 저장하기 때문입니다. 최근 데이터량의 증가로 인하여 알고리즘의 효율성을 생각해야할 때도 있는데요, 본인이 구현한 코드와 정답코드를 비교해가며 계산시간을 테스트해보는것도 좋은 경험일 것 같습니다. 계산시간을 측정하는 것은 4월18일 강의노트에 사용한 방법을 참고하시면 됩니다.\n(약간의 개념해설)\n이 문제는 제로섬게임의 확장입니다. (양쪽 플레이어의 보상합이 일정하므로 이러한 게임을 constantsum 이라고 부릅니다) 어떤 분은 이 문제를 보고 게임이론을 떠올릴 수 있고 어떤 분은 강화학습을 떠올렸을 것 같습니다.\n문제의 포인트는 상대방의 전략에 따라서 나의 최적전략이 끝없이 달라진다는 점입니다. 문항 (5)-(10)까지의 문제는 이러한 상황을 묘사합니다. 직관적으로는 더 좋은패를 가지고 있는 플레이어E가 유리할 듯 하지만 결국 상대의 패를 보고 전략을 끝없이 수정하면 어떠한 하나의 action도 최적이 될 수 없습니다. 이 문제의 경우 문항 (8)의 시점에서는 둘 다 가위를 내도록 업데이트 되었는데 이를 이용하여 플레이어E가 다시 바위를 낼 수 있고 그 심리를 역이용하여 플레이어F가 다시 보를 낼 수 있고 그 심리를 다시 역이용하여 플레이어E가 다시 가위를 내며 그 심리를 역이용하여 플레이어F는 다시 가위를 낼 수 있어 무한반복이 됩니다. (상대도 바보가 아니거든요.)\n하지만 두 가지 액션을 확률로 선택한다면 문항 (10)의 상황과 같이 상대방이 어떠한 선택을 하더라도 유리한 선택이 존재하지 않는 어떠한 균형점이 존재할 수 있는데 이를 내쉬의 균형이라 합니다. 내쉬의 균형에 따르면 플레이어E는 가위와 바위를 2:1의 비율로 플레이어F는 가위와 보를 2:1로 낼때 서로가 서로의 전략을 바꾸지 않는 균형상태에 도달합니다. 이러한 게임의 셋팅에 대하여 좀 더 관심 있으신 분은 게임이론을 참고하셔서 공부해보시기 바랍니다. (저도 기본적인 내용밖에 모르지만 흥미있는 분야입니다)\n만약 주어진 게임환경에서 플레이어E,F가 (에이전트라고 부릅니다) 전략을 학습하는 과정이 흥미롭게 느껴졌다면 강화학습을 한번 참고해보시기 바랍니다. 강화학습은 알파고를 학습시킨것으로 유명한 알고리즘입니다. 아래영상은 컴퓨터플레이어가 벽돌깨기 게임을 하며 데이터를 쌓고 데이터로 부터 적절한 action을 학습하는 과정을 묘사한 영상입니다.\n\nhttps://www.youtube.com/watch?v=TmPfTpjtdgg\n\n여러분들이 기말고사에서 간단히 만들어본 알고리즘의 발전형입니다. 강화학습에 흥미가 있으시면 방학동안에 공부해보시길 바랍니다. (궁금한 점은 제 메일로 질문하셔도 됩니다, 제가 게임이론은 전공이 아니지만 강화학습은 약간 할줄 알거든요 ㅎㅎ)\n\n\n- 아래의 클래스를 참고하여 문제1,2을 풀어라. (5월25일 강의노트에 소개된 클래스를 약간 정리한 것) - 참고하지 않아도 감점은 없음\n\nclass RPS:\n    def __init__(self,candidate):\n        self.candidate = candidate\n        self.actions = list() \n        self.rewards = list()\n        self.prob = [0.5,0.5]\n\n    def __eq__(self,other): # 연산 == 를 재정의 \n        return self.actions[-1] == other.actions[-1] \n        #note: 둘의 액션이 같으면 무승부 \n    \n    def __gt__(self,other): # 연산 > 를 재정의 \n        pair = self.actions[-1], other.actions[-1]\n        return pair == ('가위','보') or pair == ('바위','가위') or pair == ('보','바위') \n        #note: 가위>보, 바위>가위, 보>가위 \n    \n    def __mul__(self,other):\n        # step1: 각자의 패를 선택 \n        self.choose()\n        other.choose()\n        \n        # step2: 승패 판단 + upate reward\n        if self == other: # 무승부일경우 \n            self.rewards.append(1)\n            other.rewards.append(1)\n        elif self > other: # self의 승리 \n            self.rewards.append(2)\n            other.rewards.append(0)\n        else: # other의 승리 \n            self.rewards.append(0)\n            other.rewards.append(2)\n        \n        # step3: update data\n        self.update_data()\n        other.update_data()\n    \n    def update_data(self):\n        self.data = pd.DataFrame({'actions':self.actions, 'rewards':self.rewards})\n    \n    def _repr_html_(self):\n        html_str = \"\"\"\n        낼 수 있는 패: {} <br/> \n        데이터: <br/>\n        {}\n        \"\"\"        \n        return html_str.format(self.candidate,self.data._repr_html_())\n    \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate,p=self.prob))\n\n- 사용예시\n\na=RPS(['가위','가위'])\nb=RPS(['가위','보'])\n\n\nfor i in range(5):\n    a*b\n\n\na\n\n\n\n        낼 수 있는 패: ['가위', '가위']  \n        데이터: \n        \n\n\n  \n    \n      \n      actions\n      rewards\n    \n  \n  \n    \n      0\n      가위\n      2\n    \n    \n      1\n      가위\n      2\n    \n    \n      2\n      가위\n      1\n    \n    \n      3\n      가위\n      2\n    \n    \n      4\n      가위\n      2\n    \n  \n\n\n        \n\n\n\nb\n\n\n\n        낼 수 있는 패: ['가위', '보']  \n        데이터: \n        \n\n\n  \n    \n      \n      actions\n      rewards\n    \n  \n  \n    \n      0\n      보\n      0\n    \n    \n      1\n      보\n      0\n    \n    \n      2\n      가위\n      1\n    \n    \n      3\n      보\n      0\n    \n    \n      4\n      보\n      0"
  },
  {
    "objectID": "posts/2022-05-09-(10주차) 5월9일.html",
    "href": "posts/2022-05-09-(10주차) 5월9일.html",
    "title": "PP2023",
    "section": "",
    "text": "클래스 (밈과 클래스, motivation)\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-wAhv4pNo7JMS_XygOrjZvO\n\n\n\n\n\n\n- 원본\n\nyoutube: https://www.youtube.com/watch?v=ReKRSTB5PK8&t=2s\n\n- 무슨말인지 하나도 몰랐어요\n- 하나하나가 요즘 많이 쓰는 말인것은 알겠음\n- 멈춰까지 유행어였음!! (몰랐어요, 댓글보고 알았음)\n- 이런걸 인터넷밈 혹은 줄여서 그냥 밈이라고 부른다.\n- 너무 재밋어서 사람들이 따라하면서 유행시킵니다. (약간변형하기도 하고요) - 분홍밤의 어쩔티비: https://www.youtube.com/watch?v=_lQqPec8dFU\n\n\n\n- 밈이란? (유전자처럼) 복제가능한 something - 이기적 유전자에서 제시한 개념 - 유전자는 (1) 복제 (2) 변형되면서 전파되는 속성이 있다는 사실을 관찰 - 종교, 사상, 이념도 유전자처럼 (1) 복제 (2) 변형되면서 전파되더라.. - 밈 = 유전자의 일반화된 개념 = 복제가능한 something\n- 인터넷 밈 - 밈의 한 형태 - 인터넷을 통하여 (1)복제 (2)변형되면서 전파되는 something\n\n\n\n\n\n- 기원: 불분명 - 가설1: 초등학생이 유투브채널 개설할때 XX티비 라고 개설하는것에서 유래? - 가설2: “어쩌라고 티비나봐”의 줄임말?\n- 발전: 인터넷을 통하여 사람들이 쓰기시작하면서 밈화 - 변형1: 저쩔티비, 안물티비, 안궁티비.. - 변형2: 어쩔냉장고, 어쩔세탁기, 어쩔다이슨청소기내돈내산..\n\nnote: 사실 내돈내산도 밈이라고 볼 수 있음\n\n- 유행 - 분석글: https://whitefaceone.tistory.com/2494 - 중앙일보 분석기사: https://www.joongang.co.kr/article/25048899#home\n\n\n\n- 기원\n\nhttps://pann.nate.com/talk/357542118\n\n\n\n\n- 기원: 인터넷방송?\n\nhttps://www.inven.co.kr/board/overwatch/4538/2776334\n\n\n\n\n- 기원: 트위치?\n\nhttps://whitefaceone.tistory.com/2067\n\n\n\n\n- 기원: 트위치 -> 문자 -> 돌하르방\n\nhttps://namu.wiki/w/%EC%8A%88%EC%8A%89%20%EC%8A%88%EC%88%99.%20%EC%8A%89.%20%EC%8B%9C.%20%EC%8B%9C%EB%B0%9C%EB%9F%BC%EC%95%84.\n\n- 전혀 다른 성질을 가진 밈으로 재탄생한 경우임 - 만들어진 계기: 트위치에서 tts를 이용해 조롱을 하기 위해 탄생 - 유명해진 계기: 택배실수 - 슉슈슈슈슉: 돌하르방과 결합.. (돌하르방의 기묘한 자세와 결합하여 더 재미있음)\n\n\n\n- 기원 학교폭력, 멈춰\n\nyoutube: https://www.youtube.com/watch?v=aQyLhYC4E8Y\n\n- 발전 (뒤늦게 생각해보니까 너무 어이없고 재미있음)\n\nhttps://www.youtube.com/watch?v=lmkLZufjJS4&list=PLSEouoj9wewjzMFrPKZPPUeMpn9Da_hSs&index=8\n코스피하락, 멈춰~ : https://www.teamblind.com/kr/post/%EC%BD%94%EC%8A%A4%ED%94%BC-%ED%95%98%EB%9D%BD-%EB%A9%88%EC%B6%B0-nsn651dz\n수강신청 매크로, 멈춰~ : https://www.youtube.com/watch?v=RsXy5Hk_s8Q\n\n- 이것 역시 전혀 다른 성질을 가진 밈으로 재 탄생한 경우임\n\n\n\n\nhttps://www.careet.net/606\n\n\n\n\n\n- 딱히 정형화 하기 어렵지만 위의예제들은 복제가 되는 어떠한 틀이 있다. 이것을 밈(=유전자)라고 부른다!!\n- 많은 사람들에게 그 복제내용이 확산되어 재생산된다. 이것을 밈화라고 한다.\n- 그대로 복제하지 않고 변형을 거치며 전혀 다른 성질을 가질 수 있다.\n- 밈이 또 다른 밈을 만들수 있다. - 신혜선의 어쩔티비는 다양한 밈의 결합체, 그리고 신혜선의 어쩔티비 자체가 밈화 되었음. - 내돈내산 밈과 어쩔티비밈의 변형이 결합하여 어쩔다이슨청소기내돈내산 이 탄생.\n\n\n\n- 클래스의 정의 - 많은 교재에서 정의를 회피한다. - 대신에 비유적으로 설명하거나 다른 대상을 가져와서 설명한다.\n- 클래스에 대한 비유적 설명 (implicit definition) - 클래스는 과자틀과 비슷하다. 클래스란 똑같은 무엇인가를 계속 만들어 낼 수도 있는 설계도면이고 객체란 클래스로 만든 피조물을 뜻한다. (점프투파이썬)\n- In object-oriented programming, a class is an extensible program-code-template for creating objects, providing initial values for state (member variables) and implementations of behavior (member functions or methods). // 객체 지향 프로그래밍에서 클래스는 상태(멤버 변수) 및 동작 구현(멤버 함수 또는 메서드)에 대한 초기 값을 제공하는 객체 생성을 위한 확장 가능한 프로그램 코드 템플릿입니다. - http://www.tcpschool.com/java/java_class_intro - https://javacpro.tistory.com/29 - https://ko.wikipedia.org/wiki/%ED%81%B4%EB%9E%98%EC%8A%A4_(%EC%BB%B4%ED%93%A8%ED%84%B0_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D) - 기타 서적들.. (진짜 무슨 한 챕터씩 설명하고 있음)\n- 클래스에 대한 명시적 정의 (책에 나온것 아니고 제 생각입니다!!) - 클래스는 복제, 변형, 재생산을 용이하게 하기 위해 만들어진 확장가능한 프로그램의 코드의 단위(extensible program-code-template)이다. 즉 밈이다.\n- 클래스도 결국 밈이다. 생각해보면 클래스를 만들고 사용하는 과정이 인터넷에서 밈을 만들고 노는것과 닮아 있다. - 1단계: 개념의 인지 (이거 재미있겠다 밈으로 만들자 // 이 코드 쓸모있다, 이 코드를 쉽게 찍어내는 클래스로 만들어두자) - 2단계: 복사하고 싶은 속성을 추려 복사가능한 틀을 만듬 (밈 초기 컨텐츠 // 클래스의 선언) - 3단계: 밈에서 다양한 컨텐츠를 재생산, 때로는 변형하여 재생산, 때로는 그것을 응용한 다른밈을 만듬 (밈화 // 클래스의 인스턴스화, 상속, 메소드오버라이딩)\n\n\n\n\n- 멈춰밈을 이용하여 코스피하락, 수강신청매크로등 다양한 예제를 만들고 놀고 싶다.\n\nfrom IPython.core.display import HTML \n\n\n\n\n\n- 예제1\n\n'제 이름은 {}입니다'.format('최규빈')\n\n'제 이름은 최규빈입니다'\n\n\n- 예제2\n\n'제 이름은 {}이고 사는곳은 {}입니다.'.format('최규빈','전주')\n\n'제 이름은 최규빈이고 사는곳은 전주입니다.'\n\n\n\n'제 이름은 {}이고 사는곳은 {}입니다.'.format('전주','최규빈')\n\n'제 이름은 전주이고 사는곳은 최규빈입니다.'\n\n\n- 예제3\n\n'제 이름은 {name}이고 사는곳은 {add}입니다.'.format(name='최규빈',add='전주')\n\n'제 이름은 최규빈이고 사는곳은 전주입니다.'\n\n\n\n'제 이름은 {name}이고 사는곳은 {add}입니다.'.format(add='전주',name='최규빈')\n\n'제 이름은 최규빈이고 사는곳은 전주입니다.'\n\n\n\n\n\n- 예제1\n\nHTML(\"<p> 이름 </p>\")\n\n 이름 \n\n\n- 예제2\n\nHTML(\"<img src='https://stat.jbnu.ac.kr/sites/stat/atchmnfl_mngr/imageSlide/469/temp_1573001043314100.jpg'>\")\n\n\n\n\n- 예제3\n\nHTML(\"<p> 전북대학교 </p> <img src='https://stat.jbnu.ac.kr/sites/stat/atchmnfl_mngr/imageSlide/469/temp_1573001043314100.jpg'>\")\n\n 전북대학교  \n\n\n\n\n\n\n- 밈을 위한 이미지 주소\n\nurl1='https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true'\nurl2='https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop2.png?raw=true'\n\n- 예제1: 원본\n\nhtmlstr = \"<p> {title} </p> <img src= '{url}'> <p> {end} </p> \" \nHTML(htmlstr.format(title='학교폭력',url=url1,end='멈춰~~~~'))\n\n 학교폭력    멈춰~~~~  \n\n\n- 예제1: 코스피하락\n\nHTML(htmlstr.format(title='코스피하락',url=url1,end='멈춰~~~~'))\n\n 코스피하락    멈춰~~~~  \n\n\n- 예제3: 수강신청 매크로\n\nHTML(htmlstr.format(title='수강신청 매크로',url=url1,end='멈춰~~~~'))\n\n 수강신청 매크로    멈춰~~~~  \n\n\n\n\n\n- 함수의 선언\n\ndef stop():\n    htmlstr = \"<p> {title} </p> <img src= '{url}'> <p> {end} </p> \" \n    display(HTML(htmlstr.format(title=ttl,url=url,end=end)))\n\n\n\n\n\n\n\n\nttl = '학교폭력'\nurl = url1\nend = '멈춰~~~~'\nstop()\n\n 학교폭력    멈춰~~~~  \n\n\n\n\n\n\nttl = '코스피하락'\nurl = url1\nend = '멈춰~~~~'\nstop()\n\n 코스피하락    멈춰~~~~  \n\n\n\n\n\n\nttl = '수강신청 매크로'\nurl = url1\nend = '멈춰~~~~'\nstop()\n\n 수강신청 매크로    멈춰~~~~  \n\n\n\n\n\n\nttl = '수강신청 매크로'\nurl = url1\nend = '멈춰!!!!!'\nstop()\n\n 수강신청 매크로    멈춰!!!!!  \n\n\n\n\n\n\nttl = '코스피하락'\nurl = url1\nend = '멈춰!!!!!'\nstop()\n\n 코스피하락    멈춰!!!!!  \n\n\n\n앗 실수\n\n\nttl = '코스피하락'\nurl = url1\nend = '멈춰~~~~'\nstop()\n\n 코스피하락    멈춰~~~~  \n\n\n\n\n\n\nttl = '학교폭력'\nurl = url1\nend = '멈춰~~~~'\nstop()\n\n 학교폭력    멈춰~~~~  \n\n\n\nttl = '코스피하락'\nurl = url1\nend = '멈춰~~~~'\nstop()\n\n 코스피하락    멈춰~~~~  \n\n\n\n\n\n\nttl = '학교폭력'\nurl = url2\nend = '멈춰!!!!!'\nstop()\n\n 학교폭력    멈춰!!!!!  \n\n\n\nttl = 'KOSPI 하락'\nurl = url1\nend = '멈춰!!!!!'\nstop()\n\n KOSPI 하락    멈춰!!!!!  \n\n\n\n\n\n\n\nclass STOOOP: # STOOOP 은 양식문서의 이름이라 생각할 수 있다. \n    title = \"학교폭력\" \n    url = url1 \n    end = \"멈춰~~~~\" \n    def stop(self): ## 규칙1: class안에서 정의된 함수는 첫번째 입력으로 무조건 self \n        htmlstr = \"<p> {title} </p> <img src= '{url}'> <p> {end} </p> \" \n        display(HTML(htmlstr.format(title=self.title,url=self.url,end=self.end)))\n        ## 규칙2: class안에서 정의된 변수 (title, url, end)를 쓰려면 \"self.변수이름\"의 형태로 써야함\n\n\n\n\nschool = STOOOP() \n# STOOOP이라는 이름의 양식문서를 복사해 하나의 hwp를 파일을 만들어 밈을 생성하고 그 파일이름을 school이라고 하자.\n# 그러니까 STOOP.hwp 와 school.hwp가 있는 상황\n\n\nschool.title\n\n'학교폭력'\n\n\n\nschool.url\n\n'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true'\n\n\n\nschool.end\n\n'멈춰~~~~'\n\n\n\nschool.stop()\n\n 학교폭력    멈춰~~~~  \n\n\n\n\n\n\nkospi = STOOOP() # 코스피하락 멈춰를 위해 STOOP.hwp양식문서에서 하나의 밈을 찍어낸다(=kospi.hwp 생성).\n\n\nkospi.title, kospi.url, kospi.end\n\n('학교폭력',\n 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true',\n '멈춰~~~~')\n\n\n\nkospi.title = '코스피하락' # kospi.hwp 제목을 코스피하락으로 변경 \n\n\nkospi.title, kospi.url, kospi.end\n\n('코스피하락',\n 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true',\n '멈춰~~~~')\n\n\n\nkospi.stop()\n\n 코스피하락    멈춰~~~~  \n\n\n\n\n\n\nmacro = STOOOP() \n\n\nmacro.title, macro.url, macro.end\n\n('학교폭력',\n 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true',\n '멈춰~~~~')\n\n\n\nmacro.title = '수강신청 매크로'\n\n\nmacro.title, macro.url, macro.end\n\n('수강신청 매크로',\n 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true',\n '멈춰~~~~')\n\n\n\nmacro.stop()\n\n 수강신청 매크로    멈춰~~~~  \n\n\n\n\n\n\nmacro.end = '멈춰!!!!!'\n\n\nmacro.stop()\n\n 수강신청 매크로    멈춰!!!!!  \n\n\n\n\n\n\nkospi.stop()\n\n 코스피하락    멈춰~~~~  \n\n\n\n\n\n\nschool.stop()\n\n 학교폭력    멈춰~~~~  \n\n\n\nkospi.stop()\n\n 코스피하락    멈춰~~~~  \n\n\n\n\n\n\nschool.url = url2 \nkospi.title = 'KOSPI 하락'\n\n\nschool.stop()\n\n 학교폭력    멈춰~~~~  \n\n\n\nkospi.stop()\n\n KOSPI 하락    멈춰~~~~  \n\n\n\n\n\n\n- “수강신청 멈춰”의 이미지를 신혜선으로 변경하고 출력해볼 것 - macro.url 변경 - macro.stop() 을 사용"
  },
  {
    "objectID": "posts/2022-04-03-(5주차) 4월2일.html",
    "href": "posts/2022-04-03-(5주차) 4월2일.html",
    "title": "PP2023",
    "section": "",
    "text": "(5주차) 4월4일\n\n소스코드 관리, 모듈, 패키지, 라이브러리\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n강의영상\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-yzovneTfJptA4K705FOG1f\n\n- (1/7) intro\n- (2/7) import 사용방법, 도움말 작성기능\n- (3/7) import 사용시 주의점\n- (4/7) import 고급\n- (5/7) site-packages 1\n- (6/7) site-packages 2\n- (7/7) 모듈, 패키지, 라이브러리, 숙제설명\n\n\nintro\n- 현재 파이썬은 길이가 2인 벡터의 덧셈을 지원하지 않음\n\na=[1,2]\nb=[3,4]\na+b\n\n[1, 2, 3, 4]\n\n\n- 아래와 같은 기능을 구현하는 함수를 만들고 싶음\n[1,2], [3,4] -> [4,6]\n- 구현\n\ndef vec2_add(a,b): \n    return [a[0]+b[0], a[1]+b[1]]\n\n- test\n\na=[1,2]\nb=[3,4]\n\n\nvec2_add(a,b)\n\n[4, 6]\n\n\n\n\nmake myfuns.py\n- 생각해보니까 vec2_add는 내가 앞으로 자주 쓸 기능임\n- 그런데 현재 사용방법으로는 내가 노트북파일을 새로 만들떄마다 def vec2_add(a,b): 와 같은 형태로 vec2_add를 매번 정의해줘야 하는 불편한이 있다.\n\n해결1\n- 자주 사용하는 함수를 myfuns.py에 저장한다.\n# myfuns.py\ndef vec2_add(a,b): \n    return [a[0]+b[0], a[1]+b[1]]\n- %run myfuns를 실행\n준비: “00” -> 커널재시작\n\n%run myfuns \n\n\nvec2_add([1,2],[3,4])\n\n[4, 6]\n\n\n\n\n해결2\n- 자주 사용하는 함수를 myfuns.py에 저장한다.\n# myfuns.py\ndef vec2_add(a,b): \n    return [a[0]+b[0], a[1]+b[1]]\n- import myfuns를 이용\n(준비) “00” -> 커널재시작\n\nimport myfuns \n\n\na=[1,2]\nb=[3,4]\nmyfuns.vec2_add(a,b)\n\n[4, 6]\n\n\n\n\n\nimport 기본\n\n사용방법\n- 사용방법1\n준비: “00” -> 커널재시작\n\nimport myfuns \n\n\nmyfuns.vec2_add([1,2],[3,4]) \n\n[4, 6]\n\n\n\nmyfuns.vec2_add 의 의미: myfuns.py 라는 파일안에 vec2_add라는 함수가 있음. 그것을 실행하라.\n.의 의미: 상위.하위의 개념!\n\n(주의) 아래와 같이 사용불가능 하다.\n\nvec2_add([1,2],[3,4])\n\nNameError: name 'vec2_add' is not defined\n\n\n- 사용방법2\n준비: “00” -> 커널재시작\n\nfrom myfuns import vec2_add \n\n\nvec2_add([1,2],[3,4])\n\n[4, 6]\n\n\n(주의) 이 경우는 오히려 아래가 불가능함\n\nmyfuns.vec2_add([1,2],[3,4]) # myfuns안의 vec2_add만 임포트했지 myfuns자체를 임포트 한것은 아님 \n\nNameError: name 'myfuns' is not defined\n\n\n- 사용방법3\n준비: “00” -> 커널재시작\n\nimport myfuns\nfrom myfuns import vec2_add\n\n\nmyfuns.vec2_add([1,2],[3,4])\n\n[4, 6]\n\n\n\nvec2_add([1,2],[3,4])\n\n[4, 6]\n\n\n- 사용방법4\n준비: “00” -> 커널재시작\n\nfrom myfuns import vec2_add, vec2_sub \n\n\nvec2_add([1,2],[3,4])\n\n[4, 6]\n\n\n\nvec2_sub([1,2],[3,4])\n\n[-2, -2]\n\n\n- 사용방법5\n준비: “00” -> 커널재시작\n\nfrom myfuns import * #*는 all의 의미 \n\n\nvec2_add([1,2],[3,4])\n\n[4, 6]\n\n\n\nvec2_sub([1,2],[3,4])\n\n[-2, -2]\n\n\n- 사용방법6\n준비: “00” -> 커널재시작\n\nimport myfuns as mf \n\n\nmf.vec2_add([1,2],[3,4])\n\n[4, 6]\n\n\n\nmf.vec2_sub([1,2],[3,4])\n\n[-2, -2]\n\n\n(오히려 아래는 실행불가능)\n\nmyfuns.vec2_add([1,2],[3,4])\n\nNameError: name 'myfuns' is not defined\n\n\n\nmyfuns.vec2_sub([1,2],[3,4])\n\nNameError: name 'myfuns' is not defined\n\n\n- 잘못된 사용방법1\n준비: “00” -> 커널재시작\n\nimport myfuns as mf \nfrom mf import vec2_add \n\nModuleNotFoundError: No module named 'mf'\n\n\n- 사용방법7\n준비: “00” -> 커널재시작\n\nimport myfuns as mf \nfrom myfuns import vec2_add \n\n\nmf.vec2_add([1,2],[3,4])\n\n[4, 6]\n\n\n\nvec2_add([1,2],[3,4])\n\n[4, 6]\n\n\n- 사용방법8\n준비: “00” -> 커널재시작\n\nimport myfuns as mf \nfrom myfuns import vec2_add as add \n\n\nmf.vec2_add([1,2],[3,4])\n\n[4, 6]\n\n\n\nvec2_add([1,2],[3,4])\n\nNameError: name 'vec2_add' is not defined\n\n\n\nadd([1,2],[3,4])\n\n[4, 6]\n\n\n\n\n도움말 작성기능\n- mf란 무엇인가?\n준비: “00” -> 커널재시작\n\nimport myfuns as mf \n\n\nmf\n\n<module 'myfuns' from '/home/cgb3/Dropbox/07_lectures/IP2022/_notebooks/myfuns.py'>\n\n\n\nmf?\n\n\nType:        module\nString form: <module 'myfuns' from '/home/cgb3/Dropbox/07_lectures/IP2022/_notebooks/myfuns.py'>\nFile:        ~/Dropbox/07_lectures/IP2022/_notebooks/myfuns.py\nDocstring:   <no docstring>\n\n\n\n\n\ntype(mf)\n\nmodule\n\n\n\nmf의 타입은 모듈이라고 나옴, 현재 단계에서는 무엇인지 알기 어려움\n\n- Docstring의 내용을 채울 수 있을까?\n준비1: myfuns.py 파일을 아래와 같이 수정한다.\n준비2: “00” -> 커널재시작\n\nimport myfuns as mf \n\n\nmf?\n\n\nType:        module\nString form: <module 'myfuns' from '/home/cgb3/Dropbox/07_lectures/IP2022/_notebooks/myfuns.py'>\nFile:        ~/Dropbox/07_lectures/IP2022/_notebooks/myfuns.py\nDocstring:   이것은 길이가 2인 벡터의 합 혹은 차를 구하는 모듈입니다.\n\n\n\n\n\n\n주의점\n- myfuns.py는 최초 한번만 import 된다.\n준비: “00” -> 커널재시작\n\nimport myfuns\n\n\nmyfuns.vec2_add([1,2],[3,4])\n\n[4, 6]\n\n\nmyfuns.py파일을 열고 함수를 아래와 같이 바꾸자.\n\"\"\"이것은 길이가 2인 벡터의 합 혹은 차를 구하는 모듈입니다.\"\"\" \ndef vec2_add(a,b): \n    print(\"이것은 myfuns.py에 정의된 함수입니다\") \n    return [a[0]+b[0], a[1]+b[1]]\ndef vec2_sub(a,b): \n    return [a[0]-b[0], a[1]-b[1]]\n다시 myfuns를 로드하고 myfuns.vec2_add 를 실행하여 보자.\n\nimport myfuns\n\n\nmyfuns.vec2_add([1,2],[3,4])\n\n[4, 6]\n\n\n바뀐내용이 적용되지 않는다.\n커널을 다시 시작하고 임포트해보자.\n“00” -> 커널재시작\n\nimport myfuns\n\n\nmyfuns.vec2_add([1,2],[3,4])\n\n이것은 myfuns.py에 정의된 함수입니다\n\n\n[4, 6]\n\n\n- myfuns.py는 주피터노트북파일과 같은 폴더에 존재해야 한다.\n준비1: “00” -> 커널재시작\n준비2: myfuns.py을 복사하여 다른 폴더로 이동. 예를들면 IP0403 폴더를 만들고 그 폴더안에 myfuns.py파일을 복사해서 붙여넣은뒤에 파일이름을 myfuns2.py 로 변경.\n\nimport myfuns # 주피터노트북파일과 같은 폴더에 있는 myfuns는 잘 로드되지만 \n\n\nimport myfuns2 # 주피터노트북파일과 다른 폴더에 있는 myfuns2는 그렇지 않다. \n\nModuleNotFoundError: No module named 'myfuns2'\n\n\n- IP0403 폴더에 있는 myfuns2.py를 실행하기 위해서는 아래와 같이 할 수 있다.\n준비: “00” -> 커널재시작\n\nfrom IP0403 import myfuns2\n\n\nmyfuns2.vec2_add([1,2],[3,4]) \n\n이것은 myfuns2.py에 정의된 함수입니다\n\n\n[4, 6]\n\n\n- 아래도 가능하다.\n준비: “00” -> 커널재시작\n\nfrom IP0403.myfuns2 import vec2_add as add \n\n\nadd([1,2],[3,4])\n\n이것은 myfuns2.py에 정의된 함수입니다\n\n\n[4, 6]\n\n\n참고로 아래는 모두 정의되지 않음\n\nIP0403.myfuns2.vec2_add([1,2],[3,4]) \n\nNameError: name 'IP0403' is not defined\n\n\n\nmyfuns2.vec2_add([1,2],[3,4]) \n\nNameError: name 'myfuns2' is not defined\n\n\n\nvec2_add([1,2],[3,4]) \n\nNameError: name 'vec2_add' is not defined\n\n\n\n\n\nimport 고급\n\n폴더와 함께 사용할시\n- 언뜻 생각하면 아래가 가능할 것 같다.\nimport IP0403 \nIP0403.myfuns2.vec2_add([1,2],[3,4]) \n- 하지만 불가능하다.\n준비: “00” -> 커널재시작\n\nimport IP0403 \n\n\n되는거아냐?\n\n\nIP0403.myfuns2.vec2_add([1,2],[3,4])\n\nAttributeError: module 'IP0403' has no attribute 'myfuns2'\n\n\n\n여기서 불가능하다.\n\n- (암기) IP0403 폴더안에 __init__.py라는 파일을 만들고 내용에 아래와 같이 쓰면 가능하다.\n# ./IP0403/__init__.py \nfrom . import myfuns2\n준비1: 위의 지침을 따른다.\n준비2: “00” -> 커널재시작\n\nimport IP0403 \n\n\nIP0403.myfuns2.vec2_add([1,2],[3,4])\n\n이것은 myfuns2.py에 정의된 함수입니다\n\n\n[4, 6]\n\n\n컴퓨터 상식 - .: 현재폴더를 의미 - ..: 상위폴더를 의미 - ./myfuns.py: 현재폴더안에 있는 myfuns.py를 의미 - ./IP0403/myfuns2.py: 현재폴더만에 IP0403폴더안의 myfuns2.py 파일을 의미 - ../myfuns.py: 현재폴더보다 한단계상위폴더에 있는 myfuns.py를 의미 - cd ./IP0403: 현재폴더안에 있는 IP0403폴더로 이동해라. (cd IP0403으로 줄여쓸 수 있음) - cd .. 현재폴더보다 한단계 상위폴더로 이동하라.\n따라서 from . import myfuns2는 현재폴더에서 myfuns2를 찾아서 임포트 하라는 의미로 해석가능\n- 의미상으로 보면 아래가 실행가능할듯 한데 불가능하다.\n\n#import myfuns\nfrom . import myfuns\n\nImportError: attempted relative import with no known parent package\n\n\n\n\n\nsite-packages (실습금지)\n- 의문: 왜 현재폴더에 numpy.py라든가 numpy라는 이름의 폴더가 없는데도 import 가능한지?\n준비: “00” -> 커널재시작\n\nimport numpy as np\n\n\nimport IP0403 as ip \n\n\nip?\n\n\nType:        module\nString form: <module 'IP0403' from '/home/cgb3/Dropbox/07_lectures/IP2022/_notebooks/IP0403/__init__.py'>\nFile:        ~/Dropbox/07_lectures/IP2022/_notebooks/IP0403/__init__.py\nDocstring:   <no docstring>\n\n\n\n\n\nnp?\n\n\nType:        module\nString form: <module 'numpy' from '/home/cgb3/anaconda3/envs/py310/lib/python3.10/site-packages/numpy/__init__.py'>\nFile:        ~/anaconda3/envs/py310/lib/python3.10/site-packages/numpy/__init__.py\nDocstring:  \nNumPy\n=====\nProvides\n  1. An array object of arbitrary homogeneous items\n  2. Fast mathematical operations over arrays\n  3. Linear Algebra, Fourier Transforms, Random Number Generation\nHow to use the documentation\n----------------------------\nDocumentation is available in two forms: docstrings provided\nwith the code, and a loose standing reference guide, available from\n`the NumPy homepage <https://www.scipy.org>`_.\nWe recommend exploring the docstrings using\n`IPython <https://ipython.org>`_, an advanced Python shell with\nTAB-completion and introspection capabilities.  See below for further\ninstructions.\nThe docstring examples assume that `numpy` has been imported as `np`::\n  >>> import numpy as np\nCode snippets are indicated by three greater-than signs::\n  >>> x = 42\n  >>> x = x + 1\nUse the built-in ``help`` function to view a function's docstring::\n  >>> help(np.sort)\n  ... # doctest: +SKIP\nFor some objects, ``np.info(obj)`` may provide additional help.  This is\nparticularly true if you see the line \"Help on ufunc object:\" at the top\nof the help() page.  Ufuncs are implemented in C, not Python, for speed.\nThe native Python help() does not know how to view their help, but our\nnp.info() function does.\nTo search for documents containing a keyword, do::\n  >>> np.lookfor('keyword')\n  ... # doctest: +SKIP\nGeneral-purpose documents like a glossary and help on the basic concepts\nof numpy are available under the ``doc`` sub-module::\n  >>> from numpy import doc\n  >>> help(doc)\n  ... # doctest: +SKIP\nAvailable subpackages\n---------------------\ndoc\n    Topical documentation on broadcasting, indexing, etc.\nlib\n    Basic functions used by several sub-packages.\nrandom\n    Core Random Tools\nlinalg\n    Core Linear Algebra Tools\nfft\n    Core FFT routines\npolynomial\n    Polynomial tools\ntesting\n    NumPy testing tools\nf2py\n    Fortran to Python Interface Generator.\ndistutils\n    Enhancements to distutils with support for\n    Fortran compilers support and more.\nUtilities\n---------\ntest\n    Run numpy unittests\nshow_config\n    Show numpy build configuration\ndual\n    Overwrite certain functions with high-performance SciPy tools.\n    Note: `numpy.dual` is deprecated.  Use the functions from NumPy or Scipy\n    directly instead of importing them from `numpy.dual`.\nmatlib\n    Make everything matrices.\n__version__\n    NumPy version string\nViewing documentation using IPython\n-----------------------------------\nStart IPython with the NumPy profile (``ipython -p numpy``), which will\nimport `numpy` under the alias `np`.  Then, use the ``cpaste`` command to\npaste examples into the shell.  To see which functions are available in\n`numpy`, type ``np.<TAB>`` (where ``<TAB>`` refers to the TAB key), or use\n``np.*cos*?<ENTER>`` (where ``<ENTER>`` refers to the ENTER key) to narrow\ndown the list.  To view the docstring for a function, use\n``np.cos?<ENTER>`` (to view the docstring) and ``np.cos??<ENTER>`` (to view\nthe source code).\nCopies vs. in-place operation\n-----------------------------\nMost of the functions in `numpy` return a copy of the array argument\n(e.g., `np.sort`).  In-place versions of these functions are often\navailable as array methods, i.e. ``x = np.array([1,2,3]); x.sort()``.\nExceptions to this rule are documented.\n\n\n\n\n- 추측: ~/anaconda3/envs/py310/lib/python3.10/site-packages/를 찾아가보자. 그곳에 numpy폴더가 있을 것이다.\n\n!ls ~/anaconda3/envs/py310/lib/python3.10/site-packages | grep numpy\n\nnumpy\nnumpy-1.22.2.dist-info\n\n\n- 추측2: ~/anaconda3/envs/py310/lib/python3.10/site-packages/에 내가 자주 쓰는 기능을 폴더로 만들어서 모아두면 어디서든지 import 할 수 있다.\n\n!mkdir ~/anaconda3/envs/py310/lib/python3.10/site-packages/guebin # guebin 폴더 생성 \n\n\n!cp ./myfuns.py ~/anaconda3/envs/py310/lib/python3.10/site-packages/guebin \n# 현폴더에 있는 myfuns.py를 아까만든 guebin 폴더로 복사 \n\n\nfrom guebin import myfuns\n\n\nmyfuns?\n\n\nType:        module\nString form: <module 'guebin.myfuns' from '/home/cgb3/anaconda3/envs/py310/lib/python3.10/site-packages/guebin/myfuns.py'>\nFile:        ~/anaconda3/envs/py310/lib/python3.10/site-packages/guebin/myfuns.py\nDocstring:   이것은 길이가 2인 벡터의 합 혹은 차를 구하는 모듈입니다.\n\n\n\n\n\n!rm  ~/anaconda3/envs/py310/lib/python3.10/site-packages/guebin -rf # guebin 폴더삭제 \n\n- 추측3: guebin이 사라진 상태에서는 from guebin import myfuns 이 동작하지 않을 것이다.\n준비: “00” -> 커널재시작\n\nfrom guebin import myfuns\n\nModuleNotFoundError: No module named 'guebin'\n\n\n- 추측4: ~/anaconda3/envs/py310/lib/python3.10/site-packages/에서 numpy를 지운다면 numpy를 import할 수 없다.\n준비: “00” -> 커널재시작\n\nimport numpy as np\n\nModuleNotFoundError: No module named 'numpy'\n\n\n- 추측5: !pip install numpy를 하면 다시 폴더가 생길 것이다.\n\n!pip uninstall numpy -y \n\nFound existing installation: numpy 1.22.2\nUninstalling numpy-1.22.2:\n  Successfully uninstalled numpy-1.22.2\n\n\n\n!pip install numpy \n\nCollecting numpy\n  Downloading numpy-1.22.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (16.8 MB)\n     |████████████████████████████████| 16.8 MB 11.4 MB/s eta 0:00:01\nInstalling collected packages: numpy\nSuccessfully installed numpy-1.22.3\n\n\n\n\n모듈, 패키지, 라이브러리?\n- 모듈의 개념은 아까 살펴본것과 같다. (import를 하여 생기게 되는 오브젝트)\n- 교수님들: 모듈이 모이면 패키지라고 부른다. 그리고 라이브러리는 패키지보다 큰 개념이다.\n- 그런데 구분이 모호하다.\n\nimport numpy as np\n\n\ntype(np)\n\nmodule\n\n\n- python에서의 numpy의 type은 모듈\n- 그런데 numpy package 라고 검색하면 검색이 된다.\n- 심지어 numpy library 라고 해도 검색가능\n- 내생각: 넘파이모듈, 넘파이패키지, 넘파이라이브러리 다 맞는 말임\n\n\n숙제\nmyfuns.py 도움말 만드는 예제에서\n이것은 길이가 2인 벡터의 합 혹은 차를 구하는 모듈입니다\n대신에\n이것은 길이가 2인 벡터의 합 혹은 차를 구하는 모듈입니다. (학번: 2022-43052) \n와 같이 출력되도록 하고 스크린샷 제출"
  },
  {
    "objectID": "posts/2022-04-25-2022년 파이썬입문 중간고사.html",
    "href": "posts/2022-04-25-2022년 파이썬입문 중간고사.html",
    "title": "PP2023",
    "section": "",
    "text": "아래코드를 이용하여 numpy 와 matplotlib을 import하라.\nimport numpy as np\nimport matplotlib.pyplot as plt \n\n\n\n주의: 문제에 조건이 있는 경우 조건을 준수할 것\n(1) a의 type을 bool로 바꾸어라.\n\na=1.0\n\n\n(2)-(6)\n아래의 문자열을 고려하자.\ntest_arr = 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSUGPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XAt3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/EnmZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbxNrRFi9wrf+M7Q== schacon@mylaptop.local'\n(2) 위 문자열에서 짝수번째 원소를 출력하는 코드를 작성하라.\n(3) 위 문자열에서 마지막 10개의 원소를 출력하는 코드를 작성하라.\n(4) 위 문자열을 뒤집은 문자열을 구하는 코드를 작성하라. 즉 아래를 출력하는 코드를 작성하라.\n'lacol.potpalym@nocahcs ==Q7M+frw9iFRrNxbsSVqMlTarQ10d1os2njkImtaKn1+3r3wg+b8li/Z68Ec2DryauLMVmPZ98IPTnPZO4WA+ZmnE/trewr0bP/wv6ybNYjvDNpyX88XrrpKJQjlFUuz1bmFIe/86wW0V3+5x9Q1McnsAoJoaF3tAX7/KVlSvFMdsdwQANsjR6V8qLicMsZAHpXhKn1XixqBtiRXF3oAH+RCFXWlByTM/JdOk7vbP3adc0gwSppPbkVQ5XFl9h4fVELElx7MzQivrFUhbj9WJ4HJ81we5Zy4Idh7WYTDHlzfan+lPGUSDWB/mojT9KGTLNpITmrbS71YHfrHDkpUOlkAEQAAAwIBAAAAE2cy1CazN3BAAAA asr-hss'\n(5) 위 문자열에서 대문자의 수를 count하라.\nhint .isupper() 메소드를 이용할 것.\n\n'a'.isupper()\n\nFalse\n\n\n\n'A'.isupper()\n\nTrue\n\n\n\n'='.isupper()\n\nFalse\n\n\n\n'@'.isupper()\n\nFalse\n\n\n(6) 위 문자열에서 사용된 문자 및 특수문자의 종류는 모두 몇가지 인가?\nnote1: 문자열 ‘AAB @ab’ 에서 사용된 문자는 ‘A’, ‘B’, ’ ‘,’@‘, ’a’, ‘b’ 이므로 모두 6종류의 문자 및 특수문자가 사용되었다.\nnote2: ’ ‘,’+‘,’-‘,’.’, ‘/’, ‘=’, ‘@’, ‘1’, ‘a’, ‘A’ 등을 모두 다른 문자로 취급한다.\n\n(7) 리스트컴프리헨션을 이용하여 아래와 같은 리스트를 생성하라\n['a',\n 'aa',\n 'aaa',\n 'aaaa',\n 'aaaaa',\n 'aaaaaa',\n 'aaaaaaa',\n 'aaaaaaaa',\n 'aaaaaaaaa',\n 'aaaaaaaaaa'] <- a가 10개있음 \n(8) 길이가 1인 튜플을 만들어 자신의 학번을 저장하라. 길이가 1인 튜플을 만들어 자신의 영문이름을 저장하라. 두 튜플을 + 연산자로 합쳐아래와 같은 출력결과를 얻어라.\n(202143052,'guebin')\n(9) 아래와 같은 list가 있다고 하자.\ntest_lst = [['g',1],['u',5],['e',2],['b',8],['i',2],['n',9]]\ntest_lst와 리스트컴프리헨션을 이용하여 아래를 출력하는 코드를 구현하라.\n['g', 'uuuuu', 'ee', 'bbbbbbbb', 'ii', 'nnnnnnnnn']\n(10) 다음은 학생들의 출석,레포트,중간고사,기말고사 점수를 입력으로 하여 학점을 계산하는 함수이다.\ndef grade(attendance, report, mid, final): \n    if attendance<70: \n        credit = 'F' \n    else: \n        total_score = attendance * 0.1 + report * 0.2 + mid * 0.3 + final * 0.4 \n        if total_score > 80: \n            credit = 'A+' \n        else:\n            credit = 'B0' \n    return credit \n아래는 학생들의 학번, 출석점수, 레포트, 중간고사, 기말고사 점수가 입력된 리스트이다.\ndata = [['202212345', [100,95,25,90]],\n        ['202212346', [60,90,95,95]],\n        ['202212347', [50,90,45,35]],\n        ['202212348', [90,90,50,75]],\n        ['202212349', [100,95,85,85]],\n        ['202212350', [90,90,100,95]],\n        ['202212351', [100,95,100,95]],\n        ['202212352', [95,85,80,60]],\n        ['202212353', [100,90,60,55]],\n        ['202212354', [100,85,70,95]],\n        ['202212355', [100,95,40,100]]]\n아래의 ???를 적절하게 완성하여 학생들의 학점을 계산하는 코드를 완성하라.\n[grade(???) for _, scores in data] \n(11) 길이가 0인 문자열을 선언하라.\n\n(12)-(15)\n(12) dir(plt)와 dir(np)를 각각 실행하라. 실행결과를 각각 a,b로 저장하라. a,b의 type은 무엇인가?\n(13) a의 원소와 b의 원소의 수를 각각 구하라.\n(14) a와 b의 공통원소의 수를 구하라.\n(15) a와 b의 원소를 합친 리스트를 만들어라. (공통원소는 중복하여 합치지 않는다)\n\n(16)-(18) 아래와 같은 dictionary가 있다.\ntest_dic = {'202212345': {'att':100,'rep':95,'mid':25,'fin':90},\n            '202212346': {'att':60,'rep':90,'mid':95,'fin':95},\n            '202212347': {'att':50,'rep':90,'mid':45,'fin':35},\n            '202212348': {'att':90,'rep':90,'mid':50,'fin':75},\n            '202212349': {'att':100,'rep':95,'mid':85,'fin':85},\n            '202212350': {'att':90,'rep':90,'mid':100,'fin':95},\n            '202212351': {'att':100,'rep':95,'mid':100,'fin':95},\n            '202212352': {'att':95,'rep':85,'mid':80,'fin':60},\n            '202212353': {'att':100,'rep':90,'mid':60,'fin':55},\n            '202212354': {'att':100,'rep':85,'mid':70,'fin':95},\n            '202212355': {'att':100,'rep':95,'mid':40,'fin':100}}\n여기에서 202212345등은 학번을, att는 출석점수, rep는 레포트점수, mid는 중간고사점수, fin은 기말고사 점수를 의미한다.\n(16) get 메소드를 이용하여 202212353에 해당하는 학생의 성적을 아래와 같이 리턴하라.\n{'att': 100, 'rep': 90, 'mid': 60, 'fin': 55}\n(17) 202212354의 레포트 점수를 리턴하라.\n(18) 학생들의 학번을 리턴하는 코드를 작성하라.\n\n(19) shape이 ()인 numpy이 array를 만들어라. (즉 차원이 0인 np.array를 만들어라)\n(20) shape이 (2,2)인 단위행렬을 만들어라.\n(21) a의 모든 원소에 1을 더하는 코드를 작성하라.\na=[1,3,2,5,-3,3,8,2,3,1] \n(22) 아래와 같은 수열을 생성하라.\n1,3,6,10,15,21,28,36,45, ... , 378, 406, 435\nhint: 이 수열에서 \\(a_n-a_{n-1}=n, ~n\\geq 2\\) 이다. 즉 3-1=2, 6-3=3, 10-6=4, …\n(23) 아래와 같은 수열을 생생성하라.\n0,1,2,3,4,5,...,99 \n위의 수열에서 1,4,7,10,13,… 번째의 원소를 뽑아라. (첫번째 원소는 0이다)\n(24) numpy를 이용하여 아래의 역행렬을 구하라. \\[\\begin{bmatrix}\n1&  0 \\\\\n0&  3\n\\end{bmatrix}\\]\n\n(25)-(30)\na,b가 아래와 같이 주어졌다고 하자.\na=[1]*10 \nb=[2]*10 \n(25) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n(26) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([[1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2]])\n(27) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]\n(28) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2]])\n(29) a,b와 np.stack을 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]\n(30) a,b와 np.stack을 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2]])\n(31) 아래와 같은 배열이 있다고 하자.\na=np.array([1,2,3,4,5])\nb=np.array([3,2,1,1,2])\nnumpy의 @ 연산자를 이용하여 \\(\\sum_{i=1}^{5}a_ib_i\\)를 계산하라.\n(32) 아래와 같은 배열을 생성하라.\nx=np.random.randn(100)\nnumpy의 @연산자를 이용하여 \\(\\sum_{i=1}^{100}x_i^2\\)을 계산하라.\n(33) 아래와 같은 배열을 생성하라.\na=np.array([1/100]*100)\nx=np.random.randn(100)\nnumpy의 @연산자를 이용하여 \\(\\frac{1}{n}\\sum_{i=1}^{n}x_i\\)를 계산하라.\n(34) 표준정규분포에서 100개의 난수를 생성하라.\n(35) 아래와 동일한 코드를 np.random.rand()로 구현하라.\nnp.random.uniform(low=2,high=4,size=(5,)) \n(36) 아래와 같은 배열을 선언하라.\na=np.random.randn(100) \nnp.where를 이용하여 a의 모든 음수를 0으로 바꾸는 코드를 작성하라.\n(37) 아래와 같은 배열을 선언하라.\na=np.random.randn(100) \n위 배열의 최소값이 위치한 index를 return하라.\n(38) 아래와 같은 배열을 선언하라.\n\na=np.arange(12).reshape(3,4)\na\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n차원의 수를 유지하면서 1열을 추출하는 코드를 작성하라. 즉 결과가 아래와 같이 나오도록 하라.\narray([[0],\n       [4],\n       [8]])\n(39)-(40)\n(39) 자신의 학번으로 random seed 를 설정하라. [20,25)의 범위에서 100개의 정수를 랜덤으로 생성해 (10,10) shape의 배열을 만들어라.\n(40) 39의 결과에서 20,21,22 는 각각 몇개씩 있는가?\n\n\n\n\n(1)-(6) 아래의 코드를 실해하여 test_dic를 생성하라.\nnp.random.seed(43052)\natt = np.random.choice(np.arange(10,21)*5,200)\nrep = np.random.choice(np.arange(5,21)*5,200)\nmid = np.random.choice(np.arange(0,21)*5,200)\nfin = np.random.choice(np.arange(0,21)*5,200)\nkey = ['202212'+str(s) for s in np.random.choice(np.arange(300,501),200,replace=False)]\ntest_dic = {key[i] : {'att':att[i], 'rep':rep[i], 'mid':mid[i], 'fin':fin[i]} for i in range(200)}\ndel(att);del(rep);del(mid);del(fin);del(key)\n여기에서 202212345등은 학번을, att는 출석점수, rep는 레포트점수, mid는 중간고사점수, fin은 기말고사 점수를 의미한다.\n(1) test_dic에서 출석점수가 70이상(70>=)인 학생들의 학번을 출력하는 코드를 작성하라.\n\nnp.random.seed(43052)\natt = np.random.choice(np.arange(10,21)*5,200)\nrep = np.random.choice(np.arange(5,21)*5,200)\nmid = np.random.choice(np.arange(0,21)*5,200)\nfin = np.random.choice(np.arange(0,21)*5,200)\nkey = ['202212'+str(s) for s in np.random.choice(np.arange(300,501),200,replace=False)]\ntest_dic = {key[i] : {'att':att[i], 'rep':rep[i], 'mid':mid[i], 'fin':fin[i]} for i in range(200)}\ndel(att);del(rep);del(mid);del(fin);del(key)\n\n(2) test_dic에서 출석점수가 70미만(<70)인 학생들의 수를 구하라.\n(3) test_dic에서 출석점수가 70이상(70>=)인 학생들의 중간고사 점수의 평균을 계산하라.\n\nnp.mean([test_dic[k]['mid'] for k in test_dic if test_dic[k]['mid']>=70])\n\n85.41666666666667\n\n\n(4) test_dic에서 중간고사 점수를 출력하는 코드를 작성하라.\n(5) test_dic에서 중간고사 점수의 표준편차와 레포트점수의 표준편차를 구하여라. 어떤것이 더 큰가?\n(6) test_dic에서 중간고사 점수가 가장 높은 사람의 학번을 출력하라.\n주의: att,rep,mid,fin,key를 실행하여 소멸시키지 않고 그대로 이용하거나 np.random.choice()를 이용하여 재생성한 뒤 계산할 경우 0점 처리함. - 예를들면 (5)의 경우 np.std(mid), np.std(rep) 와 같은 식으로 구현하면 0점 처리함.\n\n(7) 성공확률이 0.45인 시행이 있다고 하자. 이 시행을 100번의 시행하였을 경우 73번 이상 성공할 확률은 얼마인가? 시뮬레이션을 이용하여 근사계산하라.\n(8) 성공확률이 0.45인 시행이 있다고 하자. 이 시행을 100번 시행하였을 경우 10번이하로 실패하거나 90번이상 성공할 확률은 얼마인가? 시뮬레이션을 이용하여 근사계산하라.\n(9) 아래와 같은 행렬을 선언하자.\n\nA=np.arange(2*1).reshape(2,1)\nB=np.arange(2*2).reshape(2,2)\nC=np.arange(2*3).reshape(2,3)\nD=np.arange(3*3).reshape(3,3)\nE=np.arange(3*2).reshape(3,2)\nF=np.arange(3*1).reshape(3,1)\n\n아래의 블락매트릭스를 만들어라.\n\\(\\begin{bmatrix} a_{11} & b_{11} & b_{12} & c_{11} & c_{12} & c_{13} \\\\ a_{21} & b_{21} & b_{22} & c_{21} & c_{22} & c_{23} \\\\ d_{11} & d_{12} & d_{13} & e_{11} & e_{12} & f_{11} \\\\ d_{21} & d_{22} & d_{23} & e_{21} & e_{22} & f_{21} \\\\ d_{31} & d_{32} & d_{33} & e_{31} & e_{32} & f_{31} \\end{bmatrix}\\)\n여기에서 \\(a_{ij}\\)는 매트릭스 \\({\\bf A}\\)의 원소이다.\n(10) 표준정규분포에 10000개의 난수를 아래와 같이 생성하라.\n\nx=np.random.randn(10000)\ny=np.random.randn(10000)\n\n\\((i,j)\\) 번째 원소가 \\((x_i-y_i)^2\\)인 (10000,10000) 매트릭스를 만들어라.\n\n(11)-(16)\n아래와 같은 매트릭스를 생성하라.\n\nnp.random.seed(43052)\na=np.random.randn(10000).reshape(100,100)\na\n\narray([[ 0.38342049,  1.0841745 ,  1.14277825, ..., -0.18506968,\n         1.05538764,  1.18701443],\n       [-0.25027283, -1.58045215,  0.1124153 , ...,  1.0321894 ,\n         0.40438012, -0.13491595],\n       [-0.76763724, -0.64294232, -0.24782396, ..., -0.01530161,\n         0.89125897, -0.82683395],\n       ...,\n       [-1.41379028,  0.79611333, -0.71011837, ..., -0.9860352 ,\n         1.30755244,  2.18677233],\n       [ 1.33968105, -0.78457449, -0.10405858, ..., -0.71110186,\n         0.99841286,  2.34371635],\n       [-0.66422032, -0.07550233,  0.7405869 , ...,  1.03232398,\n        -0.18988252, -0.03578389]])\n\n\n(11) 각 행의 합을 구하라. 즉 1행의 합, 2행의 합, … 100행의 합을 계산하라. - 1행의합 = 0.38342049 + 1.0841745 + … + 1.18701443\n(12) (11)의 결과로 나온 배열의 표준편차를 구하라.\n(13) 각 열의 평균을 구하라. 즉 1열의 평균, 2열의 평균, … , 100열의 평균을 계산하라.\n(14) (13)의 결과로 나온 배열의 표준편차를 구하라.\n(15) a의 원소중 a>0 을 만족하는 원소의 평균을 구하여라.\n(16) a의 원소중 a>3을 만족하는 원소의 수를 count하라.\n\n(17)-(18)\n아래와 같은 배열 a를 고려하자.\n\nnp.random.seed(43052)\na=np.random.binomial(1,0.2,size=(10000,))\na\n\narray([1, 0, 1, ..., 1, 1, 0])\n\n\n(17) 0에서 1로 바뀌는 부분을 count하라.\n(18) 1에서 0으로 바뀌는 부분을 count하라.\n[예시] 아래의 배열에서 0에서 1로 부분은 모두 세 군데이고, 1에서 0으로 바뀌는 부분은 모두 두 군데 이다.\n0 0 0 1 0 1 0 0 0 1 1 1 \n\n(19)-(25)\n(19) \\(i=1,2,\\dots,1000\\)에 대하여 아래를 각각 구하라.\n\\[x_i= \\cos(t_i)+\\cos(3t_i)+\\cos(5t_i)\\]\n\\[y_i= \\sin(t_i)+\\sin(4t_i)\\]\n여기에서 \\(t_i=\\frac{2\\pi i }{1000}\\) 이다.\n(20) \\((x_i,y_i)\\)를 그려라.\n(21) 아래와 같은 변환을 통하여 \\((w_i,z_i)\\)를 얻어라.\n\\[w_i= \\frac{1}{\\sqrt{2}}x_i - \\frac{1}{\\sqrt{2}}y_i\\]\n\\[z_i= \\frac{1}{\\sqrt{2}}x_i + \\frac{1}{\\sqrt{2}}y_i\\]\n\\((w_i,z_i)\\)를 시각화 하라.\n(22) 아래와 같은 매트릭스를 만들어라.\n\\[{\\bf A}=\\begin{bmatrix}\nx_1 & y_1 \\\\\nx_2 & y_2 \\\\\n\\dots & \\dots \\\\\nx_n & y_n\n\\end{bmatrix}\\]\n(23) \\({\\bf A} {\\bf B}\\)의 첫번째 열과 두번째 열을 시각화한 결과가 \\((w_i,z_i)\\)과 동일하도록 적당한 (2,2) 매트릭스 \\({\\bf B}\\)를 만들어라.\n(24) \\({\\bf A}{\\bf B}^2\\)의 첫번째 열과 두번째 열을 시각화 하라.\n(25) \\(n=3,4,5,6,\\dots\\) 에 대하여 \\({\\bf A}{\\bf B}^n\\)을 반복적으로 그려보라. \\((x_i,y_i)\\)의 시각화 결과와 동일한 가장 작은 \\(n\\)은 얼마인가? \\((w_i,z_i)\\)의 시각화 결과와 동일한 가장 작은 \\(n\\)은 얼마인가?\n\n\n\n\n(1) 아래는 python을 설치하는 방법을 소개한 url 이다. 직접 url에 들어가서 설치하는 방법을 읽어보고 곤이, 철용, 아귀, 짝귀 중 옳은말을 한 사람을 모두 골라라. - https://www.pythonlikeyoumeanit.com/Module1_GettingStartedWithPython/Installing_Python.html\n(곤이) 해당 방법은 아나콘다를 이용하여 파이썬을 설치하는 방법이다.\n(철용) 그래서 이 방법으로는 가상환경을 만들 수 없겠군.\n(아귀) 위 url에 제시된 방법으로 설치하면 주피터가 자동설치 된다.\n(짝귀) 따라서 위의 방법으로 설치하면 IDE는 주피터만 사용할 수 있다.\n(2) 곤이는 1부터 10까지의 합을 구하는 코드를 작성하기 위하여 아래와 같이 mysum.py 파일을 만들었다.\n## mysum.py\ntotal = 0 \nfor i in range(1,11): \n    total = total + i\nprint(total)\n곤이의 컴퓨터는 윈도우이며 아니콘다를 이용해 파이썬을 설치하였다고 가정한다. 다음중 옳은 설명을 한 사람을 모두 고르라.\n(곤이) mysum.py를 실행하기 위해서는 anaconda prompt 에서 mysum.py가 위치한 폴더로 이동한 뒤 %run mysum.py 를 실행하면 된다.\n(철용) ipython을 이용하여 실행하기 위해서는 anaconda prompt 에서 mysum.py가 위치한 폴더로 이동한 뒤 %run mysum.py을 실행해도 된다.\n(아귀) 철용의 방법에서 %run mysum.py 대신에 !python mysum.py를 쳐도 동작한다.\n(짝귀) 하지만 다른 가상환경을 만들 경우 철용과 아귀의 방법으로 실행할 수 없다는 단점이 있다."
  },
  {
    "objectID": "posts/2022-03-16-(3주차) 3월16일.html",
    "href": "posts/2022-03-16-(3주차) 3월16일.html",
    "title": "PP2023",
    "section": "",
    "text": "(3주차) 3월16일\n\n튜플, 슬기롭게 튜플 사용하기\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n강의영상\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-xzkiL-5YCO3U3G93agEjwR\n\n- (1/2) 튜플, 슬기롭게 튜플 사용하기 (1)\n- (2/2) 슬기롭게 튜플 사용하기 (2)\n\n\n튜플\n\n리스트 vs 튜플\n- 컨테이너형타입이라는 점, 그리고 연산 및 인덱싱을 하는 방법은 리스트와 같음 - 차이점1: [] 대신에 ()를 사용한다. - 차이점2: 불변형이다. (원소의 값을 바꿀 수 없음) - 차이점3: 하나의 원소를 선언할 때는 (1,)와 같이 해야 한다. - 차이점4: 의미가 명확할때는 튜플의 ()를 생략가능하다.\n- 컨테이너형이라는 것이 무슨의미?\n\na=(4,6,'pencil', 3.2+4.6j, [3,4]) \n\n\ntype(a[2])\n\nstr\n\n\n\ntype(a[3])\n\ncomplex\n\n\n- 불변형이라는 것은 무슨의미?\n\na[2] = 'Pencil'\n\nTypeError: 'tuple' object does not support item assignment\n\n\n참고로 a를 튜플이 아니라 리스트로 선언하면 값이 잘 바뀐다.\n\na=[4,6,'pencil', 3.2+4.6j, [3,4]]\n\n\na[2]\n\n'pencil'\n\n\n\na[2]='Pencil'\n\n\na\n\n[4, 6, 'Pencil', (3.2+4.6j), [3, 4]]\n\n\n- 하나의 원소로 이루어진 튜플을 만들때는 쉼표를 붙여야 함.\n\n[1]+[2,3,4]\n\n[1, 2, 3, 4]\n\n\n\n(1,)+(2,3,4)\n\n(1, 2, 3, 4)\n\n\n- 마지막차이점! 의미가 명확할때 튜플의 괄호는 생략가능하다. (이게 중요합니다)\n\na=1,2\na\n\n(1, 2)\n\n\n의미가 명확할때 생략해야함\n\n1,2 + 3,4,5 \n\n(1, 5, 4, 5)\n\n\n\n(1,2) + (3,4,5) \n\n(1, 2, 3, 4, 5)\n\n\n\n\n선언\n- 소괄호를 이용\n\na=(1,2,3)\na\n\n(1, 2, 3)\n\n\n\ntype(a)\n\ntuple\n\n\n- 생략가능하다는 점이 포인트\n\na=1,2,3\na\n\n(1, 2, 3)\n\n\n\ntype(a)\n\ntuple\n\n\n- 원소가 하나인 튜플을 만들고 싶다면?\n\na=(1,)\na\n\n(1,)\n\n\n\n\n연산\n- 리스트와 동일\n\n(1,2)+(3,4,5)\n\n(1, 2, 3, 4, 5)\n\n\n\n(1,2)*2\n\n(1, 2, 1, 2)\n\n\n\n\n인덱싱\n- 리스트와 동일\n\na=(1,2,3,-4,-5)\na\n\n(1, 2, 3, -4, -5)\n\n\n\na[-1]\n\n-5\n\n\n\na[-3:]\n\n(3, -4, -5)\n\n\n\n\n\n튜플고급\n\n튜플을 왜 불변형으로 만들었을까?\n\n책의설명: 실수로 값을 변경할 수 있도록 방지할 수 있다.\nshallow copy / deep copy 를 막을 수 있는 무기\n\n\n\n튜플을 슬기롭게 사용하는 방법 (\\(\\star\\star\\star\\star\\star\\))\n- 예제: 여러변수를 동시에 출력하고 싶을 경우 (다중출력?)\n변수를 아래와 같이 선언하였다고 하자.\n\na=1\nb=2\nc=3 \n\n선언된 값을 확인하려면?\n\na\n\n1\n\n\n\nb\n\n2\n\n\n\nc\n\n3\n\n\n튜플을 이용하면?\n\na,b,c # 괄호하나 생략하는것이 이렇게 편하다..\n\n(1, 2, 3)\n\n\n- 예제: 다중할당1 (여러개의 변수를 동시에 선언하고 싶을 경우)\n\nname, age, sex, height, weight = 'Tom', 20, 'M', 180, 70 \n\n\nname, age, sex, height, weight\n\n('Tom', 20, 'M', 180, 70)\n\n\n\nheight\n\n180\n\n\n- 예제: 다중할당2, 위도와 경도\n\ncoor = (37,127) # 서울 \ncoor\n\n(37, 127)\n\n\n\nlat, long = coor\n\n\nlat \n\n37\n\n\n\nlong \n\n127\n\n\n- 잠깐만: 다중할당은 꼭 튜플에서만 가능한가?\n그건 아니다…\n\n[x,y,z] = [1,2,3] \nx,y,z # 다중출력 \n\n(1, 2, 3)\n\n\n\n[x,y] = 'hi'\nx,y \n\n('h', 'i')\n\n\n튜플과 같이 사용하면 가독성이 극대화 (그래서 다중할당은 거의 튜플과 세트로 사용함)\n\nx,y,z = 1,2,3\nx,y,z # 다중출력 \n\n(1, 2, 3)\n\n\n\nx,y = 'hi'\nx,y \n\n('h', 'i')\n\n\n- 예제: 임시변수 사용없이 두 변수의 값을 교환\n\na=10\nb=20\n\n\na,b = b,a \n\n\na\n\n20\n\n\n\nb\n\n10\n\n\n- 예제: for문과 튜플\n\nlst = [['guebin', 202112345, 'M'],\n       ['iu',202254321, 'F'],\n       ['hodong', 202011223, 'M']]\nlst\n\n[['guebin', 202112345, 'M'],\n ['iu', 202254321, 'F'],\n ['hodong', 202011223, 'M']]\n\n\n\nfor i in lst: \n    print(i)\n\n['guebin', 202112345, 'M']\n['iu', 202254321, 'F']\n['hodong', 202011223, 'M']\n\n\n\nfor name,studentid,sex in lst: \n    print(name)\n\nguebin\niu\nhodong\n\n\n\nfor name,studentid,sex in lst: \n    print(name,sex)\n\nguebin M\niu F\nhodong M\n\n\n- 예제: for문과 튜플, dummy variable _\n\nfor name,studentid,sex in lst: \n    print(studentid)\n\n202112345\n202254321\n202011223\n\n\n\nfor _,studentid,_ in lst: \n    print(studentid)\n\n202112345\n202254321\n202011223\n\n\n\nfor _,_,sex in lst: \n    print(sex)\n\nM\nF\nM\n\n\n\nfor name,_,sex in lst: \n    print(name,sex)\n\nguebin M\niu F\nhodong M\n\n\n\nfor name,_  in lst: \n    print(name)\n\nValueError: too many values to unpack (expected 2)\n\n\n\nfor name,*args  in lst: \n    print(name)\n\nguebin\niu\nhodong\n\n\n- 예제: 튜플과 언패킹연산자 *\n\nhead, body, *tail = range(1,11) \nhead, body, tail\n\n(1, 2, [3, 4, 5, 6, 7, 8, 9, 10])\n\n\n\nhead1,head2, *body, tail1,tail2,tail3 = range(1,11) \nhead1,head2, body, tail1,tail2,tail3 \n\n(1, 2, [3, 4, 5, 6, 7], 8, 9, 10)\n\n\n\n*head, body, tail = range(1,11) \nhead, body, tail\n\n([1, 2, 3, 4, 5, 6, 7, 8], 9, 10)\n\n\n(관찰)\n그러고 보니까..\nhead1,head2, body, tail1,tail2,tail3  = (1, 2, [3,4,5,6,7], 8, 9, 10)\nhead1,head2, *body, tail1,tail2,tail3   = (1, 2, 3,4,5,6,7, 8, 9, 10)\n이렇다는 거잖아?\n*를 붙이면 1차원 자료구조가 풀린다..?\n\n*[1,2,3]\n\nSyntaxError: can't use starred expression here (386627056.py, line 1)\n\n\n\nprint([1,2,3])\n\n[1, 2, 3]\n\n\n\nprint(*[1,2,3]) ## 이런 느낌이란 말이지..\n\n1 2 3\n\n\n- 예제: 함수의 입력으로 *args를 넣을때\n[예비학습] 함수 벼락치기\n\ndef myadd(a,b): \n    return a+b \n\n\nmyadd(3,-3)\n\n0\n\n\n벼락치기 끝\n예제시작: 두점 사이의 거리를 구하는 함수를 만들어 보자.\n점 \\(p=(p_x,p_y)\\)와 \\(q=(q_x,q_y)\\)의 거리는 \\(\\sqrt{(p_x-q_x)^2+(p_y-q_y)^2}\\)이다. 이것을 계산하는 프로그램을 만들자.\n\nimport numpy as np \ndef dist(px,py,qx,qy): \n    return np.sqrt((px-qx)**2 + (py-qy)**2)\n\n\np=(0,3)\nq=(4,0)\ndist(p,q)\n\nTypeError: dist() missing 2 required positional arguments: 'qx' and 'qy'\n\n\n(방법1)\n\npx,py = (0,3)\nqx,qy = (4,0) \ndist(px,py,qx,qy)\n\n5.0\n\n\n(방법2)\n\ndef dist2(p,q):\n    px,py = p \n    qx,qy = q \n    return np.sqrt((px-qx)**2 + (py-qy)**2)\n\n### 이건 나쁜 생각이에요.. \n# def dist2(p,q):\n#     px=p[0]\n#     py=p[1]\n#     qx=q[0]\n#     qy=q[1]\n#     return np.sqrt((px-qx)**2 + (py-qy)**2)\n\n\np=(0,3)\nq=(4,0)\ndist2(p,q)\n\n5.0\n\n\n(방법3)\n\ndist(*p,*q) # 입력을 *(px,py), *(qx,qy) 형태로 넣기도하고.. \n\n5.0\n\n\n\ndist(px,py,qx,qy) # 입력을 px,py,qx,qy 형태로 넣기도하고.. \n\n5.0\n\n\n(숙제) 원소로 자기학번을 포함하는 튜플을 만들어서 제출 (길이가 1인 튜플을 만들어서 제출)"
  },
  {
    "objectID": "posts/2022-05-25-(13주차) 5월25일.html",
    "href": "posts/2022-05-25-(13주차) 5월25일.html",
    "title": "PP2023",
    "section": "",
    "text": "클래스 공부 5단계\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-xtwQxx2ib8xsD6p4GYy7yE\n\n- (1/4) __add__ (1)\n- (2/4) __add__ (2)\n- (3/4) __add__ (3)\n- (4/4) __mul__\n\n\n\n\nimport numpy as np\n\n\n\n\n- 지난시간까지 배운것: RPS자료형에 한정해서 print()등의 기능을 조작할 수 있었다. (재정의 할 수 있었다)\n- 이번시간에 배울것: 특정자료형에 한정하여 print 이외의 파이썬 내부기능을 조작하여 보자. (재정의하여 보자)\n\n\n- 아래의 연산구조를 관찰하자.\n\na=1 \nb=2 \na+b \n\n3\n\n\n\na라는 인스턴스와 b라는 인스턴스를 +라는 기호가 연결하고 있다.\n\n- 이번에는 아래의 연산구조를 관찰하자.\n\na=[1,2]\nb=[3,4]\na+b\n\n[1, 2, 3, 4]\n\n\n\na라는 인스턴스와 b라는 인스턴스를 +라는 기호가 연결하고 있다.\n\n- 동작이 다른 이유? - 클래스를 배우기 이전: int자료형의 +는 “정수의 덧셈”을 의미하고 list자료형의 +는 “자료의 추가”를 의미한다. - 클래스를 배운 이후: 아마 클래스는 +라는 연산을 정의하는 숨겨진 메소드가 있을것이다. (print가 그랬듯이) 그리고 int클래스에서는 그 메소드를 “정수의 덧셈”이 되도록 정의하였고 list클래스에서는 그 메소드를 “자료의 추가”를 의미하도록 정의하였다.\n- 아래의 결과를 관찰\n\na=1\nb=2\n\n\na.__add__(b)\n\n3\n\n\n\nb.__add__(a)\n\n3\n\n\n\na=[1,2]\nb=[3,4]\n\n\na.__add__(b)\n\n[1, 2, 3, 4]\n\n\n\nb.__add__(a)\n\n[3, 4, 1, 2]\n\n\n- a+b는 사실 내부적으로 a.__add__(b)의 축약구문이다. 따라서 만약 a.__add__(b)의 기능을 바꾸면 (재정의하면) a+b의 기능도 바뀔 것이다.\n\n\n\n- 학생예제\n\nclass Student:\n    def __init__(self,age=20.0, semester=0): \n        self.age = age\n        self.semester = semester\n        print(\"입학을 축하합니다. 당신의 나이는 {}이고 현재 학기는 {}학기 입니다.\".format(self.age,self.semester))\n    def __add__(self,val): \n        # val == 0: 휴학 \n        # val == 1: 등록 \n        if val==0: \n            self.age=self.age+0.5\n        elif val==1:\n            self.age=self.age+0.5 \n            self.semester= self.semester+1 \n    def _repr_html_(self):\n        html_str = \"\"\"\n        나이: {} <br/>\n        학기: {} <br/>\n        \"\"\"\n        return html_str.format(self.age,self.semester)\n\n\niu= Student()\n\n입학을 축하합니다. 당신의 나이는 20.0이고 현재 학기는 0학기 입니다.\n\n\n\niu\n\n\n        나이: 20.0 \n        학기: 0 \n        \n\n\n\niu + 1 ## 1학년 1학기 등록\niu\n\n\n        나이: 20.5 \n        학기: 1 \n        \n\n\n\niu + 0 ## 휴학함\niu \n\n\n        나이: 21.0 \n        학기: 1 \n        \n\n\n- 연산을 연속으로 하고 싶다.\n\niu + 1 + 0 + 0 + 0 + 0\n\nTypeError: unsupported operand type(s) for +: 'NoneType' and 'int'\n\n\n- 에러의 이유?\n(되는코드)\n\n(1+1)+1 # 1+1+1은 이렇게 볼 수 있다\n\n3\n\n\n\n_a = (1+1) \ntype(_a)\n\nint\n\n\n\n_a+1 # 이 연산은 int인스턴스 + int인스턴스 \n\n3\n\n\n(안되는코드)\n\niu+1+1\n\nTypeError: unsupported operand type(s) for +: 'NoneType' and 'int'\n\n\n\n_a=iu+1 \ntype(_a)\n\nNoneType\n\n\n\n_a+1 \n\nTypeError: unsupported operand type(s) for +: 'NoneType' and 'int'\n\n\n- 에러를 해결하는 방법: iu+1의 결과로 Student클래스의 인스턴스가 리턴되면 된다.\n\nclass Student:\n    def __init__(self,age=20.0, semester=0): \n        self.age = age\n        self.semester = semester\n        print(\"입학을 축하합니다. 당신의 나이는 {}이고 현재 학기는 {}학기 입니다.\".format(self.age,self.semester))\n    def __add__(self,val): \n        # val == 0: 휴학 \n        # val == 1: 등록 \n        if val==0: \n            self.age=self.age+0.5\n        elif val==1:\n            self.age=self.age+0.5 \n            self.semester= self.semester+1 \n        return self\n    def _repr_html_(self):\n        html_str = \"\"\"\n        나이: {} <br/>\n        학기: {} <br/>\n        \"\"\"\n        return html_str.format(self.age,self.semester)\n\n\niu = Student()\n\n입학을 축하합니다. 당신의 나이는 20.0이고 현재 학기는 0학기 입니다.\n\n\n\niu+1 # __add__의 return에 Student클래스의 인스턴스가 리턴되면서 자동으로 _repr_html_() 실행\n\n\n        나이: 20.5 \n        학기: 1 \n        \n\n\n\niu+1 +0+0+0+0\n\n\n        나이: 23.0 \n        학기: 2 \n        \n\n\n\n\n\n\nclass RPS: \n    def __init__(self,candidate=['가위','바위','보']):\n        self.candidate = candidate\n        self.actions = list() \n        self.results = list()\n    def __mul__(self,other):\n        self.choose()\n        other.choose()\n        if self.actions[-1]=='가위' and other.actions[-1]=='가위':\n            self.results.append(0)\n            other.results.append(0)\n        if self.actions[-1]=='가위' and other.actions[-1]=='바위':\n            self.results.append(-1)\n            other.results.append(1)\n        if self.actions[-1]=='가위' and other.actions[-1]=='보':\n            self.results.append(1)\n            other.results.append(-1)\n        if self.actions[-1]=='바위' and other.actions[-1]=='가위':\n            self.results.append(1)\n            other.results.append(-1)\n        if self.actions[-1]=='바위' and other.actions[-1]=='바위':\n            self.results.append(0)\n            other.results.append(0)\n        if self.actions[-1]=='바위' and other.actions[-1]=='보':\n            self.results.append(-1)\n            other.results.append(1)\n        if self.actions[-1]=='보' and other.actions[-1]=='가위':\n            self.results.append(-1)\n            other.results.append(1)\n        if self.actions[-1]=='보' and other.actions[-1]=='바위':\n            self.results.append(1)\n            other.results.append(-1)\n        if self.actions[-1]=='보' and other.actions[-1]=='보':\n            self.results.append(0)\n            other.results.append(0)\n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate))\n    def _repr_html_(self):\n        html_str = \"\"\"\n        낼 수 있는 패: {} <br/> \n        액션: {} <br/>\n        승패: {}\n        \"\"\"\n        return html_str.format(self.candidate,self.actions,self.results)\n\n\na=RPS()\nb=RPS()\n\n\na\n\n\n        낼 수 있는 패: ['가위', '바위', '보']  \n        액션: [] \n        승패: []\n        \n\n\n\nb\n\n\n        낼 수 있는 패: ['가위', '바위', '보']  \n        액션: [] \n        승패: []\n        \n\n\n\na*b\n\n\na\n\n\n        낼 수 있는 패: ['가위', '바위', '보']  \n        액션: ['보'] \n        승패: [-1]\n        \n\n\n\nb\n\n\n        낼 수 있는 패: ['가위', '바위', '보']  \n        액션: ['가위'] \n        승패: [1]\n        \n\n\n\nfor i in range(5):\n    a*b\n\n\na\n\n\n        낼 수 있는 패: ['가위', '바위', '보']  \n        액션: ['보', '가위', '바위', '바위', '가위', '보'] \n        승패: [-1, -1, 0, 1, -1, 1]\n        \n\n\n\nb\n\n\n        낼 수 있는 패: ['가위', '바위', '보']  \n        액션: ['가위', '바위', '바위', '가위', '바위', '바위'] \n        승패: [1, 1, 0, -1, 1, -1]\n        \n\n\n\nfor i in range(50000):\n    a*b\n\n\nsum(a.results)/len(a.results)\n\n-0.005739311282646082\n\n\n\nsum(b.results)/len(a.results)\n\n0.005739311282646082\n\n\n\n\n\n\nRPS클래스에서 player a와 player b를 만들어라. Player a는 [‘가위’,‘보’] 중에 하나를 낼 수 있다. 그리고 Player b는 [‘가위’,‘바위’] 중에 하나를 낼 수 있다. 두 player는 가지고 있는 패를 (같은확률로) 랜덤으로 낸다. (즉 player a가 가위만 내거나 보만 내는 경우는 없다.)\n\n누가 더 유리한가? 이유를 스스로 생각해보라. (이유를 정리하여 숙제로 제출할 필요 없음)\n50000번의 시뮬레이션을 해보고 결과를 분석해보라."
  },
  {
    "objectID": "posts/2022-05-16-(11주차) 5월16일.html",
    "href": "posts/2022-05-16-(11주차) 5월16일.html",
    "title": "PP2023",
    "section": "",
    "text": "클래스 공부 2단계\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-xijoi9Bax786-eA69hwrnQ\n\n- (1/5) __init__\n- (2/5) self의 의미\n- (3/5) 파이썬의 비밀1\n- (4/5) 파이썬의 비밀2\n- (5/5) 숙제설명\n\n\n\n\nfrom PIL import Image\nimport requests\n\n\n\n\n\n\n- STOOOP을 다시 복습\n\nurl1 = 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true'\nurl2 = 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop2.png?raw=true' \n\n\nclass STOOOP: \n    title = '학교폭력!' \n    url = url1\n    end = '멈춰~~~~'\n    def stop(self):\n        print(self.title)\n        display(Image.open(Image.io.BytesIO(requests.get(self.url).content)))\n        print(self.end) \n\n\ns1=STOOOP() # STOOOP이라는 클래스에서 s1이라는 인스턴를 만드는 과정 \n\n\ns1.title,s1.url,s1.end\n\n('학교폭력!',\n 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true',\n '멈춰~~~~')\n\n\n\ns1.stop()\n\n학교폭력!\n\n\n\n\n\n멈춰~~~~\n\n\n- 왜 s1의 default title이 항상 “학교폭력”이어야 하는가? -> __init__의 개발\n- 성능4: __init__()함수를 이용하여 “클래스->인스턴스”의 시점에서 수행하는 일련의 동작들을 묶어서 수행할 수 있음\n\nclass STOOOP: \n    #title = '학교폭력!' \n    url = url1\n    end = '멈춰~~~~'\n    def __init__(self,title): \n        self.title = title\n    def stop(self):\n        print(self.title)\n        display(Image.open(Image.io.BytesIO(requests.get(self.url).content)))\n        print(self.end) \n\n- 잘못된사용\n\ns1=STOOOP() # 이 시점에서 __init__ 이 수행된다!\n\nTypeError: __init__() missing 1 required positional argument: 'title'\n\n\n- 올바른사용\n\ns1=STOOOP(\"수강신청매크로\") # 이 시점에서 __init__ 이 수행된다!\n\n\ns1.title,s1.url,s1.end\n\n('수강신청매크로',\n 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true',\n '멈춰~~~~')\n\n\n\ns1.stop()\n\n수강신청매크로\n\n\n\n\n\n멈춰~~~~\n\n\n- 잘못된사용에서 에러가 발생한 이유?\nTypeError: __init__() missing 1 required positional argument: 'title'\n\ns1 = STOOOP() 이 실행되는 순간 __init__()이 내부적으로 실행된다.\n그런데 __init__()의 첫번째 입력인 self는 입력안해도 무방했음. 그런데 두번째 입력은 title은 입력을 해야했음.\n그런데 title을 입력하지 않아서 발생하는 에러\n\n- __init__(self,arg1,arg2,...) 함수에 대하여 - 엄청나게 특별해 보이지만 사실 몇가지 특별한 점을 제외하고는 어떠한 마법도 없는 함수이다. - 특별한점1: 첫번째 입력으로 반드시 self를 넣어야함. (이건 사실 클래스 내의 메소드 거의 다 그러함) - 특별한점2: 클래스에서 인스턴스를 만드는 시점에 자동으로 실행된다. - 특별한점3: __init__(self,arg1,arg2,...)의 입력중 self 이외의 입력들은 “클래스->인스턴스”의 시점에서 “인스턴스이름 = 클래스이름(arg1,arg2,…)”와 같이 사용한다. (이 예제의 경우 STOOOP(title)와 같이 사용해야함)\n- title이 디폴트로 들어가는 상황도 불편했지만, title을 명시적으로 넣지 않으면 에러가 발생하는 것도 불편하다?\n\nclass STOOOP: \n    #title = '학교폭력!' \n    url = url1\n    end = '멈춰~~~~'\n    def __init__(self,title=None): \n        self.title = title\n    def stop(self):\n        print(self.title)\n        display(Image.open(Image.io.BytesIO(requests.get(self.url).content)))\n        print(self.end) \n\n\ns2 = STOOOP()\ns3 = STOOOP('KOSPI 하락')\n\n\ns2.stop()\n\nNone\n\n\n\n\n\n멈춰~~~~\n\n\n\n제목이 없으면 없는대로 출력가능\n\n\ns3.stop()\n\nKOSPI 하락\n\n\n\n\n\n멈춰~~~~\n\n\n\n\n\n- 이전 예제를 다시 복습\n\nclass Klass4:\n    n = 1\n    url = 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true'\n    def show(self):\n        display(Image.open(Image.io.BytesIO(requests.get(self.url).content)))\n        print(\"당신은 이 이미지를 {}번 보았습니다\".format(self.n))\n        self.n = self.n+1 \n\n\nk4=Klass4()\n\n\nk4.show()\n\n\n\n\n당신은 이 이미지를 3번 보았습니다\n\n\n- 위의 예제는 아래와 같이 구현할 수도 있다.\n\nclass Klass4:\n    n = 1\n    url = 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true'\n    def show(self):\n        display(Image.open(Image.io.BytesIO(requests.get(self.url).content)))\n        print(\"당신은 이 이미지를 {}번 보았습니다\".format(self.n))\n        #self.n = self.n+1 \n\n\nk4 = Klass4() \n\n\nk4.n\n\n1\n\n\n\nk4.show()\n\n\n\n\n당신은 이 이미지를 1번 보았습니다\n\n\n\nk4.n = k4.n + 1\n\n\nk4.show()\n\n\n\n\n당신은 이 이미지를 2번 보았습니다\n\n\n\nk4.n = k4.n + 1 \n\n- 결국에는 k4.n = k4.n + 1의 기능을 구현하여 넣은것이 self.n = self.n + 1 이다.\n- 따라서 self는 k4에 대응한다. 즉 self는 인스턴스의 이름에 대응한다. 우리가 하고 싶은 것은 클래스를 선언하는 시점에서 인스턴스가 생성된 이후시점에 대한 어떠한 동작들을 정의하고 싶다. 그런데 클래스를 설계하는 시점에서는 인스턴스의 이름이 정해지지 않았으므로 (아직 인스턴스가 태어나지도 않음) 이러한 동작들을 정의하기 불편하다. 그래서 클래스를 설계하는 시점에서 그 클래스로부터 만들어지는 인스턴스는 그냥 self라는 가칭으로 부른다. (굳이 비유하면 self는 인스턴스의 태명같은 것임)\n- 요약: self의 의미는 (후에 만들어질) 인스턴스의 이름이다. (즉 self는 인스턴스의 태명같은것임)\n\n\n\n탐구: 인스턴스의 자료형이 뭔지 탐구해보자!\n- 아래의 두 클래스를 선언해보자.\n\nclass STOOOP: \n    #title = '학교폭력!' \n    url = url1\n    end = '멈춰~~~~'\n    def __init__(self,title=None): \n        self.title = title\n    def stop(self):\n        print(self.title)\n        display(Image.open(Image.io.BytesIO(requests.get(self.url).content)))\n        print(self.end) \n\n\nclass Klass4:\n    n = 1\n    url = 'https://github.com/guebin/IP2022/blob/master/_notebooks/2022-05-07-stop1.jpeg?raw=true'\n    def show(self):\n        display(Image.open(Image.io.BytesIO(requests.get(self.url).content)))\n        print(\"당신은 이 이미지를 {}번 보았습니다\".format(self.n))\n        #self.n = self.n+1     \n\n- 인스턴스를 생성해보자.\n\nk4=Klass4()\ns1=STOOOP() \n\n- 타입을 알아보자.\n\nk4?\n\n\nType:        Klass4\nString form: <__main__.Klass4 object at 0x7f0a740beb80>\nDocstring:   <no docstring>\n\n\n\n\n\ns1?\n\n\nType:        STOOOP\nString form: <__main__.STOOOP object at 0x7f0a74372970>\nDocstring:   <no docstring>\n\n\n\n\n- ??? 타입은 자료형, 즉 int, float, list 이런것 아니었나??\n\na=[1,2,3]\na?\n\n\n\nType:        list\nString form: [1, 2, 3]\nLength:      3\nDocstring:  \nBuilt-in mutable sequence.\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.\n\n\n\n\n- 그런데 지금 k4, s1의 타입은 Klass4, STOOOP 이다. - 가설1: 사실 파이썬 내부에 Klass4, STOOOP이라는 자료형이 있었다. 그런데 내가 만든 k4, s1이 우연히 그 자료형을 따르는 것! (이건 너무 억지스럽다) - 가설2: type이 list인것은 사실 list라는 클래스에서 생긴 인스턴스이다 -> 리스트자료형을 찍어낼 수 있는 어떠한 클래스가 파이썬에 내부적으로 존재할 것이다. (이게 맞는것 같다)\n깨달음1\n- 가설2가 맞다? 그렇다면 아래는 모두 어딘가에서 찍혀진 인스턴스이다.\n\na=[1,2,3]\na?\n\n\n\nType:        list\nString form: [1, 2, 3]\nLength:      3\nDocstring:  \nBuilt-in mutable sequence.\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.\n\n\n\n\n\na=1,2,3\na?\n\n\n\nType:        tuple\nString form: (1, 2, 3)\nLength:      3\nDocstring:  \nBuilt-in immutable sequence.\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\nIf the argument is a tuple, the return value is the same object.\n\n\n\n\n\na=1\na?\n\n\nType:        int\nString form: 1\nDocstring:  \nint([x]) -> integer\nint(x, base=10) -> integer\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4\n\n\n\n\n\na='1'\na?\n\n\nType:        str\nString form: 1\nLength:      1\nDocstring:  \nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.\n\n\n\n\n- 그리고 위의 a=[1,2,3]과 같은 것들은 모두 “클래스->인스턴스”에 해당하는 과정이었음\n깨달음2\n- 생각해보니까 아래와 같이 list를 선언하는 방식도 있었음\n\na=list()\na\n\n[]\n\n\n\n이거 지금 생각하니까 list라는 이름의 클래스에서 a라는 인스턴스를 찍어내는 문법이다?!\n\n- 아래도 가능함\n\na=list((1,2,3))\na?\n\n\n\nType:        list\nString form: [1, 2, 3]\nLength:      3\nDocstring:  \nBuilt-in mutable sequence.\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.\n\n\n\n\n\n이것도 지금 보니까 list라는 이름의 클래스에서 a라는 인스턴스를 찍어내는 문법이다. 여기에서 (1,2,3)은 __init__()의 입력이다.\n\n깨달음3\n- 그러고보니까 각 자료형마다 특수한 기능들이 있었음\n\na=[1,2,3] \n\n- a.+tab 을 하면 append, clear 등등이 나온다.\n- 이러한 기능은 지금까지 우리가 “list자료형 특수기능들”이라고 부르면서 사용했었다. 그런데 a가 list클래스에서 생성된 인스턴스라는 관점에서 보면 이러한 기능들은 list클래스에서 정의된 메소드라고 볼 수 있다.\n깨달음4\n- a.f()는 f(a)로 해석가능하다고 하였다. 이 해석에 따르면 메소드의 첫번째 입력은 메소드가 소속된 인스턴스라고 해석할 수 있다.\n- 동일한 논리로 아래의 코드는 stop()의 입력에서 s1을 넣는다는 의미이다.\n\ns1.stop()\n\nNone\n\n\n\n\n\n멈춰~~~~\n\n\n\n\n\n\n아래의 조건에 맞는 클래스를 생성하라.\n\n['가위','바위']와 같은 리스트를 입력으로 받아 인스턴스를 생성한다.\n위의 리스트에서 하나의 값을 뽑는 메소드 f를 가지고 있다.\n\n사용예시\na = Klass(['가위','바위'])\na.f() # 가위가 1/2 바위가 1/2의 확률로 출력 \nb = Klass(['가위','바위','보'])\nb.f() # 가위, 바위, 보가 1/3의 확률로 출력 \n\n5월16일에 1시간, 5월18일에 2시간 분량을 업로드하겠습니다. (원래 5월16일 2시간, 5월18일 1시간 분량이었습니다)"
  },
  {
    "objectID": "posts/2022-06-06-(14주차) 6월6일.html",
    "href": "posts/2022-06-06-(14주차) 6월6일.html",
    "title": "PP2023",
    "section": "",
    "text": "클래스 공부 7,8,9,10 단계\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-zK8hV8OkKlOejWQYlvVWQh\n\n- (1/8) 클래스 공부 7단계 (1)\n- (2/8) 클래스 공부 7단계 (2)\n- (3/8) 클래스 공부 7단계 (3)\n- (4/8) 클래스 공부 8단계\n- (5/8) 클래스 공부 9단계 (1)\n- (6/8) 클래스 공부 9단계 (2)\n- (7/8) 클래스 공부 10단계 (1)\n- (8/8) 클래스 공부 10단계 (2)\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\n\n\n\n\n- 다시 함수를 공부해봅시다.\n\ndef f(x):\n    return x+1 \n\n\nf(3)\n\n4\n\n\n- 함수의 사용방법? - 입력으로 변수 x를 받음 = 입력으로 인스턴스 x를 받음. - 출력으로 변수 x+1을 리턴 = 출력으로 인스턴스 x+1을 리턴.\n- 사실1: 파이썬에서 함수는 인스턴스를 입력으로 받고 인스턴스를 출력한다.\n- 함수의 자료형?\n\n?f\n\n\nSignature: f(x)\nDocstring: <no docstring>\nFile:      /tmp/ipykernel_3296343/2907208198.py\nType:      function\n\n\n\n\n\ntype이 functiond이다.\nf는 function class의 instance이다.\n결국 f 역시 하나의 오브젝트에 불과하다.\n\n- 사실2: 함수도 결국 인스턴스이다. -> 함수의 입력으로 함수를 쓸 수도 있고 함수의 출력으로 함수가 나올 수도 있다.\n\n\n\n(예제1) 숫자입력, 함수출력\n\ndef f(a):\n    def _f(x):\n        return (x-a)**2 \n    return _f\n\n\ng=f(10) # g(x)=(x-10)**2 \n\n\ng(2) # (2-10)**2 = 64\n\n64\n\n\n\n해석: f(a)는 a를 입력으로 받고 g(x)=(x-a)^2 를 함수를 리턴해주는 함수\n\n(예제1)의 다른표현: 익명함수 lambda\n표현1\n\ndef f(a):\n    _f = lambda x: (x-a)**2 ### lambda x: (x-a)**2 가 실행되는 순간 함수오브젝트가 만들어지고 그것이 _f 로 저장됨 \n    return _f\n\n\ng=f(10) # g(x)=(x-10)**2 \n\n\ng(3) # (3-10)**2 = 49\n\n49\n\n\n표현2\n\ndef f(a):\n    return lambda x: (x-a)**2 \n\n\ng=f(10) # g(x)=(x-10)**2 \n\n\ng(3) # (3-10)**2 = 49\n\n49\n\n\n\nlambda x: (x-a)**2 는 \\(\\text{lambda}(x) = (x-a)^2\\)의 느낌으로 기억하면 외우기 쉽다.\nlambda x: (x-a)**2 는 “아직 이름이 없는 함수오브젝트를 (가칭 lambda 라고 하자) 만들고 기능은 x를 입력으로 하고 (x-a)**2를 출력하도록 하자” 라는 뜻으로 해석하면 된다.\n\n(예제2) 함수입력, 숫자출력\n\ndef f(x):\n    return x**2 \n\n\ndef d(f,x): # 함수를 입력을 받는 함수를 정의 \n    h=0.000000000001\n    return (f(x+h)-f(x))/h \n\n\nd(f,4) # f'(4) = 2*4 = 8\n\n8.000711204658728\n\n\n(예제3) 함수입력, 함수출력\n\ndef f(x): \n    return x**2 \n\n\ndef derivate(f): \n    def df(x): \n        h=0.000000000001\n        return (f(x+h)-f(x))/h \n    return df\n\n\nff = derivate(f)\n\n\nff(7) # f의 도함수\n\n14.004797321831575\n\n\n원래함수 시각화\n\nx = np.linspace(-1,1,100)\nplt.plot(x,f(x))\n\n\n\n\n도함수 시각화\n\nx = np.linspace(-1,1,100)\nplt.plot(x,ff(x))\n\n\n\n\n(예제3)의 다른표현\n\ndef f(x): \n    return x**2 \n\n\ndef derivate(f): \n    h=0.000000000001\n    return lambda x: (f(x+h)-f(x))/h \n\n\nff = derivate(f)\n\n\nff(10)\n\n20.00888343900442\n\n\n(예제4) 함수들의 리스트\n\nflst = [lambda x: x, lambda x: x**2, lambda x: x**3] \nflst\n\n[<function __main__.<lambda>(x)>,\n <function __main__.<lambda>(x)>,\n <function __main__.<lambda>(x)>]\n\n\n\nfor f in flst:\n    print(f(2))\n\n2\n4\n8\n\n\n\nfor f in flst: \n    plt.plot(x,f(x),'--')\n\n\n\n\n위의코드는 아래와 같음\n\nplt.plot(x,(lambda x: x)(x),'--')\nplt.plot(x,(lambda x: x**2)(x),'--')\nplt.plot(x,(lambda x: x**3)(x),'--')\n\n\n\n\n\n\n\n- 지금까지 개념 - 함수: 변수를 입력으로 받아서 변수를 출력하는 개념 - 변수: 어떠한 값을 저장하는 용도로 쓰거나 함수의 입력 혹은 출력으로 사용함\n- 파이썬의 함수형프로그래밍을 잘하려면? - 변수든 함수이든 둘다 인스턴스임. - 변수를 함수처럼: 메소드 - 함수를 변수처럼(\\(\\star\\)): 함수자체를 함수의 입력으로 혹은 출력으로 쓸 수도 있음. 함수를 특정 값처럼 생각해서 함수들의 list를 만들 수도 있다.\n\n\n\n- 함수 오브젝트의 비밀?\n\nf = lambda x: x+1 \n\n\nlst=[1,2,3]\n\n\nset(dir(f)) & {'__call__'}\n\n{'__call__'}\n\n\n\n함수 오브젝트에는 숨겨진 기능 __call__이 있다.\n\n\nf.__call__(3) # f(3)\n\n4\n\n\n\nf.__call__(4) # f(4)\n\n5\n\n\n\n여기에 우리가 정의한 내용이 있다.\n\n- 함수처럼 쓸 수 없는 인스턴스는 단지 call이 없는 것일 뿐이다.\n\nclass Klass: \n    def __init__(self):\n        self.name='guebin'\n\n\na=Klass()\n\n\na()\n\nTypeError: 'Klass' object is not callable\n\n\n\na는 callable이 아니라고 한다.\n\n\nclass Klass2(Klass):  # 상속 \n    def __call__(self):\n        print(self.name)\n\n\nb=Klass2()\n\n\nb()\n\nguebin\n\n\n\nb는 callable object! 즉 숨겨진 메서드로 __call__를 가진 오브젝트!\nKlass는 callable object를 만들지 못하지만 Klass2는 callable object를 만든다.\n\n- 클래스로 함수를 만들기\n\nclass AddConstant: \n    def __init__(self,c):\n        self.c = c \n    def __call__(self,a):\n        return a + self.c \n\n\nf = AddConstant(3) # callable object생성, f.c에는 3이 저장되어있음. \n\n\nf(5) # f.c 와 5를 더하는 기능을 수행, # f(x) = x+3 을 수행함\n\n8\n\n\n\nf(10) \n\n13\n\n\n- 클래스도 그러고보니까 오브젝트 아니었나? 클래스도 함수처럼 Klass()와 같이 사용하면 인스턴스를 만들었음. -> Klass.__call__() 은 Klass()와 같은 역할을 할 것이다.\n\nclass Klass: \n    def __init__(self):\n        self.name='hynn'\n\n\na=Klass.__call__() # 이것이 a=Klass() 와 같은 효과 \n\n\na.name\n\n'hynn'\n\n\n\n\n\n\n파이썬의 비밀1: 자료형은 클래스의 이름이다.\n파이썬의 비밀2: 클래스에는 __str__처럼 숨겨진 메서드가 존재한다. 이를 이용하여 파이썬 내부의 기능을 가로챌 수 있다.\n파이썬의 비밀3: 주피터노트북에서는 “오브젝트이름+엔터”를 쳐서 나오는 출력은 __repr__로 가로챌 수 있따. (주피터의 비밀)\n파이썬의 비밀4: 함수와 클래스는 숨겨진 메소드에 __call__을 가진 오브젝트일 뿐이다.\n\n\n\n\n\n\n\n- 아래와 같은 예제들을 관찰하여 for문을 복습하자.\n(예제1)\n\nfor i in [1,2,3,4]:\n    print(i)\n\n1\n2\n3\n4\n\n\n(예제2)\n\nfor i in (1,2,3,4): \n    print(i)\n\n1\n2\n3\n4\n\n\n(예제3)\n\nfor i in '1234':\n    print(i)\n\n1\n2\n3\n4\n\n\n(예제4)\n\na=5 \nfor i in a:\n    print(i) \n\nTypeError: 'int' object is not iterable\n\n\n\n5라고 출력되어야 하지 않나?\n\n- 의문1:\nfor i in ???:\n    print(i)\n에서 ??? 자리에 올수 있는 것이 무엇일까?\n(예제5)\n상황1\n\nlst = [[1,2,3,4],[3,4,5,6]]\nfor l in lst: \n    print(l)\n\n[1, 2, 3, 4]\n[3, 4, 5, 6]\n\n\n상황2\n\ndf=pd.DataFrame(lst)\ndf\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n      3\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n      4\n    \n    \n      1\n      3\n      4\n      5\n      6\n    \n  \n\n\n\n\n\nfor i in df:\n    print(i)\n\n0\n1\n2\n3\n\n\n칼럼이름들이 나오는것 같음 -> 확인해보자.\n\ndf.columns = pd.Index(['X'+str(i) for i in range(1,5)])\ndf\n\n\n\n\n\n  \n    \n      \n      X1\n      X2\n      X3\n      X4\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n      4\n    \n    \n      1\n      3\n      4\n      5\n      6\n    \n  \n\n\n\n\n\nfor i in df: \n    print(i) \n\nX1\nX2\nX3\nX4\n\n\n- 의문2: for의 출력결과는 어떻게 예측할 수 있을까?\n\n\n\n- 의문1의 해결: 아래의 ??? 자리에 올 수 있는 것은 dir()하여 __iter__가 있는 object이다.\nfor i in ???:\n    print(i)\n이러한 오브젝트를 iterable object라고 한다.\n- 확인\n\na=[1,2,3] \nset(dir(a)) & {'__iter__'}\n\n{'__iter__'}\n\n\n\na=1,2,3\nset(dir(a)) & {'__iter__'}\n\n{'__iter__'}\n\n\n\na='123'\nset(dir(a)) & {'__iter__'}\n\n{'__iter__'}\n\n\n\na=5\nset(dir(a)) & {'__iter__'}\n\nset()\n\n\n\n예상대로 예제1~4에서는 int의 클래스의 instance만 __iter__ 가 없다.\n\n- __iter__의 역할: iterable object를 iterator로 만들 수 있다!\n\nlst = [1,2,3] \nlst \n\n[1, 2, 3]\n\n\n\nlst[1] # 충실한 리스트\n\n2\n\n\n\nltor = iter(lst)\n#ltor = lst.__iter__() \nltor\n\n<list_iterator at 0x7f68c2fe1460>\n\n\n\nltor[1] # 더이상 리스트가 아니다\n\nTypeError: 'list_iterator' object is not subscriptable\n\n\n\nltor?\n\n\nType:        list_iterator\nString form: <list_iterator object at 0x7f68c2fe1460>\nDocstring:   <no docstring>\n\n\n\n\n- iterator가 되면 무엇이 좋은가? -> 숨겨진 기능 __next__가 열린다.\n\nset(dir(lst)) & {'__next__'}, set(dir(ltor)) & {'__next__'}\n\n(set(), {'__next__'})\n\n\n\nlst에는 __next__가 없지만 ltor에는 있다!\n\n- 그래서 __next__의 기능은? -> 원소를 차례대로 꺼내준다 + 더 이상 꺼낼 원소가 없으면 StopIteration Error를 발생시킨다.\n\nlst\n\n[1, 2, 3]\n\n\n\nltor.__next__() \n\n1\n\n\n\nltor.__next__() \n\n2\n\n\n\nltor.__next__() \n\n3\n\n\n\nltor.__next__()\n\nStopIteration: \n\n\n- for문의 동작원리\nfor i in lst:\n    print(i)\n\nlst.__iter__() 혹은 iter(lst) 를 이용하여 lst를 iterator로 만든다. (iterable object를 iterator object로 만든다)\niterator에서 .__next__()함수를 호출하고 결과를 i에 저장한뒤에 for문 블락안에 있는 내용 (들여쓰기 된 내용)을 실행한다. -> 반복\nStopIteration 에러가 발생하면 for문을 멈춘다.\n\n- 아래의 ??? 자리에 올 수 있는 것이 iterable object가 아니라 iterator 자체이여도 for문이 돌아갈까? (당연히 돌아가야 할 것 같음)\nfor i in ???:\n    print(i)\n\nfor i in iter([1,2,3]):\n    print(i)\n\n1\n2\n3\n\n\n\n당연히가능!\n\n- a가 iterator일때 iter(a) 의 출력결과가 a와 같도록 조정한다면 for문의 동작원리 (1)-(3)을 수정하지 않아도 좋다. -> 실제로 이렇게 동작한다.\n- 요약 - iterable object는 숨겨진 기능으로 __iter__를 가진다. - iterator object는 숨겨진 기능으로 __iter__와 __next__를 가진다. (즉 iterator는 그 자체로 iterable object가 된다!)\n\nlst = [1,2,3]\nltor = iter(lst) \n\n\nset(dir(lst)) & {'__iter__', '__next__'}\n\n{'__iter__'}\n\n\n\nset(dir(ltor)) & {'__iter__', '__next__'}\n\n{'__iter__', '__next__'}\n\n\n- 의문2의 해결: for의 출력결과는 어떻게 예측할 수 있을까? iterator를 만들어서 .__next__()의 출력값을 확인하면 알 수 있다.\n\nfor i in df:\n    print(i)\n\nX1\nX2\nX3\nX4\n\n\n\ndftor=iter(df)\ndftor.__next__()\n\n'X1'\n\n\n\ndftor.__next__()\n\n'X2'\n\n\n\ndftor.__next__()\n\n'X3'\n\n\n\ndftor.__next__()\n\n'X4'\n\n\n\ndftor.__next__()\n\nStopIteration: \n\n\n\n\n\n- 파이썬에서 for문을 처음 배울 때: range(5)를 써라!\n\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\n\nrange(5)가 도데체 무엇이길래?\n\n- range(5)의 정체는 그냥 iterable object이다.\n\nset(dir(range(5))) & {'__iter__','__next__'}\n\n{'__iter__'}\n\n\n- 그래서 언제든지 iterator로 바꿀 수 있다.\n\nrtor= iter(range(5))\nrtor\n\n<range_iterator at 0x7f68c2ff2b70>\n\n\n\nset(dir(rtor)) &  {'__iter__','__next__'}\n\n{'__iter__', '__next__'}\n\n\n- for문에서 range(5)가 행동하는 방법?\n\nrtor = iter(range(5))\n\n\nrtor.__next__()\n\n0\n\n\n\nrtor.__next__()\n\n1\n\n\n\nrtor.__next__()\n\n2\n\n\n\nrtor.__next__()\n\n3\n\n\n\nrtor.__next__()\n\n4\n\n\n\nrtor.__next__()\n\nStopIteration: \n\n\n\n\n\n- 이터레이터의 개념을 알면 for문에 대한 이해도가 대폭 상승한다.\n\nfor i in zip([1,2,3],'abc'):\n    print(i)\n\n(1, 'a')\n(2, 'b')\n(3, 'c')\n\n\n\nzip은 뭐지?\n\n\nzip([1,2,3],'abc')\n\n<zip at 0x7f68c2ff7bc0>\n\n\n- 어차피 for i in ????: 의 ???? 자리는 iterable object의 자리이다.\n\nset(dir(zip([1,2,3],'abc'))) & {'__iter__','__next__'}\n\n{'__iter__', '__next__'}\n\n\n\n__next__()함수가 있음 \\(\\to\\) zip([1,2,3],'abc')은 그자체로 iterator 였다!\n\n\nz= zip([1,2,3],'abc')\n\n\nz.__next__()\n\n(1, 'a')\n\n\n\nz.__next__()\n\n(2, 'b')\n\n\n\nz.__next__()\n\n(3, 'c')\n\n\n\nz.__next__()\n\nStopIteration: \n\n\n\n\n\n- 내가 이터레이터를 만들어보자.\n\nclass Klass: # 찌를 내는순간 for문이 멈추도록 하는 이터레이터를 만들자\n    def __init__(self): \n        self.candidate = [\"묵\",\"찌\",\"빠\"] \n    def __iter__(self):\n        return self \n    def __next__(self):\n        action = np.random.choice(self.candidate)\n        if action == \"찌\":\n            print(\"찌가 나와서 for문을 멈춥니다\")\n            raise StopIteration\n        else:\n            return action\n\n\na= Klass()\n\n\nset(dir(a)) & {'__iter__', '__next__'} # a는 이터레이터!\n\n{'__iter__', '__next__'}\n\n\n\na.__next__()\n\n'빠'\n\n\n\na.__next__()\n\n'묵'\n\n\n\na.__next__()\n\n'빠'\n\n\n\na.__next__()\n\n찌가 나와서 for문을 멈춥니다\n\n\nStopIteration: \n\n\n\nfor i in a:\n    print(i)\n\n빠\n묵\n묵\n빠\n찌가 나와서 for문을 멈춥니다\n\n\n\n\n\n\n파이썬의 비밀1: 자료형은 클래스의 이름이다.\n파이썬의 비밀2: 클래스에는 __str__처럼 숨겨진 메서드가 존재한다. 이를 이용하여 파이썬 내부의 기능을 가로챌 수 있다.\n파이썬의 비밀3: 주피터노트북에서는 “오브젝트이름+엔터”를 쳐서 나오는 출력은 __repr__로 가로챌 수 있따. (주피터의 비밀)\n파이썬의 비밀4: 함수와 클래스는 숨겨진 메소드에 __call__을 가진 오브젝트일 뿐이다.\n파이썬의 비밀5: for문의 비밀 (iterable object, iterator, StopIteration Error)\n\n\n\n\n\n\n\n커널을 재시작하고 아래를 관찰하자\n예제1\n- 관찰1: 함수내의변수 출력\n\ndef f():\n    x=10 \n    print(x)\n\n\nf()\n\n10\n\n\n- 관찰2: 함수내의 변수가 없을 경우 출력이 되지 않음\n\ndef g():\n    print(x)\n\n\ng()\n\nNameError: name 'x' is not defined\n\n\n- 관찰3: 동일한 이름의 변수가 globald에 있다면 함수내에 (local에) 그 이름의 변수가 선언되지 않아도 global의 변수를 빌려서 사용함\n\nx=20 \ndef g():\n    print(x)\n\n\ng()\n\n20\n\n\n- 관찰4: f()가 실행되면서 x=10이 함수내에 (=local에) 실행되지만 이 결과가 외부의 x=20에 (=global에) 영향을 미치지는 못함\n\nf()\n\n10\n\n\n\nx\n\n20\n\n\n예제2\n(코드1)\n\nx = 38 \ndef nextyear():\n    y= x+1 \n    print(x,y) \nnextyear()\n\n38 39\n\n\n(코드2)\n\nx = 38 \ndef nextyear():\n    y= x+1 \n    print(x,y) \n    x= 0\nnextyear()\n\nUnboundLocalError: local variable 'x' referenced before assignment\n\n\n- 해석: - 잘못된 해석: 코드1은 실행되었고, 코드2에서 에러가 났다. 코드1과 2의 차이점은 x=0 이라는 코드가 코드2에 추가로 포함되어있다는 것이다. 따라서 x=0이 잘못된 코드이고 이걸 실행하는 과정에서 에러가 발생했다. - 올바른 해석: 코드1에서는 x가 global variable 이고 코드2에서는 x가 local variable이어서 생기는 문제\n- 코드2의 올바른 수정\n\nx = 38 \ndef nextyear():\n    x= 0\n    y= x+1 \n    print(x,y) \nnextyear()\n\n0 1\n\n\n\n\n\n- 예비학습이 주는 교훈\n(원칙1) global 에서 정의된 이름은 local 에서 정의된 이름이 없을 경우 그를 대신할 수 있다 (local은 경우에 따라서 global에 있는 변수를 빌려 쓸 수 있다)\n(원칙2) local과 global에서 같은 이름 ’x’가 각각 정의되어 있는 경우? global의 변수와 local의 변수는 각각 따로 행동하며 서로 영향을 주지 않는다. (독립적이다) - 만약에 local이 global의 변수를 같이 쓰고 있었다고 할지라도, 추후 새롭게 local에 새롭게 같은 이름의 변수가 정의된다면 그 순간 local과 global의 변수를 각자 따로 행동하며 서로 영향을 주지 않는다. \\(\\to\\) 아래예제확인\n\nx= 10 \ndef f():\n    print(x)\n\n\nf() # x를 빌려쓰는 신세\n\n10\n\n\n\ndef f():\n    x=20 # 이제 새롭게 x를 정의했으니까 \n    print(x)\n\n\nf() # 다른길을 간다.\n\n20\n\n\n- 이전에 공부하였던 인스턴스변수와 클래스변수 역시 비슷한 행동을 보인다.\n\nclass Moo:\n    x=0 # 클래스변수\n\n\nmoo=Moo()\n\n(관찰1)\n\nMoo.x, moo.x\n\n(0, 0)\n\n\n\nmoo.x는 사실 정의한적 없지만 Moo.x를 빌려쓰고 있다. (원칙1)\n\n(관찰2)\n\nMoo.x = 100 \n\n\nMoo.x, moo.x\n\n(100, 100)\n\n\n\nMoo.x 를 변화시키면 moo.x 도 변화한다 (빌려쓰고 있는 것이니까, 원칙1의 재확인)\n\n(관찰3)\n\nmoo.x = 200\n\n\nMoo.x, moo.x\n\n(100, 200)\n\n\n\nmoo.x=200을 하는 순간 새롭게 인스턴스변수를 선언한 셈이된다. 따라서 원칙2가 적용되어 이제부터 Moo.x 와 moo.x 는 서로 독립적으로 행동한다.\n\n(관찰4)\n\nMoo.x = - 99 \n\n\nMoo.x, moo.x \n\n(-99, 200)\n\n\n\nmoo.x = 99\n\n\nMoo.x, moo.x \n\n(-99, 99)\n\n\n\nMoo.x 를 바꾼다고 해서 moo.x 가 영향받지 않고 moo.x 를 바꿔도 Moo.x 가 영향받지 않음 (완전히 독립, 원칙2의 재확인)\n\n- 포인트: (1) 클래스변수와 인스턴스 변수의 구분 (2) 인스턴스 변수가 정의되지 않으면 클래스변수를 빌려쓸 수 있음 (3) 인스턴스변수와 클래스변수가 같은 이름으로 저장되어 있으면 각각 독립적으로 행동\n\n\n\n- self 비밀: 사실 클래스에서 정의된 함수의 첫번째 인자의 이름이 꼭 self일 필요는 없다. (무엇으로 전달하든 클래스안에서 정의된 메소드의 첫번째 인자는 기본적으로 instance의 태명역할을 한다)\n\nclass Moo: \n    def __init__(abab):\n        abab.name = 'guebin'\n    def f(cdcd):\n        print(cdcd.name)\n\n\nmoo=Moo()\n\n\nmoo.name\n\n'guebin'\n\n\n\nmoo.f()\n\nguebin\n\n\n- 인스턴스 메서드: 위의 __init__와 f와 같이 첫번째 인자를 인스턴스의 태명으로 받는 함수를 인스턴스 메서드 (간단히 메서드) 라고 한다. - 인스턴스 메소드는self.f()와 같이 사용한다. 의미는 f(self) 이다.\n\nmoo.name = 'hynn'\n\n\nmoo.__init__() # 인스턴스메서드의 사용예시: self.__init__()의 꼴로 사용 \n\n\nmoo.name\n\n'guebin'\n\n\n\nmoo.f() # 인스턴스메서드의 사용예시: self.__init__()의 꼴로 사용 \n\nguebin\n\n\n- 아래와 같이 사용할 수 없다.\n\nMoo.__init__()\n\nTypeError: __init__() missing 1 required positional argument: 'abab'\n\n\n\nMoo.f()\n\nTypeError: f() missing 1 required positional argument: 'cdcd'\n\n\n\n\n\n- 클래스 메서드: 함수의 첫 인자로 클래스오브젝트를 받는 메서드를 클래스메서드라고 한다.\n- 목표: Moo.f()와 같은 형태로 사용할 수 있는 함수를 만들어 보자 -> 클래스메서드를 만들어보자!\n\nclass Moo: \n    def f(self):\n        print(\"인스턴스 메서드\")\n\n\nmoo=Moo()\n\n\nmoo.f()\n\n인스턴스 메서드\n\n\n\nMoo.f()\n\nTypeError: f() missing 1 required positional argument: 'self'\n\n\n\nclass Moo: \n    @classmethod\n    def f(cls): # 함수의 첫 인자로 클래스오브젝트를 받는다. cls는 클래스 Moo의 별명?이라고 생각하면 된다. \n        print(\"클래스 메서드\")\n\n\nmoo=Moo()\n\n\nMoo.f()\n\n클래스 메서드\n\n\n\nmoo.f() # 인스턴스 메서드를 따로 정의한적은 없지만 같은 이름의 클래스 메서드가 있으므로 빌려와서 씀!\n\n클래스 메서드\n\n\n- 예제\n\nclass Moo:\n    @classmethod\n    def set_class_x(cls,value): # 클래스 메서드 \n        cls.x = value # 클래스변수선언, note: Moo.x = value 와 같은 코드!\n    def set_instance_x(self,value): # 인스턴스 메서드\n        self.x = value # 인스턴스 변수선언\n\n\nmoo=Moo()\n\n\nMoo.set_class_x(10) # 클래스메서드로 클래스변수에 10을 설정 \n\n\nMoo.set_instance_x(10) # 클래스에서 인스턴스 메서드를 사용 -> 사용불가\n\nTypeError: set_instance_x() missing 1 required positional argument: 'value'\n\n\n\nMoo.x, moo.x # 인스턴스변수는 따로 설정하지 않았지만 클래스 변수값을 빌려쓰고 있음\n\n(10, 10)\n\n\n\nmoo.set_class_x(20) # 인스턴스에서는 원래 set_class_x 라는 메서드는 없지만 클래스에서 빌려씀 \n\n\nMoo.x, moo.x # 현재 moo.x는 클래스 변수를 빌려쓰고 있는 상황이므로 같이 바뀜 \n\n(20, 20)\n\n\n\nmoo.set_instance_x(-20) # 인스턴스에서 인스턴스 메서드를 사용하여 인스턴스 변수값을 -20으로 설정 \n#-> 이때부터 인스턴스변수와 클래스 변수는 서로 독립적인 노선을 간다.\n\n\nMoo.x, moo.x\n\n(20, -20)\n\n\n\nMoo.set_class_x(30) # 독립적인 노선을 가기로 했으므로 클래스변수만 30으로 바뀜 \nMoo.x, moo.x\n\n(30, -20)\n\n\n\nmoo.set_class_x(-40) # 여전히 인스턴스에서 set_class_x라는 함수는 없으므로 클래스메소드를 빌려쓰고 있음\nMoo.x, moo.x\n\n(-40, -20)\n\n\n\n\n\n- 스태틱 메서드: 첫 인자로 인스턴스와 클래스 모두 받지 않음. (클래스안에 정의되어 있지만 그냥 함수와 같음)\n\nclass Cals: \n    @staticmethod\n    def add(a,b):\n        return a+b\n    @staticmethod\n    def sub(a,b):\n        return a-b \n\n\nfs = Cals()\n\n\nfs.add(1,2)\n\n3\n\n\n\nfs.sub(1,2)\n\n-1\n\n\n\nfs는 그냥 함수들을 묶어놓은 느낌? 정리하게 편하게?\n\n\n\n\n\n\n\n- 예제\n\nlst = list('abcd')\nlst\n\n['a', 'b', 'c', 'd']\n\n\n\n''.join(lst)\n\n'abcd'\n\n\n- 해설: ’’는 string object 이고 .join는 string object에 소속된 메서드이다.\n\na=''\na.join(lst) # join(a,lst) 와 같은 효과 \n\n'abcd'\n\n\n- join의 간단한 사용방법\n\n'-'.join(lst)\n\n'a-b-c-d'\n\n\n\n\n\n- 파이썬의 모든것은 객체이다: matplotlib의 다른 사용 (객체지향적 언어로 그림그리기!)\n- 그림오브젝트 생성\n\nfig = plt.figure() # 그림오브젝트 생성되고 fig라는 이름이 붙음\n\n<Figure size 432x288 with 0 Axes>\n\n\n- 그림오브젝트의 액시즈를 확인 -> 아무것도 없음\n\nfig.axes\n\n[]\n\n\n- (0,0)자리에 (가로=1,세로=1) 크기의 액시즈를 넣어보자.\n\nfig.add_axes([0,0,1,1]) \n\n<Axes:>\n\n\n\nfig.axes\n\n[<Axes:>]\n\n\n\nfig\n\n\n\n\n- (0,1.2) 위치에 (가로=1,세로=1) 크기의 액시즈 추가\n\nfig.add_axes([0,1.2, 1,1]) \nfig\n\n\n\n\n- (0.5,0.5) 위치에 (가로=1, 세로=1) 크기의 그림 추가\n\nfig.add_axes([0.5,0.5, 1,1])\n\n<Axes:>\n\n\n\nfig\n\n\n\n\n- fig의 세번째 액시즈에 접근\n\na3 = fig.axes[2] # 이것역시 오브젝트임 \na3\n\n<Axes:>\n\n\n- 액시즈의 메소드중에 plot이 있음 -> 이것으로 그림을 그려봄\n\na3.plot([1,2,3],[4,5,3],'--r')\n\n\nfig\n\n\n\n\n- 다시 세번째 축에 접근하여 다른그림을 그려보자.\n\nfig.axes[-1].plot([1,2,3],[5,4,3],':o')\nfig\n\n\n\n\n- 이제 첫번째 축에 접근하여 새로운 그림을 그려보자.\n\nfig.axes[0].plot([1,2,3],[4,1,4],'--b')\nfig\n\n\n\n\n- 클래스에 대한 이해가 없다면 위와 같은 그림을 그리기도 힘들고 코드를 해석하기도 힘듬\n\n\n\n- 아래의 코드를 관찰하자.\n\na=[1,2,3]\nb=a\na=a+[4]\n\n현재 a,b의 출력결과는?\n\na, b\n\n([1, 2, 3, 4], [1, 2, 3])\n\n\n- 이제 다시 아래의 코드를 관찰하자.\n\na=[1,2,3]\nb=a\na.append(4)\n\n현재 a,b의 출력결과는?\n\na,b\n\n([1, 2, 3, 4], [1, 2, 3, 4])\n\n\n- 아래의 코드를 다시 살펴보자.\na=[1,2,3]\nb=a\na.append(4)\na,b라는 변수들은 메모리에 어떻게 저장이 되어있을까?\n상상력을 조금 발휘하면 아래와 같이 여길 수 있다.\n\n메모리는 변수를 담을 방이 여러개 있는 호텔이라고 생각하자.\n아래를 실행하였을 경우\n\na=[1,2,3]\n\n메모리주소1에 존재하는 방을 a라고 하고, 그 방에 [1,2,3]을 넣는다.\n\n\n아래를 실행하였을 경우\n\nb=a\n\n메모리주소38에 존재하는 방을 b라고 하고, 그 방에 a를 넣어야하는데, a는 [1,2,3]이니까 [1,2,3]을 넣는다.\n\n\n아래를 실행하면\n\na.append(4)\n\n방 a로가서 [1,2,3]을 [1,2,3,4]로 바꾼다.\n그리고 방 b에는 아무것도 하지 않는다.\n\n- R에서는 맞는 비유인데, 파이썬은 적절하지 않은 비유이다.\n\nid(a)\n\n139851743661952\n\n\n\nid(b)\n\n139851743661952\n\n\n실제로는 a,b가 저장된 메모리 주소가 동일함\n- 파이썬에서는 아래가 더 적절한 비유이다.\n\n메모리는 변수를 담을 방이 여러개 있는 호텔이라고 생각하자.\n아래를 실행하였을 경우\n\na=[1,2,3]\n\n메모리주소139851743661952에서 [1,2,3]을 생성해요\n방 139851743661952의 방문에 a라는 포스트잇을 붙인다.\n앞으로 [1,2,3]에 접근하기 위해서는 여러 메모리방중에서 a라는 포스트잇이 붙은 방을 찾아가면 된다.\n\n\n아래를 실행하였을 경우\n\nb=a\n\na라는 포스트잇이 있는데, a라는 포스트잇이랑 b라는 포스트잇과 같은 효과를 주도록 한다.\n쉽게말하면 b라는 포스트잇을 방 139851743661952의 방문에 붙인다는 이야기.\n앞으로 [1,2,3]에 접근하기 위해서는 여러 메모리방중에서 a라는 포스트잇이 붙어 있거나 b라는 포스트잇이 붙어있는 방을 찾아가면 된다.\n\n\n아래를 실행하면\n\na.append(4)\n\na라는 포스트잇이 붙어있는 방으로 가서, 그 내용물 append함수를 써서 4를 추가하라. 즉 내용물 [1,2,3]을 [1,2,3,4]로 바꾸라.\n같은방에 a,b라는 포스트잇이 모두 붙어있음. 따라서 b라는 포스트잇이 붙은 방을 찾아가서 내용물을 열어보면 [1,2,3,4]가 나온다.\n\n- 결론: 파이썬의 모든것은 오브젝트이다. 그리고 모든 오브젝트는 메모리주소위에 올라간다. 하지만 그 메모리주소에 붙어있는 포스트잇이 하나라는 보장은 없다."
  },
  {
    "objectID": "posts/2022-03-02-(1주차) 3월2일.html",
    "href": "posts/2022-03-02-(1주차) 3월2일.html",
    "title": "PP2023",
    "section": "",
    "text": "(1주차) 3월2일\n\n강의소개\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n강의영상\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-wJ9o4u3GHaOgNW-pLNbusl"
  },
  {
    "objectID": "posts/2022-05-30-(13주차) 5월30일.html",
    "href": "posts/2022-05-30-(13주차) 5월30일.html",
    "title": "PP2023",
    "section": "",
    "text": "클래스 공부 6단계\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-xw_UHDXp5ZpYywkCxpN4SE\n\n- (1/4) 인사관리 예제 (1)\n- (2/4) 인사관리 예제 (2)\n- (3/4) 리스트의 상속\n- (4/4) 사용자정의 자료형의 유용함\n\n\n\n- 상속\n\n\n- 아래와 같은 클래스를 만들자. - 이름, 직급, 연봉에 대한 정보가 있다. - 연봉을 올려주는 메소드가 존재함.\n\nclass Employee:\n    def __init__(self,name,position=None,pay=0):\n        self.name = name\n        self.position = position\n        self.pay = pay \n    def _repr_html_(self):\n        html_str = \"\"\"\n        이름: {} <br/>\n        직급: {} <br/>\n        연봉: {} <br/>\n        \"\"\".format(self.name,self.position,self.pay)\n        return html_str\n    def giveraise(self,pct): \n        self.pay = self.pay * (1+pct) \n\n- 확인\n\niu=Employee('iu',position='staff',pay=5000)\nhynn=Employee('hynn',position='staff',pay=4000)\nhd=Employee('hodong',position='mgr',pay=8000)\n\n\niu\n\n\n        이름: iu \n        직급: staff \n        연봉: 5000 \n        \n\n\n\niu.giveraise(0.1)\niu\n\n\n        이름: iu \n        직급: staff \n        연봉: 5500.0 \n        \n\n\n\nhynn.giveraise(0.2)\nhynn\n\n\n        이름: hynn \n        직급: staff \n        연봉: 4800.0 \n        \n\n\n- 회사의 모든 직원의 연봉을 10%씩 올려보자.\n\niu=Employee('iu',position='staff',pay=5000)\nhynn=Employee('hynn',position='staff',pay=4000)\nhd=Employee('hodong',position='mgr',pay=8000)\n\n\nfor i in [iu, hynn, hd]:\n    i.giveraise(0.1) \n\n\niu\n\n\n        이름: iu \n        직급: staff \n        연봉: 5500.0 \n        \n\n\n\nhynn\n\n\n        이름: hynn \n        직급: staff \n        연봉: 4400.0 \n        \n\n\n\nhd\n\n\n        이름: hodong \n        직급: mgr \n        연봉: 8800.0 \n        \n\n\n- 매니저직급은 일반직원들의 상승분에서 5%의 보너스가 추가되어 상승한다고 가정하고 모든 직원의 연봉을 10%씩 올리는 코드를 구현해보자.\n(구현1)\n\niu=Employee('iu',position='staff',pay=5000)\nhynn=Employee('hynn',position='staff',pay=4000)\nhd=Employee('hodong',position='mgr',pay=8000)\n\n\nfor i in [iu,hynn,hd]: \n    if i.position == 'mgr':\n        i.giveraise(0.1 + 0.05) \n    else: \n        i.giveraise(0.1) \n\n\niu\n\n\n        이름: iu \n        직급: staff \n        연봉: 5500.0 \n        \n\n\n\nhynn\n\n\n        이름: hynn \n        직급: staff \n        연봉: 4400.0 \n        \n\n\n\nhd\n\n\n        이름: hodong \n        직급: mgr \n        연봉: 9200.0 \n        \n\n\n(구현2) 새로운 클래스를 만들자\n\nclass Manager: \n    def __init__(self,name,position=None,pay=0):\n        self.name = name\n        self.position = position\n        self.pay = pay \n    def _repr_html_(self):\n        html_str = \"\"\"\n        이름: {} <br/>\n        직급: {} <br/>\n        연봉: {} <br/>\n        \"\"\".format(self.name,self.position,self.pay)\n        return html_str\n    def giveraise(self,pct): \n        self.pay = self.pay * (1+pct+0.05)     \n\n\niu=Employee('iu',position='staff',pay=5000)\nhynn=Employee('hynn',position='staff',pay=4000)\nhd=Manager('hodong',position='mgr',pay=8000)\n\n\nfor i in [iu,hynn,hd]: \n    i.giveraise(0.1) \n\n\niu\n\n\n        이름: iu \n        직급: staff \n        연봉: 5500.0 \n        \n\n\n\nhynn\n\n\n        이름: hynn \n        직급: staff \n        연봉: 4400.0 \n        \n\n\n\nhd\n\n\n        이름: hodong \n        직급: mgr \n        연봉: 9200.000000000002 \n        \n\n\n(구현3) 상속이용!\n\nclass Manager(Employee): \n    def giveraise(self,pct): \n        self.pay = self.pay * (1+pct+0.05)     \n\n\niu=Employee('iu',position='staff',pay=5000)\nhynn=Employee('hynn',position='staff',pay=4000)\nhd=Manager('hodong',position='mgr',pay=8000)\n\n\nfor i in [iu,hynn,hd]:\n    i.giveraise(0.1) \n\n\niu\n\n\n        이름: iu \n        직급: staff \n        연봉: 5500.0 \n        \n\n\n\nhynn\n\n\n        이름: hynn \n        직급: staff \n        연봉: 4400.0 \n        \n\n\n\nhd\n\n\n        이름: hodong \n        직급: mgr \n        연봉: 9200.000000000002 \n        \n\n\n- 요약: 이미 만들어진 클래스에서 대부분의 기능은 그대로 쓰지만 일부기능만 변경 혹은 추가하고 싶다면 클래스를 상속하면 된다!\n\n\n\n\nref: http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&ejkGb=KOR&barcode=9791165213190\n\n- list와 비슷한데 멤버들의 빈도가 계산되는 메소드를 포함하는 새로운 나만의 list를 만들고 싶다.\n\nlst = ['a','b','a','c','b','a','d']\nlst\n\n['a', 'b', 'a', 'c', 'b', 'a', 'd']\n\n\n- 아래와 같은 딕셔너리를 만들고 싶다.\n\nfreq = {'a':3, 'b':2, 'c':1, 'd':1} \nfreq\n\n{'a': 3, 'b': 2, 'c': 1, 'd': 1}\n\n\n\nlst.frequency()를 입력하면 위의 기능이 수행되도록 변형된 list를 쓰고 싶다.\n\n- 구현\n(시도1) 반쯤 성공?\n\nlst\n\n['a', 'b', 'a', 'c', 'b', 'a', 'd']\n\n\n\nfreq = {'a':0, 'b':0, 'c':0, 'd':0} \nfreq\n\n{'a': 0, 'b': 0, 'c': 0, 'd': 0}\n\n\n\nfor item in lst:\n    freq[item] = freq[item] + 1 \n\n\nfreq\n\n{'a': 3, 'b': 2, 'c': 1, 'd': 1}\n\n\n(시도2) 실패\n\nlst\n\n['a', 'b', 'a', 'c', 'b', 'a', 'd']\n\n\n\nfreq = dict()\nfreq\n\n{}\n\n\n\nfor item in lst:\n    freq[item] = freq[item] + 1 \n\nKeyError: 'a'\n\n\n에러이유? freq['a']를 호출할 수 없다 -> freq.get(‘a’,0) 이용\n\nfreq['a']\n\nKeyError: 'a'\n\n\n\nfreq.get?\n\n\nSignature: freq.get(key, default=None, /)\nDocstring: Return the value for key if key is in the dictionary, else default.\nType:      builtin_function_or_method\n\n\n\n\n\nkey에 대응하는 값이 있으면 그 값을 리턴하고 없으면 default를 리턴\n\n\nfreq.get('a') # freq['a']에 해당하는 자료가 없어도 에러가 나지 않음 \n\n\nfreq.get('a',0) # freq['a']에 해당하는 자료가 없어도 에러가 나지 않음 + freq['a']에 해당하는 자료가 없으면 0을 리턴\n\n0\n\n\n(시도3)\n\nlst\n\n['a', 'b', 'a', 'c', 'b', 'a', 'd']\n\n\n\nfreq = dict()\nfreq\n\n{}\n\n\n\nfor item in lst:\n    freq[item] = freq.get(item,0) + 1 \n\n\nfreq\n\n{'a': 3, 'b': 2, 'c': 1, 'd': 1}\n\n\n- 이것을 내가 정의하는 새로운 list의 메소드로 넣고 싶다.\n\nclass L(list): \n    def frequency(self):\n        freq = dict()\n        for item in self:\n            freq[item] = freq.get(item,0) + 1 \n        return freq \n\n\nlst = L([1,1,1,2,2,3])\n\n\nlst # 원래 list에 있는 repr 기능을 상속받아서 이루어지는 결과\n\n[1, 1, 1, 2, 2, 3]\n\n\n\n_lst = L([4,5,6])\nlst + _lst # L자료형끼리의 덧셈\n\n[1, 1, 1, 2, 2, 3, 4, 5, 6]\n\n\n\nlst + [4,5,6] # L자료형과 list자료형의 덧셈도 가능\n\n[1, 1, 1, 2, 2, 3, 4, 5, 6]\n\n\n\nL자료형의 덧셈은 list의 덧셈과 완전히 같음\n\n\nlst.append(10) # append함수도 그대로 쓸 수 있음\nlst\n\n[1, 1, 1, 2, 2, 3, 10]\n\n\n- 기존리스트에서 추가로 frequency() 메소드가 존재함.\n\nlst.frequency()\n\n{1: 3, 2: 2, 3: 1, 10: 1}\n\n\n\n\n\n\n- 사용자정의 자료형이 어떤 경우에는 유용할 수 있다.\n\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\n\n- 예제1\n\nyear = ['2016','2017','2017','2017',2017,2018,2018,2019,2019] \nvalue = np.random.randn(9)\n\n\ndf= pd.DataFrame({'year':year,'value':value})\ndf\n\n\n\n\n\n  \n    \n      \n      year\n      value\n    \n  \n  \n    \n      0\n      2016\n      -0.053328\n    \n    \n      1\n      2017\n      -1.453440\n    \n    \n      2\n      2017\n      0.951534\n    \n    \n      3\n      2017\n      -0.479833\n    \n    \n      4\n      2017\n      -0.891801\n    \n    \n      5\n      2018\n      -0.841571\n    \n    \n      6\n      2018\n      -0.945223\n    \n    \n      7\n      2019\n      0.990534\n    \n    \n      8\n      2019\n      0.433971\n    \n  \n\n\n\n\n\nplt.plot(df.year,df.value)\n\nTypeError: 'value' must be an instance of str or bytes, not a int\n\n\n\n\n\n에러의 이유: df.year에 str, int가 동시에 있음\n\nnp.array(df.year)\n\narray(['2016', '2017', '2017', '2017', 2017, 2018, 2018, 2019, 2019],\n      dtype=object)\n\n\n자료형을 바꿔주면 해결할 수 있다.\n\nnp.array(df.year, dtype=np.float64)\n#np.array(df.year).astype(np.float64)\n#df.year.astype(np.float64)\n\narray([2016., 2017., 2017., 2017., 2017., 2018., 2018., 2019., 2019.])\n\n\n\nplt.plot(df.year.astype(np.float64),df.value,'.')\n\n\n\n\n- 예제2\n\nyear = ['2016','2017','2017','2017년','2017년',2018,2018,2019,2019] \nvalue = np.random.randn(9)\n\n\ndf= pd.DataFrame({'year':year,'value':value})\ndf\n\n\n\n\n\n  \n    \n      \n      year\n      value\n    \n  \n  \n    \n      0\n      2016\n      -0.502215\n    \n    \n      1\n      2017\n      -0.646435\n    \n    \n      2\n      2017\n      -0.991310\n    \n    \n      3\n      2017년\n      -1.202340\n    \n    \n      4\n      2017년\n      0.325500\n    \n    \n      5\n      2018\n      0.539920\n    \n    \n      6\n      2018\n      -1.565858\n    \n    \n      7\n      2019\n      -0.286726\n    \n    \n      8\n      2019\n      -1.780535\n    \n  \n\n\n\n\n\nnp.array(df.year,dtype=np.float64) # 타입을 일괄적으로 바꾸기 어렵다. \n\nValueError: could not convert string to float: '2017년'\n\n\n\nL(df.year).frequency()\n\n{'2016': 1, '2017': 2, '2017년': 2, 2018: 2, 2019: 2}\n\n\n\n’2016’와 같은 형태, ’2017년’와 같은 형태, 숫자형이 혼합 -> 맞춤형 변환이 필요함\n\n\n'2017년'.replace(\"년\",\"\")\n\n'2017'\n\n\n\nL(df.year)\n\n['2016', '2017', '2017', '2017년', '2017년', 2018, 2018, 2019, 2019]\n\n\n\ndef f(a): ## 사실 데이터의 구조를 모르면 이런 함수를 짤 수 없음 --> 자료의 구조를 확인해준다는 의미에서 freq가 있다면 편리하다. \n    if type(a) is str: \n        if \"년\" in a:\n            return int(a.replace(\"년\",\"\"))\n        else: \n            return int(a) \n    else: \n        return a \n\n\n[f(a) for a in df.year]\n\n[2016, 2017, 2017, 2017, 2017, 2018, 2018, 2019, 2019]\n\n\n\ndf.year= [f(a) for a in df.year]\n\n\ndf\n\n\n\n\n\n  \n    \n      \n      year\n      value\n    \n  \n  \n    \n      0\n      2016\n      -0.502215\n    \n    \n      1\n      2017\n      -0.646435\n    \n    \n      2\n      2017\n      -0.991310\n    \n    \n      3\n      2017\n      -1.202340\n    \n    \n      4\n      2017\n      0.325500\n    \n    \n      5\n      2018\n      0.539920\n    \n    \n      6\n      2018\n      -1.565858\n    \n    \n      7\n      2019\n      -0.286726\n    \n    \n      8\n      2019\n      -1.780535\n    \n  \n\n\n\n\n\nplt.plot(df.year, df.value, '.')"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "파이썬 프로그래밍 (2023)",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\n\n\n(14주차) 6월6일\n\n\n\n\n\n\n\n\n2021년 파이썬 입문 중간고사\n\n\n\n\n\n\n\n\n(7주차) 4월13일\n\n\n\n\n\n\n\n\n(3주차) 3월16일\n\n\n\n\n\n\n\n\n2022년 파이썬 입문 기말고사\n\n\n\n\n\n\n\n\n(6주차) 4월11일\n\n\n\n\n\n\n\n\n02wk-1: 리스트 - 선언, 연산, 컨테이너형 객체, 가변객체, 메소드, 중첩리스트, 컴프리헨션\n\n\n\n\n\n\n\n\n(7주차) 4월18일\n\n\n\n\n\n\n\n\n(13주차) 5월30일\n\n\n\n\n\n\n\n\n(11주차) 5월11일\n\n\n\n\n\n\n\n\n(13주차) 5월25일\n\n\n\n\n\n\n\n\n2022년 파이썬 입문 중간고사 예상유형\n\n\n\n\n\n\n\n\n2022년 파이썬 입문 중간고사 해설\n\n\n\n\n\n\n\n\n(3주차) 3월21일\n\n\n\n\n\n\n\n\n2022년 파이썬 입문 중간고사\n\n\n\n\n\n\n\n\n(12주차) 5월18일\n\n\n\n\n\n\n\n\n(5주차) 4월6일\n\n\n\n\n\n\n\n\n(10주차) 5월9일\n\n\n\n\n\n\n\n\n(10주차) 5월6일\n\n\n\n\n\n\n\n\n(4주차) 3월23일\n\n\n\n\n\n\n\n\n(11주차) 5월16일\n\n\n\n\n\n\n\n\n(12주차) 5월23일\n\n\n\n\n\n\n\n\n(4주차) 3월23일\n\n\n\n\n\n\n\n\n(5주차) 4월4일\n\n\n\n\n\n\n\n\n2021년 1학기 파이썬입문 기말고사 (풀이포함)\n\n\n\n\n\n\n\n\n시험관련 안내사항\n\n\n\n\n\n\n\n\n2022년 파이썬 입문 기말고사 풀이\n\n\n\n\n\n\nMar 7, 2023\n\n\n01wk-2\n\n\n최규빈\n\n\n\n\nMar 2, 2023\n\n\n01wk-1\n\n\n최규빈\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2022-03-07-(1주차) 3월7일.html",
    "href": "posts/2022-03-07-(1주차) 3월7일.html",
    "title": "01wk-2",
    "section": "",
    "text": "강의영상\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-wFKruLoWOsdP2kfQA6hmaq\n\n- (1/8) 아나콘다 설치, 가상환경 생성\n- (2/8) 주피터랩 설치 및 실행 (1)\n- (3/8) 주피터랩 설치 및 실행 (2)\n- (4/8) 0차원자료형: int, float, bool, 명시적형변환\n- (5/8) 0차원자료형: 암묵적형변환\n- (6/8) string (1)\n- (7/8) string (2)\n- (8/8) 숙제설명, 코랩설명\n- appendix: 윈도우에 영어계정만들기\n\n\n파이썬 교재\n- 전자교재\n\nhttps://docs.python.org/3.9/tutorial/index.html\nhttps://wikidocs.net/book/1\nhttps://jakevdp.github.io/PythonDataScienceHandbook/\n\n- 종이책 - 효율적 개발로 이끄는 파이썬 실천 기술 - Learning python: powerful object-oriented programming - 전문가를 위한 파이썬 : 파이썬3 버전 기준 | 간단하고, 명료하고, 효율적인 파이썬 프로그래밍\n\n\n주피터노트북, 주피터랩\n- interactive notebook이 아니다.\n\na=3\na\n\n3\n\n\n\nb=3\nb\n\n3\n\n\n\na+b\n\n5\n\n\n- 주피터랩: 주피터노트북의 확장버전 - 저는 주피터랩을 더 선호합니다. - 그런데 주피터노트북을 쓸 경우도 있음.\n- 마크다운모드(글쓰기모드), 코드모드(프로그래밍모드)\n\n\n자료형\n- 파이썬의 기본자료형은 int, float, bool, str, list, tuple, dict, set 등이 있다. - 0차원 자료형: int, float, bool - 1차원 자료형: str, list, tuple, dict, set\n\nint, float, bool\n- int형\n\na=100\n\n\ntype(a)\n\nint\n\n\n- float형\n\na=1.2*3 \na\n\n3.5999999999999996\n\n\n\ntype(a)\n\nfloat\n\n\n\na?\n\n\nType:        float\nString form: 3.5999999999999996\nDocstring:   Convert a string or number to a floating point number, if possible.\n\n\n\n\n- bool형\n\na=True ## 숫자1으로 생각할 수 있음 \nb=False ## 숫자0으로 생각할 수 있음\n\n\ntype(a)\n\nbool\n\n\n\ntype(b)\n\nbool\n\n\n\na?\n\n\nType:        bool\nString form: True\nDocstring:  \nbool(x) -> bool\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.\n\n\n\n\n\nb?\n\n\nType:        bool\nString form: False\nDocstring:  \nbool(x) -> bool\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.\n\n\n\n\n- bool형의 연산\n\na=True ## 1\nb=False ## 0 \n\n\na+b\n\n1\n\n\n\na*b \n\n0\n\n\n- complex형\n\na=1+2j\nb=2-2j\n\n\ntype(a)\n\ncomplex\n\n\n\ntype(b)\n\ncomplex\n\n\n\na?\n\n\nType:        complex\nString form: (1+2j)\nDocstring:  \nCreate a complex number from a real part and an optional imaginary part.\nThis is equivalent to (real + imag*1j) where imag defaults to 0.\n\n\n\n\n\nb?\n\n\nType:        complex\nString form: (2-2j)\nDocstring:  \nCreate a complex number from a real part and an optional imaginary part.\nThis is equivalent to (real + imag*1j) where imag defaults to 0.\n\n\n\n\n\nc=a+b\n\n\nc\n\n(3+0j)\n\n\n- 형태변환: float \\(\\to\\) int\n(예시1)\n\na=3.0\ntype(a)\n\nfloat\n\n\n\na=int(a)\n\n\ntype(a)\n\nint\n\n\n(예시2) 이경우는 정보의 손실이 발생\n\na=3.14 \nint(a)\n\n3\n\n\n- 형태변환: int \\(\\to\\) float\n\na=3\ntype(a)\n\nint\n\n\n\na=float(a)\ntype(a)\n\nfloat\n\n\n- 형태변환: bool \\(\\to\\) int/float, int/float \\(\\to\\) bool\n(예시1)\n\na=True\ntype(a)\n\nbool\n\n\n\nint(a)\n\n1\n\n\n\nfloat(a)\n\n1.0\n\n\n(예시2)\n\na=1 \nbool(a)\n\nTrue\n\n\n\na=0\nbool(a)\n\nFalse\n\n\n(예시3)\n\na=1.0\nbool(a)\n\nTrue\n\n\n\na=0.0\nbool(a)\n\nFalse\n\n\n- 이상한 형태변환도 가능하다. (이런것도 바꿔주나 싶은것도 바꿔줌)\n\nbool(-3.14)\n\nTrue\n\n\n\n저는 이런 코드를 의도적으로 사용하지 않아요..\n\n\nint(3.14)\n\n3\n\n\n- 형태변환이 항상가능한것도 아님\n\nfloat(3+0j) # 사실상 3+0j=3 이므로 float으로 형변환하면 3.0이 되어야 할 것 같은데 변환불가능하다. \n\nTypeError: can't convert complex to float\n\n\n- 암묵적형변환 (implicit)\n(예비학습) implicit의 의미 - 추운날씨 -> 보일러좀 틀자! (explicit) / 오늘 날씨 좀 추운 것 같지 않아? (implicit) - 짜장면 먹을래? -> 싫어! (explicit) / 난 어제 짜장면 먹었는데.. (implicit)\n(예제)\n\nTrue * 1 # 1을 곱할건데 너 계속 True로 있을꺼야? \n\n1\n\n\n\n1 * 1.0 # 1.0을 곱할건데 너 계속 int로 있을꺼야? \n\n1.0\n\n\n\nTrue+True # +연산을 할건데 계속 True로 있을꺼야? \n\n2\n\n\n\n\n\nstr\n- 선언\n\na='guebin'\n\n\na\n\n'guebin'\n\n\n\n연산\n- 더하기(+)연산\n\na='X'\nb='2'\n\n\nc=a+b\nc\n\n'X2'\n\n\n- 빼기(-)연산\n\na='X2'\nb='2'\na-b\n\nTypeError: unsupported operand type(s) for -: 'str' and 'str'\n\n\n\n이런건 없다.\n\n- 곱하기(*)연산\n\na='X'\n\n\na+a+a\n\n'XXX'\n\n\n\na*3 # a*3 = a+a+a = 'X'+'X+'X'\n\n'XXX'\n\n\n아래도 가능하다.\n\n3*a\n\n'XXX'\n\n\n그리고 아래도 가능하다.\n\na='X'\nb=3 \na*b\n\n'XXX'\n\n\n대신에 의미상 맞지 않는 것은 수행되지 않고 에러가 난다.\n\na='X'\nb='Y'\na+b\n\n'XY'\n\n\n\na*b\n\nTypeError: can't multiply sequence by non-int of type 'str'\n\n\n- 나눗셈(/)연산\n\na='XX'\n\n\na/2\n\nTypeError: unsupported operand type(s) for /: 'str' and 'int'\n\n\n\n이런건 없다..\n\n\n\n인덱싱\n- str은 하나의 벡터 문자가 여러개 있는 형태라고 생각하면 된다.\n\na='guebin'\n\n\na\n\n'guebin'\n\n\n\n6개의 칸에 글씨가 하나씩 들어가 있음.\n\n- 대괄호 []안에 숫자를 넣는 방식으로 벡터의 원소를 호출할 수 있다. (주의: 인덱스가 0부터 시작함)\n\na[0] #첫번째원소\n\n'g'\n\n\n\na[1] #두번째원소 \n\n'u'\n\n\n마지막원소는 -1로 호출할 수도 있다.\n\na[-1]\n\n'n'\n\n\n마지막에서 2번째 원소는 -2로 호출가능하다.\n\na[-2]\n\n'i'\n\n\n- 요약하면 아래와 같은 방식으로 호출가능함.\n\n\n\ng\nu\ne\nb\ni\nn\n\n\n\n\n0\n1\n2\n3\n4\n5\n\n\n0\n-5\n-4\n-3\n-2\n-1\n\n\n\n\na[4]\n\n'i'\n\n\n\na[-2]\n\n'i'\n\n\n\na[-4]\n\n'e'\n\n\n- :을 이용하여 여러개의 원소를 호출할 수 있음.\n\na='guebin'\n\n\na[0:3] # a[0],a[1],a[2],a[3]이 아니라 a[0],a[1],a[2]까지만 뽑힌다. 즉 마지막의 3은 호출되지 않는다. \n\n'gue'\n\n\n\na[1:3] # a[1], a[2] 만 호출 // start=1,  stop=3 \n\n'ue'\n\n\nindex=1부터 시작해서 마지막원소까지 호출하려면?\n\na[5] # guebin의 마지막원소 'n'이 출려 \n\n'n'\n\n\n\na[1:5] # 5는 포함되지 않으므로 틀림\n\n'uebi'\n\n\n\na[1:6] # 정답\n\n'uebin'\n\n\n안 헷갈리는 방법은 없을까?\n\na[-1]\n\n'n'\n\n\n\na[1:-1] # 이것은 결국 (a[1:5]와 같은 것임) \n\n'uebi'\n\n\n해결책? 생략한다!!\n\na[1:]\n\n'uebin'\n\n\n- 생략의 응용1\n\na='k-pop' \na\n\n'k-pop'\n\n\n\na[2:5]\n\n'pop'\n\n\n\na[2:]\n\n'pop'\n\n\n- 생략의 응용2\n\na='k-pop'\na\n\n'k-pop'\n\n\n\na[0:2] # a[0],a[1]\n\n'k-'\n\n\n\na[:2] # a[0],a[1] \n\n'k-'\n\n\n- 생략의 응용3\n\na='k-pop'\na\n\n'k-pop'\n\n\n\na[0:5] # a[0],...,a[4]\n\n'k-pop'\n\n\n\na[:]\n\n'k-pop'\n\n\n\n\nstr 특수기능\n- 파이썬의 변수는 단순히 정보를 담는 그릇이 아니다. 유용한 기능을 제공하는 경우가 있다.\n\na='ABCD' # a라는 변수는 'ABCD'라는 정보를 담는 그릇의 역할만 하지 않고, 특화된 어떠한 기능도 제공한다. \na\n\n'ABCD'\n\n\n\na.lower() # a.lower()를 쓰면 a의 모든 문자를 소문자로 바꾸는 기능을 제공, lower(a)라고 읽자!\n\n'abcd'\n\n\n여기에서 lower()는 문자열에 특화된 기능임. 따라서 당연히 아래는 불가능\n\na=3.14\na.lower() # lower(a)\n\nAttributeError: 'float' object has no attribute 'lower'\n\n\n- 자료형에 특화된 기능(=함수)을 확인하는 방법? a.+ tab 으로 목록 확인 가능\n\na='guebin'\n\n\na.upper?\n\n\nSignature: a.upper()\nDocstring: Return a copy of the string converted to uppercase.\nType:      builtin_function_or_method\n\n\n\n\n\na.upper() # upper(a) \n\n'GUEBIN'\n\n\n\na.capitalize() # capitalize(a) \n\n'Guebin'\n\n\n- 문자열에 대한 다른 내용들은 추후에 다루겠음.\n- 마음의눈: a.f() 형태를 읽는 팁 - a.f()는 f(a)로 생각하면 편리함. - a.f(2)는 f(a,2)로 생각하면 편리함. - 이런점에서 R %>% 연산자와 비슷하다고 생각할 수 있다. (약간 다르긴함)\n- 사실 .은 좀 더 다양한 상황에서 쓰일 수 있다. 변수이름.함수이름() 의 형태가 아니라 - 패지키이름.함수이름() - 패키지이름.변수이름 - 패키지이름.패키지이름.함수이름() - …\n와 같이 다양한 형태가 가능하다. 근본적인 공통점은 .을 기준으로 상위개념.하위개념 으로 이해하는 것이 좋다.\n\n\n0차원 vs 1차원\n- len함수 소개: 원소의 갯수를 알려주는 함수.\n(0차원) len 함수가 동작하지 않음.\n\na=3.14\n\n\nlen(a)\n\nTypeError: object of type 'float' has no len()\n\n\n\nb=True\n\n\nlen(b)\n\nTypeError: object of type 'bool' has no len()\n\n\n(1차원) len 함수가 잘 동작함.\n\na='3.14'\nlen(a)\n\n4\n\n\n\nb=[1,2,3]\n\n\nlen(b)\n\n3\n\n\n\n\n\n숙제\n본인이름으로 str을 생성 \\(\\to\\) LMS에 스크린샷제출 - 성만 출력 - 이름만 출려\n(예시)\n\na='GuebinChoi'\n\n\na[:6]\n\n'Guebin'\n\n\n\na[6:]\n\n'Choi'"
  },
  {
    "objectID": "posts/2022-03-02-(1주차) 3월2일.html",
    "href": "posts/2022-03-02-(1주차) 3월2일.html",
    "title": "01wk-1",
    "section": "",
    "text": "강의영상\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-wJ9o4u3GHaOgNW-pLNbusl"
  },
  {
    "objectID": "posts/2022-03-14-(2주차) 3월14일.html",
    "href": "posts/2022-03-14-(2주차) 3월14일.html",
    "title": "02wk-1: 리스트 - 선언, 연산, 컨테이너형 객체, 가변객체, 메소드, 중첩리스트, 컴프리헨션",
    "section": "",
    "text": "(2주차) 3월14일\n\n리스트 - 선언, 연산, 컨테이너형 객체, 가변객체, 메소드, 중첩리스트, 컴프리헨션\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\nauthor: 최규빈\n\n\n강의영상\n\nyoutube: https://youtube.com/playlist?list=PLQqh36zP38-wW76mxmUAXYte6KcUZRpTE\n\n- (1/8) 리스트의 선언 및 연산 (1)\n- (2/8) 리스트의 선언 및 연산 (2) ; 넘파이패키지\n- (3/8) 컨테이너형객체, 가변객체\n- (4/8) 리스트자료형의 메소드\n- (5/8) 중첩리스트; for문 (1)\n- (6/8) for문 (2)\n- (7/8) 리스트컴프리헨션\n- (8/8) 숙제설명\n\n\nlist\n\n선언\n- 리스트의 선언\n\na=[11,22]\na\n\n[11, 22]\n\n\n\ntype(a)\n\nlist\n\n\n- 비어있는 리스트의 선언\n\na=[] # 방법1\na\n\n[]\n\n\n\na=list() # 방법2\na\n\n[]\n\n\n\n\n연산\n- 더하기연산\n\na=[11,12]\nb=[12,13]\n\n\na\n\n[11, 12]\n\n\n\nb\n\n[12, 13]\n\n\n\na+b\n\n[11, 12, 12, 13]\n\n\n\n우리의 예상과 다른 결과가 나옴 \\(\\to\\) 파이썬은 R처럼 자체적으로 좋은 계산기능을 내장하고 있지 않음.\n\n- 브로드캐스팅과 같이 R에서는 당연히 가능했던 기능을 사용할 수 없음.\n\na=[1,2,3]\nb=1\na+b\n\nTypeError: can only concatenate list (not \"int\") to list\n\n\n- 뺄셈은 정의되지 않음\n\na=[1,2]\nb=[1,2]\na-b\n\nTypeError: unsupported operand type(s) for -: 'list' and 'list'\n\n\n- 곱하기는 정의가능\n\na=[1,2]\n\n\n2*a # a+a \n\n[1, 2, 1, 2]\n\n\n- 나눗셈은 정의되지 않음\n\na=[1,2,1,2]\na/2\n\nTypeError: unsupported operand type(s) for /: 'list' and 'int'\n\n\n- 더하기와 곱하기는 원소의 추가와 반복추가를 의미하지만 그렇다고 해서 뺄셈과 나눗셈이 원소의 삭제를 의미하는것은 아님\n\na=[1,2,3]\na-[3] # 이런건 없다\n\nTypeError: unsupported operand type(s) for -: 'list' and 'list'\n\n\n\na=[1,2,1,2,1,2]\na/3 # 이런건 없다\n\nTypeError: unsupported operand type(s) for /: 'list' and 'int'\n\n\n- 더하기와 곱하기가 원소의 추가와 반복추가를 의미하여 편리할때도 있긴하지만, 우리는 산술적인 +, * 를 원하는 경우도 있다. 이럴 경우는 어떻게 할 수 있을까?\n(예제)\n\na=[1,2]\nb=[3,4]\n\na+b = [4,6] 이 되도록 하려면?\n(풀이1)\n\na[0]+b[0] # a의 첫번째 원소를 추출, b의 첫번째 원소를 추출, 둘을 더함 \n\n4\n\n\n\na[1]+b[1] # a의 두번째 원소를 추출, b의 두번째 원소를 추출, 둘을 더함 \n\n6\n\n\n\n[a[0]+b[0],a[1]+b[1]]\n\n[4, 6]\n\n\n풀이가 가능한 이유? a,b는 리스트이지만 a[0], a[1], b[0], b[1] 은 각각 인트형임. 인트형은 + 연산이 가능했음.\n(풀이2)\nnumpy 패키지 (파이썬의 여러 수치연산들을 담당하는 라이브러리) - 이러한 벡터연산은 누구나 필요로 하는 연산임. - 내가 아니더라도 누군가가 프로그램화 해놓았을 것임. - 그 누군가가 자신이 만든 코드를 잘 정리하여 무료로 배포했을 수도 있음. (패키지를 배포한다고 표현) - 그 패키지를 우리는 가져와서 설치한뒤 사용하기만 하면된다.\n패키지를 설치하는 방법 - !pip install numpy # 최신버전을 설치함 - !conda install -c conda-forge numpy -y # 안전한 버전을 설치함\n설치된 패키지를 사용하는 방법 - import numpy 한뒤에 numpy.??로 기능을 사용 - import numpy as np 한뒤에 np.??로 기능을 사용\n\nimport numpy ## 설치한패키지를 쓰겠다고 선언함 \n\n\na=[1,2]\nb=[3,4]\n\n\naa=numpy.array(a) \nbb=numpy.array(b)\n# aa,bb는 리스트가 아니라 넘파이 어레이,\n# numpy.array()는 numpy패키지에서 제공하는 array함수를 쓰겠다는 의미. \n\n\naa+bb\n\narray([4, 6])\n\n\n이런것도 가능\n\n2*aa\n\narray([2, 4])\n\n\n\n2*aa+1\n\narray([3, 5])\n\n\n\n2*aa+1+bb\n\narray([6, 9])\n\n\n(풀이3)\n\nimport numpy as np ## 설치한 numpy라는 패키지를 쓰겠음. 그런데 numpy말고 np라는 이름으로 쓰겠음\n\n\na=[1,2]\nb=[3,4]\nnp.array(a)+np.array(b)\n\narray([4, 6])\n\n\n\n\n인덱싱\n- str형과 동일한 방식\n\na=[11,22,33,44,55] # 0 -4 -3 -2 -1\n\n\na[-2:] # 끝의 2개의 원소를 뽑음 \n\n[44, 55]\n\n\n\n\n\nlist 고급\n\n콘테이너형 객체, 가변객체\n- 리스트의 원소는 int, float 따위만 가능한 것이 아니다. (리스트는 컨테이너형 객체이므로)\n\nlst = [1,3.14,True,'a',[1,2], \n       (1,2),{'name':'iu','age':27},{1,2,3}]\n\n\nlst\n\n[1, 3.14, True, 'a', [1, 2], (1, 2), {'name': 'iu', 'age': 27}, {1, 2, 3}]\n\n\n각 원소의 타입을 알아보자.\n\ntype(lst[0])\n\nint\n\n\n\ntype(lst[1])\n\nfloat\n\n\n\ntype(lst[2])\n\nbool\n\n\n\ntype(lst[3])\n\nstr\n\n\n\ntype(lst[4])\n\nlist\n\n\n\ntype(lst[5])\n\ntuple\n\n\n\ntype(lst[6])\n\ndict\n\n\n\ntype(lst[7])\n\nset\n\n\n- str은 컨테이너형이 아니다.\n\n'abcd'[2]\n\n'c'\n\n\n\nstr의 모든 원소는 문자임\n\n- 리스트의 원소를 수정할 수 있다. (리스트는 가변객체이므로)\n\na=[11,22,33]\na\n\n[11, 22, 33]\n\n\n\na[0]\n\n11\n\n\n\na[0]=111\n\n\na\n\n[111, 22, 33]\n\n\n- 원소수정은 당연한 기능같은데 이것이 불가능한 경우도 있다.\n(가능한경우)\n\na=['g','u','e','b','i','n']\na\n\n['g', 'u', 'e', 'b', 'i', 'n']\n\n\n\na[0]\n\n'g'\n\n\n\na[0]='G'\n\n\na\n\n['G', 'u', 'e', 'b', 'i', 'n']\n\n\n(불가능한경우)\n\na='guebin'\na\n\n'guebin'\n\n\n\na[0]\n\n'g'\n\n\n\na[0]='G'\n\nTypeError: 'str' object does not support item assignment\n\n\n- 리스트 원소 삭제\n(예제)\n아래와 같이 문자로 된 리스트를 선언하자.\n\na=['g','u','e','b','i','n']\na\n\n['g', 'u', 'e', 'b', 'i', 'n']\n\n\n사실 더 쉽게 선언할 수 있음\n\na= 'guebin' # string으로 a를 선언\na= list(a) # list(a)를 통하여 str을 ㅣist로 변환 -> 그 결과를 a에 다시 저장\na\n\n['g', 'u', 'e', 'b', 'i', 'n']\n\n\n첫번째 원소를 삭제하고 싶다면?\n\ndel a[0]\n\n\na\n\n['u', 'e', 'b', 'i', 'n']\n\n\n이 상태에서 다시 첫번쨰 원소를 삭제한다면?\n\ndel a[0]\n\n\na\n\n['e', 'b', 'i', 'n']\n\n\n- 리스트의 원소 추가\n(예제) 비어있는 리스트를 만들고 원소 0,1,2를 차례로 추가하여 보자.\n(풀이1)\n\na=[]\na\n\n[]\n\n\n\na= a + [0] \na\n\n[0]\n\n\n\na= a + [1]\na\n\n[0, 1]\n\n\n\na= a + [2]\na\n\n[0, 1, 2]\n\n\n(풀이2)\n\na=[]\na\n\n[]\n\n\n\na += [0] \na\n\n[0]\n\n\n\na += [1]\na\n\n[0, 1]\n\n\n\na += [2]\na\n\n[0, 1, 2]\n\n\n\n암기법: 중복되는 변수를 지우고 연산자의 순서를 바꾼다.\n\n(풀이3) 리스트 특화기능(=메소드)를 이용\n\na=[]\na\n\n[]\n\n\n\na.append(0)\na\n\n[0]\n\n\n\na.append(1)\na\n\n[0, 1]\n\n\n\na.append(2)\na\n\n[0, 1, 2]\n\n\n- a+[4]와 a.append(4)의 차이점은?\n(관찰1)\n\na=[1,2,3]\na+[4] ## 리스트 a와 리스트 [4]의 연산결과를 알려줘 \n\n[1, 2, 3, 4]\n\n\n\na ## a는 그대로임. 변화없음 \n\n[1, 2, 3]\n\n\n(관찰2)\n\na=[1,2,3]\na.append(4)\n\n\na ## a자체가 변화함 \n\n[1, 2, 3, 4]\n\n\n비슷해보이지만 굉장히 미묘한 차이가 있음\na.append(4): a에 4를 append하라 \\(\\to\\) a가 변함\na+[4]: a와 4를 연산하라\n\n\n메소드 (리스트 자료형에 특화된 특수한 함수들)\n(append)\n\na=[1,2,3,4]\na.append?\n\n\nSignature: a.append(object, /)\nDocstring: Append object to the end of the list.\nType:      builtin_function_or_method\n\n\n\n\n\na.append(5)\na\n\n[1, 2, 3, 4, 5]\n\n\n(clear)\n\na=[1,2,3,4]\na.clear?\n\n\nSignature: a.clear()\nDocstring: Remove all items from list.\nType:      builtin_function_or_method\n\n\n\n\n\na.clear()\na\n\n[]\n\n\n(copy)\n\na=[1,2,3,4]\na.copy?\n\n\nSignature: a.copy()\nDocstring: Return a shallow copy of the list.\nType:      builtin_function_or_method\n\n\n\n\n\nb=a.copy()\nb\n\n[1, 2, 3, 4]\n\n\n(count)\n\na=[1,1,2,3,3,4,4,4]\na.count?\n\n\nSignature: a.count(value, /)\nDocstring: Return number of occurrences of value.\nType:      builtin_function_or_method\n\n\n\n\n\na.count(1)\n\n2\n\n\n\na.count(2)\n\n1\n\n\n\na.count(3)\n\n2\n\n\n\na.count(4)\n\n3\n\n\n(extend)\n\na=[1,2,3,4]\nb=[-1,-2,-3,-4]\n\n\na.extend(b)\na\n\n[1, 2, 3, 4, -1, -2, -3, -4]\n\n\n\na=[1,2,3,4]\nb=[-1,-2,-3,-4]\n\n\na.append(b)\n\n\na\n\n[1, 2, 3, 4, [-1, -2, -3, -4]]\n\n\n(index)\n\na=[11,22,'a',True, 22,'a']\na.index?\n\n\nSignature: a.index(value, start=0, stop=9223372036854775807, /)\nDocstring:\nReturn first index of value.\nRaises ValueError if the value is not present.\nType:      builtin_function_or_method\n\n\n\n\n\na.index(11)\n\n0\n\n\n\na.index(22)\n\n1\n\n\n\na.index('a')\n\n2\n\n\n\na.index(True)\n\n3\n\n\n(insert)\n\na=[1,2,3]\na.insert?\n\n\nSignature: a.insert(index, object, /)\nDocstring: Insert object before index.\nType:      builtin_function_or_method\n\n\n\n\n\na.insert(1,88) \na\n\n[1, 88, 2, 3]\n\n\n(pop)\n\na=['a',1,2,'d']\na.pop?\n\n\nSignature: a.pop(index=-1, /)\nDocstring:\nRemove and return item at index (default last).\nRaises IndexError if list is empty or index is out of range.\nType:      builtin_function_or_method\n\n\n\n\n\na.pop() # index=-1 이므로 마지막원소가 나타남\n\n'd'\n\n\n\na # a는 마지막 원소가 사라진 상태\n\n['a', 1, 2]\n\n\n\na.pop(0) # index=0 이므로 첫번쨰 원소가 나타남\n\n'a'\n\n\n\na # a에는 첫번째 원소가 사라진 상태\n\n[1, 2]\n\n\n(remove)\n\na=['a',2,3,'d']\na.remove?\n\n\nSignature: a.remove(value, /)\nDocstring:\nRemove first occurrence of value.\nRaises ValueError if the value is not present.\nType:      builtin_function_or_method\n\n\n\n\n\na.remove('d')\n\n\na\n\n['a', 2, 3]\n\n\n\na.remove('a')\n\n\na\n\n[2, 3]\n\n\n(reverse)\n\na=[1,2,3,4]\na.reverse?\n\n\nSignature: a.reverse()\nDocstring: Reverse *IN PLACE*.\nType:      builtin_function_or_method\n\n\n\n\n\na.reverse()\na\n\n[4, 3, 2, 1]\n\n\n(sort)\n\na=[1,3,2,4]\na.sort?\n\n\n\nSignature: a.sort(*, key=None, reverse=False)\nDocstring:\nSort the list in ascending order and return None.\nThe sort is in-place (i.e. the list itself is modified) and stable (i.e. the\norder of two equal elements is maintained).\nIf a key function is given, apply it once to each list item and sort them,\nascending or descending, according to their function values.\nThe reverse flag can be set to sort in descending order.\nType:      builtin_function_or_method\n\n\n\n\n\na.sort()\na\n\n[1, 2, 3, 4]\n\n\n(다른예제들)\n\na=list('guebin')\na\n\n['g', 'u', 'e', 'b', 'i', 'n']\n\n\n\na.sort()\na\n\n['b', 'e', 'g', 'i', 'n', 'u']\n\n\n\na.sort(reverse=True)\na\n\n['u', 'n', 'i', 'g', 'e', 'b']\n\n\n\n\n중첩리스트\n\nA=[[1,2,3],[4,5,6],[7,8,9]]\nA\n\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n\n- A는 아래와 같은 매트릭스로 이해할 수 있다\n$\n\\[\\begin{bmatrix}\n1 & 2 & 3 \\\\\n4 & 5 & 6 \\\\\n7 & 8 & 9\n\\end{bmatrix}\\]\n$\n- A에서 (2,1)의 원소를 뽑고싶다 = 4를 뽑고싶다\n\nA[1,0]\n\nTypeError: list indices must be integers or slices, not tuple\n\n\n\n실패\n\n\nA[1][0]\n\n4\n\n\n\n성공\n\n- 성공의 이유를 분석해보자.\n\nA\n\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n\n\nA[1]\n\n[4, 5, 6]\n\n\n\nA[1][0]\n\n4\n\n\n- 매트릭스는 아니지만 매트릭스 같음! - 1차원 배열을 다차원 배열로 확장할 수 있는 기본 아이디어를 제공함\n\n\n리스트컴프리헨션(\\(\\star\\star\\star\\))\n- 리스트 컴프리헨션을 이해하기 전에 for문에 대하여 알아보자.\n[예비학습] for문 벼락치기\n프로그램안에서 반복해서 무엇인가를 하고싶다 \\(\\to\\) for\n\nfor i in [0,1,2,3]: ## 반복실행계획\n    print(i) ## 반복실행할내용, 탭을이용하여 들여쓰기해야한다. \n\n0\n1\n2\n3\n\n\n(예제) 1,2,3,4의 합을 for문을 이용하여 구해보자.\n\n_sum = 0\nfor i in [1,2,3,4]: \n    _sum = _sum + i \n\n\n_sum\n\n10\n\n\n\n_sum = 0\ni=1 \n_sum = _sum + i ## 1 <= 0+1\ni=2\n_sum = _sum + i ## 3 <= 1+2 \ni=3 \n_sum = _sum + i ## 6 <= 3+3\ni=4\n_sum = _sum + i ## 10 <= 6+4 \n\n\n_sum\n\n10\n\n\n예비학습끝\n- 예제: \\(2^0, 2^1, 2^2, 2^3\\)를 원소로 가지는 리스트를 생성하라.\n(풀이1) 직접입력\n\nx= [2**0, 2**1, 2**2, 2**3] \nx\n\n[1, 2, 4, 8]\n\n\n(풀이2) for문을 이용함\n\nx=[] \nfor i in [0,1,2,3]:\n    x.append(2**i) \n\n\nx\n\n[1, 2, 4, 8]\n\n\n(풀이3) for문을 이용함\n\nx=[] \nfor i in [0,1,2,3]:\n    x = x+[2**i]\n\n\nx\n\n[1, 2, 4, 8]\n\n\n(풀이4) for문을 이용함\n\nx=[] \nfor i in [0,1,2,3]:\n    x += [2**i]\n\n\nx\n\n[1, 2, 4, 8]\n\n\n(풀이5) 리스트컴프리헨션을 이용한 풀이\n\nx= [2**i for i in [0,1,2,3]] \nx\n\n[1, 2, 4, 8]\n\n\n- 리스트컴프리헨션의 문법 암기방법 - 집합에서 조건제시법을 연상 - \\(\\{2^0,2^1,2^2,2^3\\}=\\{2^i: i \\in \\{0,1,2,3\\} \\}\\)\n- 리스트컴프리헨션이란? - 리스트를 매우 효율적으로 만드는 테크닉 - for문에 비하여 가지고 있는 장점: (1) 코드가 간결하다 (2) 빠르다\n- 예제: 리스트 컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라.\n\n['SSSS','PPPP','AAAA','MMMM']\n\n['SSSS', 'PPPP', 'AAAA', 'MMMM']\n\n\n(풀이)\n\n[i*4 for i in 'SPAM']\n\n['SSSS', 'PPPP', 'AAAA', 'MMMM']\n\n\n- 예제: 리스트컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라.\n\n['X1','X2','X3','Y1','Y2','Y3']\n\n['X1', 'X2', 'X3', 'Y1', 'Y2', 'Y3']\n\n\n(풀이)\n\n[i+j for i in 'XY' for j in '123']\n\n['X1', 'X2', 'X3', 'Y1', 'Y2', 'Y3']\n\n\n- 예제: 리스트컴프리헨션을 이용하여 통계1,…,통계5,수학1,…,수학5를 만들어라.\n(풀이)\n\n[x+y for x in ['stat','math'] for y in '12345'] \n\n['stat1',\n 'stat2',\n 'stat3',\n 'stat4',\n 'stat5',\n 'math1',\n 'math2',\n 'math3',\n 'math4',\n 'math5']\n\n\n\n\\(\\{xy : x \\in \\{stat,math\\}, y \\in \\{1,2,3,4,5\\} \\}\\)\n\n(다른풀이) 참고로 for문을 쓰면 좀 복잡해진다.\n\n_lst = [] \nfor x in ['stat','math']: \n    for y in '12345': \n        _lst = _lst + [x+y] \n\n\n_lst \n\n['stat1',\n 'stat2',\n 'stat3',\n 'stat4',\n 'stat5',\n 'math1',\n 'math2',\n 'math3',\n 'math4',\n 'math5']\n\n\n- 예제: ’jbnu’를 이용하여 아래와 같은 리스트를 만들어라. (리스트컴프리헨션을 이용할것)\n\n['j','b','n','u']\n\n['j', 'b', 'n', 'u']\n\n\n(다른풀이) 아래와 같이 풀면 된다는것은 알고 있음\n\nlist('jbnu')\n\n['j', 'b', 'n', 'u']\n\n\n(풀이)\n\n[x for x in 'jbnu']\n\n['j', 'b', 'n', 'u']\n\n\n- 예제: x에는 무엇이 있을까?\n(경우1)\n\nx=1 \nlst = [] \nfor x in 'jbnu': \n    lst = lst + [x]\nlst    \n\n['j', 'b', 'n', 'u']\n\n\n\nx \n\n'u'\n\n\n(경우2)\n\nx=1 \nlst = [x for x in 'jbnu'] \nlst \n\n['j', 'b', 'n', 'u']\n\n\n\nx\n\n1\n\n\n\n진짜 미묘하게 다르죠?\n\n- 예제: [X1,X2,X3,…,X100]와 같은 리스트를 만들어보라.\n(풀이)\n\n['X'+str(i) for i in [1,2,3,4]] ## 이걸 4까지가 아니라 100까지 써야함\n\n['X1', 'X2', 'X3', 'X4']\n\n\n\n['X'+str(i) for i in 1:100]\n\nSyntaxError: invalid syntax (<ipython-input-432-4555f37f5468>, line 1)\n\n\n[예비학습]\n\nrange(0,10)\n\nrange(0, 10)\n\n\n\n이게뭐야?\n\n\n_tmp = range(0,10)\n_tmp?\n\n\nType:        range\nString form: range(0, 10)\nLength:      10\nDocstring:  \nrange(stop) -> range object\nrange(start, stop[, step]) -> range object\nReturn an object that produces a sequence of integers from start (inclusive)\nto stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.\nstart defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.\nThese are exactly the valid indices for a list of 4 elements.\nWhen step is given, it specifies the increment (or decrement).\n\n\n\n\n\n우리가 아는 범위에서는 모르겠음.. 이런게 있나보다 하고 넘어가야 하겠음\n\n\nlist(range(0,10)) # 0을 포함, 10을 미포함 \n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n이게 중요한것임. range(0,10)를 리스트화시키면 [0,1,2,…,9] 와 같은 리스트를 얻을 수 있음.\n\n\nlist(range(10)) # 0은 생략가능\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nlist(range(2,10)) # 2는 포함, 10은 미포함 \n\n[2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nlist(range(1,10,2)) # 2는 포함, 10은 미포함 \n\n[1, 3, 5, 7, 9]\n\n\n예비학습 끝\n\n['X'+str(i) for i in list(range(1,13))] ## 출력결과가 너무 기니까 101대신에 13으로 변경 \n\n['X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8', 'X9', 'X10', 'X11', 'X12']\n\n\n(아래와 같은 풀이도 가능)\n\n['X'+str(i) for i in range(1,13)] ## 출력결과가 너무 기니까 101대신에 13으로 변경 \n\n['X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8', 'X9', 'X10', 'X11', 'X12']\n\n\n(딴생각) 생각해보니까 for문 뒤에 올수 있는것이 무엇인지 생각하는것도 흥미로울듯\n\nfor i in '1234':\n    print(i)\n\n1\n2\n3\n4\n\n\n\nfor i in [1,2,3,4]:\n    print(i)\n\n1\n2\n3\n4\n\n\n\nfor i in (1,2,3,4): # (1,2,3,4)는 튜플\n    print(i)\n\n1\n2\n3\n4\n\n\n\nfor i in {1,2,3,4}: # {1,2,3,4}는 set \n    print(i)\n\n1\n2\n3\n4\n\n\n\nfor i in {'name':'iu','age':28}: #{'name':'iu','age':28} 는 딕셔너리\n    print(i)\n\nname\nage\n\n\n\nfor i in range(1,5): \n    print(i)\n\n1\n2\n3\n4\n\n\n(숙제)\n리스트컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라.\n\n['X1','X2X2','X3X3X3','X4X4X4X4','X5X5X5X5X5']\n\n['X1', 'X2X2', 'X3X3X3', 'X4X4X4X4', 'X5X5X5X5X5']"
  },
  {
    "objectID": "posts/2022-04-25-2022년 파이썬입문 중간고사.html",
    "href": "posts/2022-04-25-2022년 파이썬입문 중간고사.html",
    "title": "PP2023",
    "section": "",
    "text": "아래코드를 이용하여 numpy 와 matplotlib을 import하라.\nimport numpy as np\nimport matplotlib.pyplot as plt \n\n\n\n주의: 문제에 조건이 있는 경우 조건을 준수할 것\n(1) a의 type을 bool로 바꾸어라.\n\na=1.0\n\n\n(2)-(6)\n아래의 문자열을 고려하자.\ntest_arr = 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSUGPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XAt3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/EnmZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbxNrRFi9wrf+M7Q== schacon@mylaptop.local'\n(2) 위 문자열에서 짝수번째 원소를 출력하는 코드를 작성하라.\n(3) 위 문자열에서 마지막 10개의 원소를 출력하는 코드를 작성하라.\n(4) 위 문자열을 뒤집은 문자열을 구하는 코드를 작성하라. 즉 아래를 출력하는 코드를 작성하라.\n'lacol.potpalym@nocahcs ==Q7M+frw9iFRrNxbsSVqMlTarQ10d1os2njkImtaKn1+3r3wg+b8li/Z68Ec2DryauLMVmPZ98IPTnPZO4WA+ZmnE/trewr0bP/wv6ybNYjvDNpyX88XrrpKJQjlFUuz1bmFIe/86wW0V3+5x9Q1McnsAoJoaF3tAX7/KVlSvFMdsdwQANsjR6V8qLicMsZAHpXhKn1XixqBtiRXF3oAH+RCFXWlByTM/JdOk7vbP3adc0gwSppPbkVQ5XFl9h4fVELElx7MzQivrFUhbj9WJ4HJ81we5Zy4Idh7WYTDHlzfan+lPGUSDWB/mojT9KGTLNpITmrbS71YHfrHDkpUOlkAEQAAAwIBAAAAE2cy1CazN3BAAAA asr-hss'\n(5) 위 문자열에서 대문자의 수를 count하라.\nhint .isupper() 메소드를 이용할 것.\n\n'a'.isupper()\n\nFalse\n\n\n\n'A'.isupper()\n\nTrue\n\n\n\n'='.isupper()\n\nFalse\n\n\n\n'@'.isupper()\n\nFalse\n\n\n(6) 위 문자열에서 사용된 문자 및 특수문자의 종류는 모두 몇가지 인가?\nnote1: 문자열 ‘AAB @ab’ 에서 사용된 문자는 ‘A’, ‘B’, ’ ‘,’@‘, ’a’, ‘b’ 이므로 모두 6종류의 문자 및 특수문자가 사용되었다.\nnote2: ’ ‘,’+‘,’-‘,’.’, ‘/’, ‘=’, ‘@’, ‘1’, ‘a’, ‘A’ 등을 모두 다른 문자로 취급한다.\n\n(7) 리스트컴프리헨션을 이용하여 아래와 같은 리스트를 생성하라\n['a',\n 'aa',\n 'aaa',\n 'aaaa',\n 'aaaaa',\n 'aaaaaa',\n 'aaaaaaa',\n 'aaaaaaaa',\n 'aaaaaaaaa',\n 'aaaaaaaaaa'] <- a가 10개있음 \n(8) 길이가 1인 튜플을 만들어 자신의 학번을 저장하라. 길이가 1인 튜플을 만들어 자신의 영문이름을 저장하라. 두 튜플을 + 연산자로 합쳐아래와 같은 출력결과를 얻어라.\n(202143052,'guebin')\n(9) 아래와 같은 list가 있다고 하자.\ntest_lst = [['g',1],['u',5],['e',2],['b',8],['i',2],['n',9]]\ntest_lst와 리스트컴프리헨션을 이용하여 아래를 출력하는 코드를 구현하라.\n['g', 'uuuuu', 'ee', 'bbbbbbbb', 'ii', 'nnnnnnnnn']\n(10) 다음은 학생들의 출석,레포트,중간고사,기말고사 점수를 입력으로 하여 학점을 계산하는 함수이다.\ndef grade(attendance, report, mid, final): \n    if attendance<70: \n        credit = 'F' \n    else: \n        total_score = attendance * 0.1 + report * 0.2 + mid * 0.3 + final * 0.4 \n        if total_score > 80: \n            credit = 'A+' \n        else:\n            credit = 'B0' \n    return credit \n아래는 학생들의 학번, 출석점수, 레포트, 중간고사, 기말고사 점수가 입력된 리스트이다.\ndata = [['202212345', [100,95,25,90]],\n        ['202212346', [60,90,95,95]],\n        ['202212347', [50,90,45,35]],\n        ['202212348', [90,90,50,75]],\n        ['202212349', [100,95,85,85]],\n        ['202212350', [90,90,100,95]],\n        ['202212351', [100,95,100,95]],\n        ['202212352', [95,85,80,60]],\n        ['202212353', [100,90,60,55]],\n        ['202212354', [100,85,70,95]],\n        ['202212355', [100,95,40,100]]]\n아래의 ???를 적절하게 완성하여 학생들의 학점을 계산하는 코드를 완성하라.\n[grade(???) for _, scores in data] \n(11) 길이가 0인 문자열을 선언하라.\n\n(12)-(15)\n(12) dir(plt)와 dir(np)를 각각 실행하라. 실행결과를 각각 a,b로 저장하라. a,b의 type은 무엇인가?\n(13) a의 원소와 b의 원소의 수를 각각 구하라.\n(14) a와 b의 공통원소의 수를 구하라.\n(15) a와 b의 원소를 합친 리스트를 만들어라. (공통원소는 중복하여 합치지 않는다)\n\n(16)-(18) 아래와 같은 dictionary가 있다.\ntest_dic = {'202212345': {'att':100,'rep':95,'mid':25,'fin':90},\n            '202212346': {'att':60,'rep':90,'mid':95,'fin':95},\n            '202212347': {'att':50,'rep':90,'mid':45,'fin':35},\n            '202212348': {'att':90,'rep':90,'mid':50,'fin':75},\n            '202212349': {'att':100,'rep':95,'mid':85,'fin':85},\n            '202212350': {'att':90,'rep':90,'mid':100,'fin':95},\n            '202212351': {'att':100,'rep':95,'mid':100,'fin':95},\n            '202212352': {'att':95,'rep':85,'mid':80,'fin':60},\n            '202212353': {'att':100,'rep':90,'mid':60,'fin':55},\n            '202212354': {'att':100,'rep':85,'mid':70,'fin':95},\n            '202212355': {'att':100,'rep':95,'mid':40,'fin':100}}\n여기에서 202212345등은 학번을, att는 출석점수, rep는 레포트점수, mid는 중간고사점수, fin은 기말고사 점수를 의미한다.\n(16) get 메소드를 이용하여 202212353에 해당하는 학생의 성적을 아래와 같이 리턴하라.\n{'att': 100, 'rep': 90, 'mid': 60, 'fin': 55}\n(17) 202212354의 레포트 점수를 리턴하라.\n(18) 학생들의 학번을 리턴하는 코드를 작성하라.\n\n(19) shape이 ()인 numpy이 array를 만들어라. (즉 차원이 0인 np.array를 만들어라)\n(20) shape이 (2,2)인 단위행렬을 만들어라.\n(21) a의 모든 원소에 1을 더하는 코드를 작성하라.\na=[1,3,2,5,-3,3,8,2,3,1] \n(22) 아래와 같은 수열을 생성하라.\n1,3,6,10,15,21,28,36,45, ... , 378, 406, 435\nhint: 이 수열에서 \\(a_n-a_{n-1}=n, ~n\\geq 2\\) 이다. 즉 3-1=2, 6-3=3, 10-6=4, …\n(23) 아래와 같은 수열을 생생성하라.\n0,1,2,3,4,5,...,99 \n위의 수열에서 1,4,7,10,13,… 번째의 원소를 뽑아라. (첫번째 원소는 0이다)\n(24) numpy를 이용하여 아래의 역행렬을 구하라. \\[\\begin{bmatrix}\n1&  0 \\\\\n0&  3\n\\end{bmatrix}\\]\n\n(25)-(30)\na,b가 아래와 같이 주어졌다고 하자.\na=[1]*10 \nb=[2]*10 \n(25) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n(26) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([[1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2]])\n(27) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]\n(28) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2]])\n(29) a,b와 np.stack을 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]\n(30) a,b와 np.stack을 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2]])\n(31) 아래와 같은 배열이 있다고 하자.\na=np.array([1,2,3,4,5])\nb=np.array([3,2,1,1,2])\nnumpy의 @ 연산자를 이용하여 \\(\\sum_{i=1}^{5}a_ib_i\\)를 계산하라.\n(32) 아래와 같은 배열을 생성하라.\nx=np.random.randn(100)\nnumpy의 @연산자를 이용하여 \\(\\sum_{i=1}^{100}x_i^2\\)을 계산하라.\n(33) 아래와 같은 배열을 생성하라.\na=np.array([1/100]*100)\nx=np.random.randn(100)\nnumpy의 @연산자를 이용하여 \\(\\frac{1}{n}\\sum_{i=1}^{n}x_i\\)를 계산하라.\n(34) 표준정규분포에서 100개의 난수를 생성하라.\n(35) 아래와 동일한 코드를 np.random.rand()로 구현하라.\nnp.random.uniform(low=2,high=4,size=(5,)) \n(36) 아래와 같은 배열을 선언하라.\na=np.random.randn(100) \nnp.where를 이용하여 a의 모든 음수를 0으로 바꾸는 코드를 작성하라.\n(37) 아래와 같은 배열을 선언하라.\na=np.random.randn(100) \n위 배열의 최소값이 위치한 index를 return하라.\n(38) 아래와 같은 배열을 선언하라.\n\na=np.arange(12).reshape(3,4)\na\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n차원의 수를 유지하면서 1열을 추출하는 코드를 작성하라. 즉 결과가 아래와 같이 나오도록 하라.\narray([[0],\n       [4],\n       [8]])\n(39)-(40)\n(39) 자신의 학번으로 random seed 를 설정하라. [20,25)의 범위에서 100개의 정수를 랜덤으로 생성해 (10,10) shape의 배열을 만들어라.\n(40) 39의 결과에서 20,21,22 는 각각 몇개씩 있는가?\n\n\n\n\n(1)-(6) 아래의 코드를 실해하여 test_dic를 생성하라.\nnp.random.seed(43052)\natt = np.random.choice(np.arange(10,21)*5,200)\nrep = np.random.choice(np.arange(5,21)*5,200)\nmid = np.random.choice(np.arange(0,21)*5,200)\nfin = np.random.choice(np.arange(0,21)*5,200)\nkey = ['202212'+str(s) for s in np.random.choice(np.arange(300,501),200,replace=False)]\ntest_dic = {key[i] : {'att':att[i], 'rep':rep[i], 'mid':mid[i], 'fin':fin[i]} for i in range(200)}\ndel(att);del(rep);del(mid);del(fin);del(key)\n여기에서 202212345등은 학번을, att는 출석점수, rep는 레포트점수, mid는 중간고사점수, fin은 기말고사 점수를 의미한다.\n(1) test_dic에서 출석점수가 70이상(70>=)인 학생들의 학번을 출력하는 코드를 작성하라.\n\nnp.random.seed(43052)\natt = np.random.choice(np.arange(10,21)*5,200)\nrep = np.random.choice(np.arange(5,21)*5,200)\nmid = np.random.choice(np.arange(0,21)*5,200)\nfin = np.random.choice(np.arange(0,21)*5,200)\nkey = ['202212'+str(s) for s in np.random.choice(np.arange(300,501),200,replace=False)]\ntest_dic = {key[i] : {'att':att[i], 'rep':rep[i], 'mid':mid[i], 'fin':fin[i]} for i in range(200)}\ndel(att);del(rep);del(mid);del(fin);del(key)\n\n(2) test_dic에서 출석점수가 70미만(<70)인 학생들의 수를 구하라.\n(3) test_dic에서 출석점수가 70이상(70>=)인 학생들의 중간고사 점수의 평균을 계산하라.\n\nnp.mean([test_dic[k]['mid'] for k in test_dic if test_dic[k]['mid']>=70])\n\n85.41666666666667\n\n\n(4) test_dic에서 중간고사 점수를 출력하는 코드를 작성하라.\n(5) test_dic에서 중간고사 점수의 표준편차와 레포트점수의 표준편차를 구하여라. 어떤것이 더 큰가?\n(6) test_dic에서 중간고사 점수가 가장 높은 사람의 학번을 출력하라.\n주의: att,rep,mid,fin,key를 실행하여 소멸시키지 않고 그대로 이용하거나 np.random.choice()를 이용하여 재생성한 뒤 계산할 경우 0점 처리함. - 예를들면 (5)의 경우 np.std(mid), np.std(rep) 와 같은 식으로 구현하면 0점 처리함.\n\n(7) 성공확률이 0.45인 시행이 있다고 하자. 이 시행을 100번의 시행하였을 경우 73번 이상 성공할 확률은 얼마인가? 시뮬레이션을 이용하여 근사계산하라.\n(8) 성공확률이 0.45인 시행이 있다고 하자. 이 시행을 100번 시행하였을 경우 10번이하로 실패하거나 90번이상 성공할 확률은 얼마인가? 시뮬레이션을 이용하여 근사계산하라.\n(9) 아래와 같은 행렬을 선언하자.\n\nA=np.arange(2*1).reshape(2,1)\nB=np.arange(2*2).reshape(2,2)\nC=np.arange(2*3).reshape(2,3)\nD=np.arange(3*3).reshape(3,3)\nE=np.arange(3*2).reshape(3,2)\nF=np.arange(3*1).reshape(3,1)\n\n아래의 블락매트릭스를 만들어라.\n\\(\\begin{bmatrix} a_{11} & b_{11} & b_{12} & c_{11} & c_{12} & c_{13} \\\\ a_{21} & b_{21} & b_{22} & c_{21} & c_{22} & c_{23} \\\\ d_{11} & d_{12} & d_{13} & e_{11} & e_{12} & f_{11} \\\\ d_{21} & d_{22} & d_{23} & e_{21} & e_{22} & f_{21} \\\\ d_{31} & d_{32} & d_{33} & e_{31} & e_{32} & f_{31} \\end{bmatrix}\\)\n여기에서 \\(a_{ij}\\)는 매트릭스 \\({\\bf A}\\)의 원소이다.\n(10) 표준정규분포에 10000개의 난수를 아래와 같이 생성하라.\n\nx=np.random.randn(10000)\ny=np.random.randn(10000)\n\n\\((i,j)\\) 번째 원소가 \\((x_i-y_i)^2\\)인 (10000,10000) 매트릭스를 만들어라.\n\n(11)-(16)\n아래와 같은 매트릭스를 생성하라.\n\nnp.random.seed(43052)\na=np.random.randn(10000).reshape(100,100)\na\n\narray([[ 0.38342049,  1.0841745 ,  1.14277825, ..., -0.18506968,\n         1.05538764,  1.18701443],\n       [-0.25027283, -1.58045215,  0.1124153 , ...,  1.0321894 ,\n         0.40438012, -0.13491595],\n       [-0.76763724, -0.64294232, -0.24782396, ..., -0.01530161,\n         0.89125897, -0.82683395],\n       ...,\n       [-1.41379028,  0.79611333, -0.71011837, ..., -0.9860352 ,\n         1.30755244,  2.18677233],\n       [ 1.33968105, -0.78457449, -0.10405858, ..., -0.71110186,\n         0.99841286,  2.34371635],\n       [-0.66422032, -0.07550233,  0.7405869 , ...,  1.03232398,\n        -0.18988252, -0.03578389]])\n\n\n(11) 각 행의 합을 구하라. 즉 1행의 합, 2행의 합, … 100행의 합을 계산하라. - 1행의합 = 0.38342049 + 1.0841745 + … + 1.18701443\n(12) (11)의 결과로 나온 배열의 표준편차를 구하라.\n(13) 각 열의 평균을 구하라. 즉 1열의 평균, 2열의 평균, … , 100열의 평균을 계산하라.\n(14) (13)의 결과로 나온 배열의 표준편차를 구하라.\n(15) a의 원소중 a>0 을 만족하는 원소의 평균을 구하여라.\n(16) a의 원소중 a>3을 만족하는 원소의 수를 count하라.\n\n(17)-(18)\n아래와 같은 배열 a를 고려하자.\n\nnp.random.seed(43052)\na=np.random.binomial(1,0.2,size=(10000,))\na\n\narray([1, 0, 1, ..., 1, 1, 0])\n\n\n(17) 0에서 1로 바뀌는 부분을 count하라.\n(18) 1에서 0으로 바뀌는 부분을 count하라.\n[예시] 아래의 배열에서 0에서 1로 부분은 모두 세 군데이고, 1에서 0으로 바뀌는 부분은 모두 두 군데 이다.\n0 0 0 1 0 1 0 0 0 1 1 1 \n\n(19)-(25)\n(19) \\(i=1,2,\\dots,1000\\)에 대하여 아래를 각각 구하라.\n\\[x_i= \\cos(t_i)+\\cos(3t_i)+\\cos(5t_i)\\]\n\\[y_i= \\sin(t_i)+\\sin(4t_i)\\]\n여기에서 \\(t_i=\\frac{2\\pi i }{1000}\\) 이다.\n(20) \\((x_i,y_i)\\)를 그려라.\n(21) 아래와 같은 변환을 통하여 \\((w_i,z_i)\\)를 얻어라.\n\\[w_i= \\frac{1}{\\sqrt{2}}x_i - \\frac{1}{\\sqrt{2}}y_i\\]\n\\[z_i= \\frac{1}{\\sqrt{2}}x_i + \\frac{1}{\\sqrt{2}}y_i\\]\n\\((w_i,z_i)\\)를 시각화 하라.\n(22) 아래와 같은 매트릭스를 만들어라.\n\\[{\\bf A}=\\begin{bmatrix}\nx_1 & y_1 \\\\\nx_2 & y_2 \\\\\n\\dots & \\dots \\\\\nx_n & y_n\n\\end{bmatrix}\\]\n(23) \\({\\bf A} {\\bf B}\\)의 첫번째 열과 두번째 열을 시각화한 결과가 \\((w_i,z_i)\\)과 동일하도록 적당한 (2,2) 매트릭스 \\({\\bf B}\\)를 만들어라.\n(24) \\({\\bf A}{\\bf B}^2\\)의 첫번째 열과 두번째 열을 시각화 하라.\n(25) \\(n=3,4,5,6,\\dots\\) 에 대하여 \\({\\bf A}{\\bf B}^n\\)을 반복적으로 그려보라. \\((x_i,y_i)\\)의 시각화 결과와 동일한 가장 작은 \\(n\\)은 얼마인가? \\((w_i,z_i)\\)의 시각화 결과와 동일한 가장 작은 \\(n\\)은 얼마인가?\n\n\n\n\n(1) 아래는 python을 설치하는 방법을 소개한 url 이다. 직접 url에 들어가서 설치하는 방법을 읽어보고 곤이, 철용, 아귀, 짝귀 중 옳은말을 한 사람을 모두 골라라. - https://www.pythonlikeyoumeanit.com/Module1_GettingStartedWithPython/Installing_Python.html\n(곤이) 해당 방법은 아나콘다를 이용하여 파이썬을 설치하는 방법이다.\n(철용) 그래서 이 방법으로는 가상환경을 만들 수 없겠군.\n(아귀) 위 url에 제시된 방법으로 설치하면 주피터가 자동설치 된다.\n(짝귀) 따라서 위의 방법으로 설치하면 IDE는 주피터만 사용할 수 있다.\n(2) 곤이는 1부터 10까지의 합을 구하는 코드를 작성하기 위하여 아래와 같이 mysum.py 파일을 만들었다.\n## mysum.py\ntotal = 0 \nfor i in range(1,11): \n    total = total + i\nprint(total)\n곤이의 컴퓨터는 윈도우이며 아니콘다를 이용해 파이썬을 설치하였다고 가정한다. 다음중 옳은 설명을 한 사람을 모두 고르라.\n(곤이) mysum.py를 실행하기 위해서는 anaconda prompt 에서 mysum.py가 위치한 폴더로 이동한 뒤 %run mysum.py 를 실행하면 된다.\n(철용) ipython을 이용하여 실행하기 위해서는 anaconda prompt 에서 mysum.py가 위치한 폴더로 이동한 뒤 %run mysum.py을 실행해도 된다.\n(아귀) 철용의 방법에서 %run mysum.py 대신에 !python mysum.py를 쳐도 동작한다.\n(짝귀) 하지만 다른 가상환경을 만들 경우 철용과 아귀의 방법으로 실행할 수 없다는 단점이 있다."
  }
]