[
  {
    "objectID": "posts/V. Appendix/2022-06-14-final.html",
    "href": "posts/V. Appendix/2022-06-14-final.html",
    "title": "참고자료: 2022-06-final",
    "section": "",
    "text": "오픈 북, 2시간, 문제미리공개"
  },
  {
    "objectID": "posts/V. Appendix/2022-06-14-final.html#imports",
    "href": "posts/V. Appendix/2022-06-14-final.html#imports",
    "title": "참고자료: 2022-06-final",
    "section": "0. imports",
    "text": "0. imports\n아래코드를 이용하여 numpy, matplotlib, pandas를 import하라.\n\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport pandas as pd\nfrom IPython.display import HTML"
  },
  {
    "objectID": "posts/V. Appendix/2022-06-14-final.html#기본문제-50점",
    "href": "posts/V. Appendix/2022-06-14-final.html#기본문제-50점",
    "title": "참고자료: 2022-06-final",
    "section": "1. 기본문제 (50점)",
    "text": "1. 기본문제 (50점)\n(1) 도함수를 구하는 함수 derivate를 선언하라. 이 함수를 이용하여 \\(f(x)=x^2\\)의 그래프와 \\(f'(x)=2x\\)의 그래프를 \\(x \\in (-1,1)\\)의 범위에서 그려라.\n(풀이)\n\ndef f(x): \n    return x**2 \n\n\ndef derivate(f): \n    def df(x): \n        h=0.000000000001\n        return (f(x+h)-f(x))/h \n    return df\n\n\nx = np.linspace(-1,1,100)\nplt.plot(x,f(x))\nplt.plot(x,derivate(f)(x))\n\n\n\n\n(2) 적당한 클래스 정의하여 인스턴스 a를 만들고 print(a)의 출력결과가 본인의 학번이 나오도록 하라.\n(풀이)\n\nclass Klass:\n    def __str__(self):\n        return('2022-43052')\n\n\na=Klass()\nprint(a)\n\n2022-43052\n\n\n(3) for문이 실행될때마다 [묵,찌,빠] 중에 하나를 내며 빠를 누적 3회 낼경우 for문이 멈추는 이터레이터를 생성하라.\n(풀이)\n\nclass Klass: # 찌를 내는순간 for문이 멈추도록 하는 이터레이터를 만들자\n    def __init__(self): \n        self.candidate = [\"묵\",\"찌\",\"빠\"] \n        self.dic = {'묵':0,'찌':0,'빠':0}\n    def __iter__(self):\n        return self \n    def __next__(self):\n        action = np.random.choice(self.candidate)\n        self.dic[action] += 1\n        if self.dic['빠']==3:\n            print(\"빠가 3번 누적되어 for문을 멈춥니다\")\n            raise StopIteration\n        else:\n            return action\n\n\na=Klass()\nfor i in a:\n    print(i)\n\n빠\n묵\n빠\n빠가 3번 누적되어 for문을 멈춥니다\n\n\n(4)-(6)\n\nclass GS25: \n    n=0 \n    total_number_of_guests = 0 \n    def __init__(self):\n        self.number_of_guests = 0 \n\n(4) 위의 클래스를 수정하여 아래와 같이 GS25에서 새로운 인스턴스가 생성될때마다\nGS25의 점포수가 ?개로 늘었습니다.\n라는 메시지가 출력되도록 하라.\n(5) 함수 come를 인스턴스 메소드로 정의하라. 이 메소드가 실행될때마다 각 점포의 손님 인스턴스 변수 number_of_guests와 클래스변수 total_number_of_guests를 1씩 증가시키고 아래의 메시지를 출력하라.\n새로운 손님이 오셨습니다!\nGS25를 방문한 총 손님수는 n명입니다. \n현재 GS25 점포를 방문한 손님수는 m명입니다. \n(6) 새로운 클래스메서드 show를 만들고 아래와 같은 메시지를 출력하도록 하라.\nGS25의 점포수: ??\nGS25를 방문한 총 손님수: ??\n(풀이)\n\nclass GS25: \n    n=0 \n    total_number_of_guests = 0 \n    def __init__(self):\n        self.number_of_guests = 0 \n        GS25.n += 1 \n        print(\"GS25의 점포수가 {}개로 늘었습니다.\".format(GS25.n))\n    def come(self):\n        GS25.total_number_of_guests += 1 \n        self.number_of_guests += 1\n        print(\"새로운 손님이 오셨습니다!\")\n        print(\"GS25를 방문한 총 손님수는 {}명입니다.\".format(GS25.total_number_of_guests))\n        print(\"현재 GS25 점포를 방문한 손님수는 {}명입니다.\".format(self.number_of_guests))\n    @classmethod\n    def show(cls):\n        print(\"GS25의 점포수: {}\".format(cls.n))\n        print(\"GS25를 방문한 총 손님수: {}\".format(cls.total_number_of_guests))\n\n\na=GS25() ## (4)의 사용예시\n\nGS25의 점포수가 1개로 늘었습니다.\n\n\n\nb=GS25() ## (4)의 사용예시\n\nGS25의 점포수가 2개로 늘었습니다.\n\n\n\na.come() ## (5)의 사용예시\n\n새로운 손님이 오셨습니다!\nGS25를 방문한 총 손님수는 1명입니다.\n현재 GS25 점포를 방문한 손님수는 1명입니다.\n\n\n\na.come() ## (5)의 사용예시\n\n새로운 손님이 오셨습니다!\nGS25를 방문한 총 손님수는 2명입니다.\n현재 GS25 점포를 방문한 손님수는 2명입니다.\n\n\n\nb.come() ## (5)의 사용예시\n\n새로운 손님이 오셨습니다!\nGS25를 방문한 총 손님수는 3명입니다.\n현재 GS25 점포를 방문한 손님수는 1명입니다.\n\n\n\nGS25.show() ## (6)의 사용예시\n\nGS25의 점포수: 2\nGS25를 방문한 총 손님수: 3\n\n\n(7) __eq__는 연산 == 를 재정의하는 메소드이다. 클래스 RPS_BASE를 상속하여 새로운 클래스 RPS5를 만들라. 연산 ==를 재정의하여 RPS7의 두 인스턴스의 action이 같은 경우 true를 리턴하는 기능을 구현하라.\n\nclass RPS_BASE:\n    def __init__(self):\n        self.action = np.random.choice(['가위','바위','보'])\n\n(풀이)\n\nclass RPS7(RPS_BASE):\n    def __eq__(self,other):\n        return self.action == other.action \n\n\na=RPS7()\na.action\n\n'바위'\n\n\n\nb=RPS7()\nb.action\n\n'가위'\n\n\n\na==b\n\nFalse\n\n\n(8) __gt__는 연산 > 를 재정의하는 메소드이다. 클래스 RPS_BASE를 상속하여 새로운 클래스 RPS6를 만들라. 연산 >를 재정의하여 RPS6의 두 인스턴스 a,b의 action이 각각 (‘가위’,‘보’), (‘바위’,‘가위’), (‘보’,‘바위’) 인 경우 true를 리턴하는 기능을 구현하라.\n(풀이)\n\nclass RPS8(RPS_BASE):\n    def __gt__(self,other): # 연산 > 를 재정의 \n        pair = self.action, other.action\n        return pair == ('가위','보') or pair == ('바위','가위') or pair == ('보','바위') \n\n\na=RPS8()\na.action\n\n'보'\n\n\n\nb=RPS8()\nb.action\n\n'가위'\n\n\n\na>b, a<b\n\n(False, True)\n\n\n(9)-(10)\n아래와 같은 데이터프레임을 선언하고 물음에 답하라.\n\nnp.random.seed(43052)\ndf=pd.DataFrame({'type':np.random.choice(['A','B'],100), 'score':np.random.randint(40,95,100)})\ndf\n\n\n\n\n\n  \n    \n      \n      type\n      score\n    \n  \n  \n    \n      0\n      B\n      45\n    \n    \n      1\n      A\n      40\n    \n    \n      2\n      B\n      79\n    \n    \n      3\n      B\n      46\n    \n    \n      4\n      B\n      57\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      95\n      B\n      69\n    \n    \n      96\n      A\n      71\n    \n    \n      97\n      A\n      93\n    \n    \n      98\n      A\n      63\n    \n    \n      99\n      A\n      82\n    \n  \n\n100 rows × 2 columns\n\n\n\n(9) type==’A’의 평균score를 구하는 코드를 작성하라.\n(풀이)\n\nm = df.query(\"type=='A'\").score.mean()\nm\n\n68.4\n\n\n(10) type==’A’의 평균score보다 같거나 큰 값을 가지는 행을 출력하라.\n(풀이)\n\n# \n# 아래모두 정답으로 인정 (문제설명이 불충분) \n# df.query(\"type=='A' and score >= @m\") \n# df.query(\"score >= @m\")"
  },
  {
    "objectID": "posts/V. Appendix/2022-06-14-final.html#가위-바위-보-하나빼기-150점",
    "href": "posts/V. Appendix/2022-06-14-final.html#가위-바위-보-하나빼기-150점",
    "title": "참고자료: 2022-06-final",
    "section": "2. 가위, 바위, 보 하나빼기 (150점)",
    "text": "2. 가위, 바위, 보 하나빼기 (150점)\n\nclass RPS:\n    def __init__(self,candidate):\n        self.candidate = candidate\n        self.actions = list() \n        self.rewards = list()\n        self.prob = [0.5,0.5]\n\n    def __eq__(self,other): # 연산 == 를 재정의 \n        return self.actions[-1] == other.actions[-1] \n        #note: 둘의 액션이 같으면 무승부 \n    \n    def __gt__(self,other): # 연산 > 를 재정의 \n        pair = self.actions[-1], other.actions[-1]\n        return pair == ('가위','보') or pair == ('바위','가위') or pair == ('보','바위') \n        #note: 가위>보, 바위>가위, 보>가위 \n    \n    def __mul__(self,other):\n        # step1: 각자의 패를 선택 \n        self.choose()\n        other.choose()\n        \n        # step2: 승패 판단 + upate reward\n        if self == other: # 무승부일경우 \n            self.rewards.append(1)\n            other.rewards.append(1)\n        elif self > other: # self의 승리 \n            self.rewards.append(2)\n            other.rewards.append(0)\n        else: # other의 승리 \n            self.rewards.append(0)\n            other.rewards.append(2)\n        \n        # step3: update data\n        self.update_data()\n        other.update_data()\n    \n    def update_data(self):\n        self.data = pd.DataFrame({'actions':self.actions, 'rewards':self.rewards})\n    \n    def _repr_html_(self):\n        html_str = \"\"\"\n        낼 수 있는 패: {} <br/> \n        데이터: <br/>\n        {}\n        \"\"\"        \n        return html_str.format(self.candidate,self.data._repr_html_())\n    \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate,p=self.prob))\n\n(1) 플레이어A는 (가위,가위) 중 하나를 선택할 수 있고 플레이어B는 (가위,바위) 중 하나를 선택할 수 있다. 각 플레이어는 각 패 중 하나를 랜덤으로 선택하는 액션을 한다고 가정하자. 아래에 해당하는 확률을 시뮬레이션을 이용하여 추정하라.\n\n플레이어A가 승리할 확률:\n플레이어B가 승리할 확률:\n플레이어A와 플레이어B가 비길 확률:\n\nhint: 50% 확률로 b가 승리하고 50% 확률로 비긴다.\n(풀이)\n\nPlayerA = RPS(['가위','가위']) \nPlayerB = RPS(['가위','바위']) \n\nfor _ in range(100):\n    PlayerA * PlayerB\n\n\nprint('플레이어A가 승리할 확률: {}'.format(sum(PlayerA.data.rewards==2)/100))\nprint('플레이어B가 승리할 확률: {}'.format(sum(PlayerA.data.rewards==0)/100))\nprint('플레이어A와 플레이어B가 비길 확률: {}'.format(sum(PlayerA.data.rewards==1)/100))\n\n플레이어A가 승리할 확률: 0.0\n플레이어B가 승리할 확률: 0.57\n플레이어A와 플레이어B가 비길 확률: 0.43\n\n\n(2) 문제 (1)과 같이 아래의 상황을 가정하자.\n\n\n\n\n플레이어A\n플레이어B\n\n\n\n\n각 플레이어가 낼 수 있는 패 (candidate)\n(가위,가위)\n(가위,바위)\n\n\n각 패를 선택할 확률 (prob)\n(0.5,0.5)\n(0.5,0.5)\n\n\n\n각 플레이어는 아래와 같은 규칙으로 가위바위보 결과에 따른 보상점수를 적립한다고 하자. - 승리: 보상점수 2점 적립 - 무승부: 보상점수 1점 적립 - 패배: 보상점수 0점 적립\n100번째 대결까지 시뮬레이션을 시행하고 플레이어B가 가위를 낼 경우 얻은 보상점수의 총합과 바위를 낼 경우 얻은 보상점수의 총합을 각각 구하라. 플레이어B는 가위를 내는것이 유리한가? 바위를 내는것이 유리한가?\nhint: 플레이어B는 바위를 내는 것이 유리하다.\nhint: 플레이어B가 100번중에 49번 가위를 내고 51번 바위를 낸다면 플레이어B가 적립할 보상점수는 각각 아래와 같다. - 가위를 내었을 경우: 49 * 1 = 49점 - 바위를 내었을 경우: 51 * 2 = 102점 - 총 보상점수 = 49점 + 102점 = 151점\n(풀이)\n\nprint('플레이어B가 가위를 낼 경우 얻은 보상점수의 총합: {}'.format(PlayerB.data.query(\" actions=='가위'\").rewards.sum()))\nprint('플레이어B가 바위를 낼 경우 얻은 보상점수의 총합: {}'.format(PlayerB.data.query(\" actions=='바위'\").rewards.sum()))\n\n플레이어B가 가위를 낼 경우 얻은 보상점수의 총합: 43\n플레이어B가 바위를 낼 경우 얻은 보상점수의 총합: 114\n\n\n(3) (2)에서 얻은 데이터를 학습하여 플레이어B가 “가위” 혹은 “바위” 를 선택할 확률을 매시점 조금씩 조정한다고 가정하자. 구체적으로는 현재시점까지 얻은 보상점수의 비율로 확률을 결정한다. 예를들어 플레이어B가 100회의 대결동안 누적한 보상점수의 총합이 아래와 같다고 하자.\n\n가위를 내었을 경우 보상점수 총합 = 50점\n바위를 내었을 경우 보상점수 총합 = 100점\n\n그렇다면 플레이어B는 각각 (50/150,100/150) 의 확률로 (가위,바위) 중 하나를 선택한다. 101번째 대결에 플레이어B가 가위를 내서 비겼다면 이후에는 (51/151,100/151) 의 확률로 (가위,바위) 중 하나를 선택한다. 102번째 대결에 플레이어B가 바위를 내서 이겼다면 이후에는 각각 (51/153,102/153) 의 확률로 (가위,바위) 중 하나를 선택한다. 이러한 상황을 요약하여 표로 정리하면 아래와 같다.\n\n\n\n\n\n\n\n\n\n시점\n플레이어B가 가위를 냈을 경우 얻은 점수 총합\n플레이어B가 바위를 냈을 경우 얻은 점수 총합\nt+1시점에서 플레이어B가 (가위,바위)를 낼 확률\n\n\n\n\nt=100\n50\n100\n(50/150, 100/150)\n\n\nt=101\n51\n100\n(51/151, 100/151)\n\n\nt=102\n51\n102\n(51/153, 102/153)\n\n\n\n이러한 방식으로 500회까지 게임을 진행하며 확률을 수정하였을 경우 501번째 대결에서 플레이어B가 (가위,바위)를 낼 확률은 각각 얼마인가?\nhint: 시간이 지날수록 플레이어B는 (가위,바위)중 바위를 내는 쪽이 유리하다는 것을 알게 될 것이다.\n(풀이)\n\nclass RPS2(RPS):\n    def __init__(self,candidate):\n        # 기존내용\n        self.candidate = candidate\n        self.actions = list() \n        self.rewards = list()\n        self.prob = [0.5,0.5]\n        # 새롭게 정의하는 내용 \n        self.data = dict()\n        self.trainable=False # 학습모드 설정 \n        \n    def update_data(self):\n        a = self.actions[-1]\n        r = self.rewards[-1] \n        self.data[a] = self.data.get(a,0)+r \n        \n    def _repr_html_(self):\n        html_str = \"\"\"\n        낼 수 있는 패: {} <br/> \n        확률: {} <br/>\n        데이터: {} \n        \"\"\"        \n        return html_str.format(self.candidate,self.prob,self.data)\n    \n    def choose(self):\n        if self.trainable:  # if self.trainalbe==True: \n            a1 = self.candidate[0] # action1 \n            a2 = self.candidate[1] # action2 \n            r1 = self.data[a1] # reward from action1 \n            r2 = self.data[a2] # reward from action2 \n            self.prob = [r1/(r1+r2), r2/(r1+r2)] \n        self.actions.append(np.random.choice(self.candidate,p=self.prob))\n\n\nPlayerA=RPS2(['가위','가위'])\nPlayerB=RPS2(['가위','바위'])\n\n\n#\n# 1~100 \nPlayerA.trainable=False \nPlayerB.trainable=False \nfor _ in range(100):\n    PlayerA * PlayerB \n# 100~500     \nPlayerA.trainable=False \nPlayerB.trainable=True\nfor _ in range(400):\n    PlayerA * PlayerB \n\n\nPlayerB\n\n\n        낼 수 있는 패: ['가위', '바위']  \n        확률: [0.1923536439665472, 0.8076463560334528] \n        데이터: {'바위': 678, '가위': 161} \n        \n\n\n\n앞으로 아래와 같은 용어를 사용한다.\n\n(정의) 어떠한 플레이어가 양손 중 하나를 선택하는 확률을 데이터를 바탕으로 매 순간 업데이트 한다면 그 플레이어는 “학습모드 상태이다”고 표현한다.\n(정의) 반대로 어떠한 플레이어가 양손 중 하나를 항상 동일한 확률로 낸다면 그 플레이어는 “학습모드 상태가 아니다”라고 표현한다.\n\n\n(4) 새로운 두명의 플레이어C와 플레이어D를 만들어라. 두 플레이어는 모두 동일하게 (가위,바위) 중 하나를 선택할 수 있다. 두 명의 플레이어는 100번째 대결까지는 두 가지 패중 하나를 랜덤하게 선택하고 101번째 대결부터 500번째 대결까지는 문제(3)의 플레이어B와 같은 방식으로 확률을 업데이트 하여 두 가지 패를 서로 다른 확률로 낸다고 하자. 즉 100번째 대결까지는 두 플레이어가 모두 학습모드 상태가 아니고 101번째부터 500번째 대결까지는 두 플레이어가 모두 학습모드 상태이다. 500번째 대결까지의 학습이 끝났을 경우 플레이어 C와 플레이어D가 각 패를 낼 확률은 각각 얼마인가?\n\n\n\n\n\n\n\n\n\n시점\n플레이어C가 (가위,바위)를 낼 확률\n플레이어D가 (가위,바위)를 낼 확률\n비고\n\n\n\n\nt <= 100\n(1/2, 1/2)\n(1/2, 1/2)\n양쪽 플레이어 모두 학습모드가 아님\n\n\nt <= 500\n대결 데이터를 학습하여 수정한 확률\n대결 데이터를 학습하여 수정한 확률\n양쪽 플레이어 모두 학습모드임\n\n\n\nhint: 시간이 지날수록 두 플레이어 모두 바위를 내는 쪽이 유리하다는 것을 알게 될 것이다.\n(풀이)\n\nPlayerC=RPS2(['가위','바위'])\nPlayerD=RPS2(['가위','바위'])\n\n\n#\n# 1~100 \nPlayerC.trainable=False \nPlayerD.trainable=False \nfor _ in range(100):\n    PlayerC * PlayerD\n# 100~500     \nPlayerC.trainable=True\nPlayerD.trainable=True\nfor _ in range(400):\n    PlayerC * PlayerD \n\n\nPlayerC\n\n\n        낼 수 있는 패: ['가위', '바위']  \n        확률: [0.07692307692307693, 0.9230769230769231] \n        데이터: {'바위': 469, '가위': 39} \n        \n\n\n\nPlayerD\n\n\n        낼 수 있는 패: ['가위', '바위']  \n        확률: [0.07942973523421588, 0.9205702647657841] \n        데이터: {'바위': 453, '가위': 39} \n        \n\n\n\nC,D 모두 바위를 내는게 유리하다는걸 학습함\n\n(5) 새로운 플레이어 E와 F를 생각하자. 플레이어E와 플레이어F는 각각 (가위,바위) 그리고 (가위,보) 중 하나를 선택할 수 있다고 가정하자. 시뮬레이션 대결결과를 이용하여 아래의 확률을 근사적으로 추정하라.\n\n플레이어E가 승리할 확률:\n플레이어F가 승리할 확률:\n플레이어E와 플레이어F가 비길 확률:\n\nhint: 플레이어E가 가위를 낸다면 최소한 지지는 않기 때문에 플레이어E가 좀 더 유리한 패를 가지고 있다. 따라서 플레이어E의 결과가 더 좋을 것이다.\n(풀이)\n\nPlayerE=RPS(['가위','바위'])\nPlayerF=RPS(['가위','보']) \n\nfor _ in range(100):\n    PlayerE * PlayerF\n\nprint('플레이어E가 승리할 확률: {}'.format(sum(PlayerE.data.rewards==2)/100))\nprint('플레이어F가 승리할 확률: {}'.format(sum(PlayerE.data.rewards==0)/100))\nprint('플레이어E와 플레이어F가 비길 확률: {}'.format(sum(PlayerE.data.rewards==1)/100))\n\n플레이어E가 승리할 확률: 0.47\n플레이어F가 승리할 확률: 0.36\n플레이어E와 플레이어F가 비길 확률: 0.17\n\n\n\n두 플레이어 E,F가 모두 랜덤으로 낸다면 (바보처럼 낸다면) 플레이어 E가 더 유리하다.\n\n(6) (5)와 동일한 두 명의 플레이어E, F를 생각하자. 두 플레이어는 100회까지는 랜덤으로 자신의 패를 선택한다. 그리고 101회부터 500회까지는 플레이어F만 데이터로 부터 학습을 하여 수정된 확률을 사용한다. 500번의 대결이 끝나고 플레이어F가 (가위,보)를 선택하는 확률이 어떻게 업데이트 되어있는가?\n\n\n\n\n\n\n\n\n\n시점\n플레이어E가 (가위,바위)를 낼 확률\n플레이어F가 (가위,보)를 낼 확률\n비고\n\n\n\n\nt <= 100\n(1/2, 1/2)\n(1/2, 1/2)\n양쪽 플레이어 모두 학습모드가 아님\n\n\nt <= 500\n(1/2, 1/2)\n데이터를 학습하여 수정한 확률\n플레이어E는 학습모드아님 / 플레이어F는 학습모드\n\n\n\nhint: 플레이어F는 보를 내는 것이 낫다고 생각할 것이다. (가위를 내면 지거나 비기지만 보를 내면 지거나 이긴다.)\n(풀이)\n\nPlayerE=RPS2(['가위','바위'])\nPlayerF=RPS2(['가위','보'])\n\n\n#\n# 1~100 \nPlayerE.trainable=False \nPlayerF.trainable=False \nfor _ in range(100):\n    PlayerE * PlayerF\n# 100~500     \nPlayerE.trainable=False\nPlayerF.trainable=True\nfor _ in range(400):\n    PlayerE * PlayerF\n\n\nPlayerE\n\n\n        낼 수 있는 패: ['가위', '바위']  \n        확률: [0.5, 0.5] \n        데이터: {'바위': 112, '가위': 441} \n        \n\n\n\nPlayerF\n\n\n        낼 수 있는 패: ['가위', '보']  \n        확률: [0.10067114093959731, 0.8993288590604027] \n        데이터: {'보': 402, '가위': 45} \n        \n\n\n\n플레이어F는 보를 내는게 더 유리하다는 것을 학습을 통하여 깨닫는다.\n\n(7) (6)번의 플레이어E와 플레이어F가 500회~1000회까지 추가로 게임을 한다. 이번에는 플레이어E만 데이터로부터 학습한다. 1000회까지 대결을 끝낸 이후 플레이어E가 (가위,바위)를 내는 확률은 어떻게 업데이트 되었는가?\n\n\n\n\n\n\n\n\n\n시점\n플레이어E가 (가위,바위)를 낼 확률\n플레이어F가 (가위,보)를 낼 확률\n비고\n\n\n\n\nt <= 100\n(1/2, 1/2)\n(1/2, 1/2)\n양쪽 플레이어 모두 학습모드가 아님\n\n\nt <= 500\n(1/2, 1/2)\n데이터를 학습하여 수정한 확률\n플레이어E는 학습모드아님 / 플레이어F는 학습모드\n\n\nt <= 1000\n데이터를 학습하여 수정한 확률\nt=500시점에 업데이트된 확률\n플레이어E는 학습모드 / 플레이어F는 학습모드아님\n\n\n\nhint: 플레이어F는 보를 내도록 학습되어 있다. 따라서 플레이어E가 바위를 내면 지고 가위를 내면 이길것이다. 따라서 플레이어E는 가위가 유리하다고 생각할 것이다.\n(풀이)\n\n# \n# 500~1000     \nPlayerE.trainable=True\nPlayerF.trainable=False\nfor _ in range(500):\n    PlayerE * PlayerF\n\n\nPlayerE\n\n\n        낼 수 있는 패: ['가위', '바위']  \n        확률: [0.902158273381295, 0.09784172661870504] \n        데이터: {'바위': 136, '가위': 1256} \n        \n\n\n\nPlayerF\n\n\n        낼 수 있는 패: ['가위', '보']  \n        확률: [0.10067114093959731, 0.8993288590604027] \n        데이터: {'보': 528, '가위': 80} \n        \n\n\n\n플레이어E는 가위를 내는게 유리하다는걸 깨닫는다. (플레이어F는 지금 보만 내고 있으니까!)\n\n(8) (7)번의 플레이어E와 플레이어F가 1000회~30000회까지 추가로 게임을 한다. 이번에는 플레이어F만 데이터로부터 학습한다. 30000회까지 대결을 끝낸 이후 플레이어F가 (가위,보)를 내는 확률은 어떻게 업데이트 되었는가?\n\n\n\n\n\n\n\n\n\n시점\n플레이어E가 (가위,바위)를 낼 확률\n플레이어F가 (가위,보)를 낼 확률\n비고\n\n\n\n\nt <= 100\n(1/2, 1/2)\n(1/2, 1/2)\n양쪽 플레이어 모두 학습모드가 아님\n\n\nt <= 500\n(1/2, 1/2)\n데이터를 학습하여 수정한 확률\n플레이어E는 학습모드아님 / 플레이어F는 학습모드\n\n\nt <= 1000\n데이터를 학습하여 수정한 확률\nt=500시점에 업데이트된 확률\n플레이어E는 학습모드 / 플레이어F는 학습모드아님\n\n\nt <= 30000\nt=1000시점에 업데이트된 확률\n데이터를 학습하여 수정한 확률\n플레이어E는 학습모드아님 / 플레이어F는 학습모드\n\n\n\nhint: 플레이어F는 원래 보가 유리하다고 생각하여 보를 자주 내도록 학습되었다. 하지만 플레이어E가 그러한 플레이어F의 성향을 파악하고 가위를 주로 내도록 학습하였다. 플레이어F는 그러한 플레이어E의 성향을 다시 파악하여 이번에는 가위을 자주 내는 것이 유리하다고 생각할 것이다.\n(풀이)\n\n# \n# 1000~30000 \nPlayerE.trainable=False\nPlayerF.trainable=True\nfor _ in range(29000):\n    PlayerE * PlayerF\n\n\nPlayerE\n\n\n        낼 수 있는 패: ['가위', '바위']  \n        확률: [0.902158273381295, 0.09784172661870504] \n        데이터: {'바위': 4468, '가위': 33162} \n        \n\n\n\nPlayerF\n\n\n        낼 수 있는 패: ['가위', '보']  \n        확률: [0.9214985023917028, 0.0785014976082972] \n        데이터: {'보': 1756, '가위': 20614} \n        \n\n\n\n플레이어 E가 가위만 내고 있으므로 플레이어 F는 지지 않기 위해서 가위를 내도록 학습한다.\n\n(9) 플레이어E와 플레이어F의 대결기록을 초기화 한다. 이번에는 플레이어F가 항상 (3/4)의 확률로 가위를 (1/4)의 확률로 보를 낸다고 가정한다. 플레이어E는 100번의 대결까지는 랜덤으로 (가위,바위)중 하나를 내고 101번째 대결부터 1000번째 대결까지는 대결 데이터를 학습하여 수정한 확률을 사용한다고 하자. 1000번째 대결이후에 플레이어E가 (가위,바위)를 내는 확률이 어떻게 업데이트 되어있는가?\n\n\n\n\n\n\n\n\n\n시점\n플레이어E가 (가위,바위)를 낼 확률\n플레이어F가 (가위,보)를 낼 확률\n비고\n\n\n\n\nt <= 100\n(1/2, 1/2)\n(3/4, 1/4)\n양쪽 플레이어 모두 학습모드가 아님\n\n\nt <= 1000\n데이터를 학습하여 수정한 확률\n(3/4, 1/4)\n플레이어E는 학습모드 / 플레이어F는 학습모드 아님\n\n\n\n(풀이)\n\nPlayerE=RPS2(['가위','바위'])\nPlayerF=RPS2(['가위','보'])\n\n\n#\n# 1~100 \nPlayerE.trainable=False \nPlayerF.trainable=False \nPlayerF.prob=[3/4,1/4]\nfor _ in range(100):\n    PlayerE * PlayerF\n# 100~1000     \nPlayerE.trainable=True\nPlayerF.trainable=False\nfor _ in range(900):\n    PlayerE * PlayerF\n\n\nPlayerE\n\n\n        낼 수 있는 패: ['가위', '바위']  \n        확률: [0.363831308077198, 0.636168691922802] \n        데이터: {'바위': 892, '가위': 509} \n        \n\n\n\n플레이어 E는 바위를 내는것이 좀 더 유리하다고 생각한다.\n\n(추가풀이)\n\n# 계속시행한다면?\nPlayerE.trainable=True\nPlayerF.trainable=False\nfor _ in range(10000*100):\n    PlayerE * PlayerF\n\n\nPlayerE\n\n\n        낼 수 있는 패: ['가위', '바위']  \n        확률: [0.1438411969483742, 0.8561588030516258] \n        데이터: {'바위': 1248374, '가위': 209736} \n        \n\n\n\nE가 가위를 냈을경우 보상의 기대값은 \\(1\\times 3/4 + 2 \\times 1/4 = 5/4\\) 이고 바위를 냈을경우 보상의 기대값은 \\(2\\times 3/4 + 0 \\times 1/4 = 6/4\\) 이므로 바위가 더 유리하다. 따라서 점점 바위를 내도록 학습한다.\n\n(10) 플레이어E와 플레이어F의 대결기록을 초기화 한다. 이번에는 플레이어F가 항상 (2/3)의 확률로 가위를 (1/3)의 확률로 보를 낸다고 가정한다. 플레이어E는 100번의 대결까지는 랜덤으로 (가위,바위)중 하나를 내고 101번째 대결부터 1000번째 대결까지는 대결 데이터를 학습하여 수정한 확률을 사용한다고 하자. 1000번째 대결이후에 플레이어E가 (가위,바위)를 내는 확률이 어떻게 업데이트 되어있는가?\n\n\n\n\n\n\n\n\n\n시점\n플레이어E가 (가위,바위)를 낼 확률\n플레이어F가 (가위,보)를 낼 확률\n비고\n\n\n\n\nt <= 100\n(1/2, 1/2)\n(2/3, 1/3)\n양쪽 플레이어 모두 학습모드가 아님\n\n\nt <= 1000\n데이터를 학습하여 수정한 확률\n(2/3, 1/3)\n플레이어E는 학습모드 / 플레이어F는 학습모드 아님\n\n\n\n(풀이)\n\nPlayerE=RPS2(['가위','바위'])\nPlayerF=RPS2(['가위','보'])\n\n\n#\n# 1~100 \nPlayerE.trainable=False \nPlayerF.trainable=False \nPlayerF.prob=[2/3,1/3]\nfor _ in range(100):\n    PlayerE * PlayerF\n# 100~1000     \nPlayerE.trainable=True\nPlayerF.trainable=False\nfor _ in range(900):\n    PlayerE * PlayerF\n\n\nPlayerE\n\n\n        낼 수 있는 패: ['가위', '바위']  \n        확률: [0.5139500734214391, 0.48604992657856094] \n        데이터: {'바위': 664, '가위': 700} \n        \n\n\n\nPlayerF\n\n\n        낼 수 있는 패: ['가위', '보']  \n        확률: [0.6666666666666666, 0.3333333333333333] \n        데이터: {'가위': 344, '보': 292} \n        \n\n\n\nE가 가위를 냈을경우 보상의 기대값은 \\(1\\times 2/3 + 2 \\times 1/3 = 4/3\\) 이고 바위를 냈을 경우 보상의 기대값은 \\(2\\times 2/3 + 0 \\times 1/3 = 4/3\\) 이므로 가위도 바위도 유리하지 않다. 따라서 가위와 바위를 어떠한 확률로 내든 상관없다.\n\n문제2의 추가해설\n(프로그래밍 팁)\n기본적인 구현기능인 RPS클래스를 상속을 이용하여 적절하게 modify하면 문제를 쉽게 풀 수 있습니다. 문항에 따라서 어떤것은 기본 RPS클래스를 쓰는것이 유리하고 어떠한 것은 새로운 클래스를 정의하는 것이 유리할 수 있습니다. 예를들어 2-(1),(2),(5)는 RPS클래스를 그대로 쓰는 것이 유리했으며 나머지는 새로운 클래스인 RPS2를 사용하는것이 문제풀이에 유리했습니다.\n(계산팁)\n추가확률을 계산할 경우 pandas의 dataframe을 이용하는 것보다 RPS2에서 제가 구현한 것 처럼 dict와 같은 내장자료형을 이용하는 것이 훨씬 연산속도가 빠릅니다. 가령 8번문제의 경우 알고리즘에 따라서 연산시간이 오래걸릴 수도 있는데 제가 짠 코드를 기반으로 코랩에서 돌리면 2.4116초 정도로 결과를 얻을 수 있습니다. 연산속도의 차이가 나는 이유는 (1) 기본적으로 판다스는 느리며 (2) RPS의 data에는 모든 자료를 저장는데 RPS2의 data는 각 패를 내었을 경우 보상의 누적만 저장하기 때문입니다. 최근 데이터량의 증가로 인하여 알고리즘의 효율성을 생각해야할 때도 있는데요, 본인이 구현한 코드와 정답코드를 비교해가며 계산시간을 테스트해보는것도 좋은 경험일 것 같습니다. 계산시간을 측정하는 것은 4월18일 강의노트에 사용한 방법을 참고하시면 됩니다.\n(약간의 개념해설)\n이 문제는 제로섬게임의 확장입니다. (양쪽 플레이어의 보상합이 일정하므로 이러한 게임을 constantsum 이라고 부릅니다) 어떤 분은 이 문제를 보고 게임이론을 떠올릴 수 있고 어떤 분은 강화학습을 떠올렸을 것 같습니다.\n문제의 포인트는 상대방의 전략에 따라서 나의 최적전략이 끝없이 달라진다는 점입니다. 문항 (5)-(10)까지의 문제는 이러한 상황을 묘사합니다. 직관적으로는 더 좋은패를 가지고 있는 플레이어E가 유리할 듯 하지만 결국 상대의 패를 보고 전략을 끝없이 수정하면 어떠한 하나의 action도 최적이 될 수 없습니다. 이 문제의 경우 문항 (8)의 시점에서는 둘 다 가위를 내도록 업데이트 되었는데 이를 이용하여 플레이어E가 다시 바위를 낼 수 있고 그 심리를 역이용하여 플레이어F가 다시 보를 낼 수 있고 그 심리를 다시 역이용하여 플레이어E가 다시 가위를 내며 그 심리를 역이용하여 플레이어F는 다시 가위를 낼 수 있어 무한반복이 됩니다. (상대도 바보가 아니거든요.)\n하지만 두 가지 액션을 확률로 선택한다면 문항 (10)의 상황과 같이 상대방이 어떠한 선택을 하더라도 유리한 선택이 존재하지 않는 어떠한 균형점이 존재할 수 있는데 이를 내쉬의 균형이라 합니다. 내쉬의 균형에 따르면 플레이어E는 가위와 바위를 2:1의 비율로 플레이어F는 가위와 보를 2:1로 낼때 서로가 서로의 전략을 바꾸지 않는 균형상태에 도달합니다. 이러한 게임의 셋팅에 대하여 좀 더 관심 있으신 분은 게임이론을 참고하셔서 공부해보시기 바랍니다. (저도 기본적인 내용밖에 모르지만 흥미있는 분야입니다)\n만약 주어진 게임환경에서 플레이어E,F가 (에이전트라고 부릅니다) 전략을 학습하는 과정이 흥미롭게 느껴졌다면 강화학습을 한번 참고해보시기 바랍니다. 강화학습은 알파고를 학습시킨것으로 유명한 알고리즘입니다. 아래영상은 컴퓨터플레이어가 벽돌깨기 게임을 하며 데이터를 쌓고 데이터로 부터 적절한 action을 학습하는 과정을 묘사한 영상입니다.\n\nhttps://www.youtube.com/watch?v=TmPfTpjtdgg\n\n여러분들이 기말고사에서 간단히 만들어본 알고리즘의 발전형입니다. 강화학습에 흥미가 있으시면 방학동안에 공부해보시길 바랍니다. (궁금한 점은 제 메일로 질문하셔도 됩니다, 제가 게임이론은 전공이 아니지만 강화학습은 약간 할줄 알거든요 ㅎㅎ)\n\nAppendix\n- 아래의 클래스를 참고하여 문제1,2을 풀어라. (5월25일 강의노트에 소개된 클래스를 약간 정리한 것)\n\n참고하지 않아도 감점은 없음\n\n\nclass RPS:\n    def __init__(self,candidate):\n        self.candidate = candidate\n        self.actions = list() \n        self.rewards = list()\n        self.prob = [0.5,0.5]\n\n    def __eq__(self,other): # 연산 == 를 재정의 \n        return self.actions[-1] == other.actions[-1] \n        #note: 둘의 액션이 같으면 무승부 \n    \n    def __gt__(self,other): # 연산 > 를 재정의 \n        pair = self.actions[-1], other.actions[-1]\n        return pair == ('가위','보') or pair == ('바위','가위') or pair == ('보','바위') \n        #note: 가위>보, 바위>가위, 보>가위 \n    \n    def __mul__(self,other):\n        # step1: 각자의 패를 선택 \n        self.choose()\n        other.choose()\n        \n        # step2: 승패 판단 + upate reward\n        if self == other: # 무승부일경우 \n            self.rewards.append(1)\n            other.rewards.append(1)\n        elif self > other: # self의 승리 \n            self.rewards.append(2)\n            other.rewards.append(0)\n        else: # other의 승리 \n            self.rewards.append(0)\n            other.rewards.append(2)\n        \n        # step3: update data\n        self.update_data()\n        other.update_data()\n    \n    def update_data(self):\n        self.data = pd.DataFrame({'actions':self.actions, 'rewards':self.rewards})\n    \n    def _repr_html_(self):\n        html_str = \"\"\"\n        낼 수 있는 패: {} <br/> \n        데이터: <br/>\n        {}\n        \"\"\"        \n        return html_str.format(self.candidate,self.data._repr_html_())\n    \n    def choose(self):\n        self.actions.append(np.random.choice(self.candidate,p=self.prob))\n\n- 사용예시\n\na=RPS(['가위','가위'])\nb=RPS(['가위','보'])\n\n\nfor i in range(5):\n    a*b\n\n\na\n\n\n\n        낼 수 있는 패: ['가위', '가위']  \n        데이터: \n        \n\n\n  \n    \n      \n      actions\n      rewards\n    \n  \n  \n    \n      0\n      가위\n      2\n    \n    \n      1\n      가위\n      2\n    \n    \n      2\n      가위\n      1\n    \n    \n      3\n      가위\n      2\n    \n    \n      4\n      가위\n      2\n    \n  \n\n\n        \n\n\n\nb\n\n\n\n        낼 수 있는 패: ['가위', '보']  \n        데이터: \n        \n\n\n  \n    \n      \n      actions\n      rewards\n    \n  \n  \n    \n      0\n      보\n      0\n    \n    \n      1\n      보\n      0\n    \n    \n      2\n      가위\n      1\n    \n    \n      3\n      보\n      0\n    \n    \n      4\n      보\n      0"
  },
  {
    "objectID": "posts/V. Appendix/2021-06-09-final.html",
    "href": "posts/V. Appendix/2021-06-09-final.html",
    "title": "참고자료: 2021-06-final",
    "section": "",
    "text": "오픈 북, 2시간, 문제미리공개\n\n\n2021년 파이썬입문 기말고사 (풀이포함)\n\n# 1. (20점)\nN사에서 게임유저들에게 여름방학 기념이벤트로 진명왕의 집판검이라는 이름의 아이템을 선물했다고 하자. 진명왕의 집판검은 총 5회에 걸쳐서 강화(upgrade)될 수 있데 강화의 성공확률은 10%라고 하자. 강화가 5번성공하면 더 이상 강화가 진행되지 않는다고 하자. (따라서 더 이상 강화시도를 하지 않아도 무방하다) 아래는 이 아이템에 강화를 진행하였을때 각 강화상태를 설명한 예시이다.\n\n\n\n시도횟수\n강화성공여부\n강화상태\n비고\n\n\n\n\n1\n강화실패\n+0 \\(\\to\\) +0\n강화실패로 인하여 강화상태 변화없음\n\n\n2\n강화성공\n+0 \\(\\to\\) +1\n강화성공으로 인한 강화상태 변화\n\n\n3\n강화실패\n+1 \\(\\to\\) +1\n강화실패로 인하여 강화상태 변화없음\n\n\n4\n강화성공\n+1 \\(\\to\\) +2\n강화성공으로 인한 강화상태 변화\n\n\n5\n강화성공\n+2 \\(\\to\\) +3\n강화성공으로 인한 강화상태 변화\n\n\n6\n강화성공\n+3 \\(\\to\\) +4\n강화성공으로 인한 강화상태 변화\n\n\n7\n강화실패\n+4 \\(\\to\\) +4\n강화실패로 인하여 강화상태 변화없음\n\n\n8\n강화성공\n+4 \\(\\to\\) +5\n모든 강화 성공\n\n\n9\n-\n+5 \\(\\to\\) +5\n더 이상 강화시도 하지 않음\n\n\n10\n\\(\\dots\\)\n\\(\\dots\\)\n\\(\\dots\\)\n\n\n\n강화는 하루에 한 번씩만 시도할 수 있으며 시도가능한 기간은 7월1일부터 8월31일까지로 한정되어 있다고 하자. 따라서 방학동안 유저들은 총 62번 시도를 할 수 있다. 방학이 끝난이후 100명 유저중 대략 몇명정도 +5 강화상태에 있겠는가? 파이썬을 통한 시뮬레이션을 활용하여 추론하라. (단, +5강화에 성공하지 못한 모든 유저는 반드시 하루에 한번 강화를 시도해야 한다고 가정하자.)\n(풀이1)\n\nimport numpy as np\nnp.random.seed(1)\nsum(np.random.binomial(n=62, p=0.1, size=10000)>=5)/10000\n\n0.7514\n\n\n(풀이2)\n\nclass ExecutionSword():\n    def __init__(self,prob):\n        self.nuser=100000\n        self.prob=prob\n        self.attemptresult=None\n        self.upgradestate=pd.DataFrame({'day0':[0]*self.nuser})\n        self.failstate=pd.DataFrame({'day0':[0]*self.nuser})\n        self.ratio=0\n        self.day=0\n    def addday(self):\n        self.day=self.day+1            \n    def attempt(self):\n        self.attemptresult = np.random.binomial(n=1, p=self.prob, size=self.nuser)\n    def update(self):\n        # 강화상태 업데이트\n        self.upgradestate['day%s' % self.day] = np.minimum(5,self.upgradestate['day%s' % (self.day-1)]+self.attemptresult)\n        # 강화실패누적횟수 업데이트 \n        self.failstate['day%s' % self.day]=self.failstate['day%s' % (self.day-1)]+(self.attemptresult==0)*1\n        # 강화상태==5 or 강화상태==0 일 경우 강화실패누적횟수 초기화 \n        self.failstate['day%s' % self.day][self.upgradestate['day%s' % self.day]== 0]=0\n        self.failstate['day%s' % self.day][self.upgradestate['day%s' % self.day]== 5]=0\n    def reset(self):\n        # 실패횟수 = 2 인것을 찾아 index_ 에 저장 -> index_ 에 해당하는 유저의 강화횟수와 실패횟수를 모두 0으로 초기화 \n        index_= self.failstate['day%s' % self.day]==2\n        self.failstate['day%s' % self.day][index_] = 0\n        self.upgradestate['day%s' % self.day][index_] = 0\n    def arrangeprob(self):\n        self.ratio=sum(self.upgradestate['day%s' % self.day]==5) / self.nuser\n        if self.ratio > 0.5:\n            self.prob = 0.9\n\n\n# 1 \nimport pandas as pd\ns1=ExecutionSword(0.1)\nfor i in range(62):\n    s1.addday()\n    s1.attempt()\n    s1.update()\n\n\nsum(s1.upgradestate.day62==5)/s1.nuser\n\n0.75551\n\n\n\n\n# 2. (70점)\n강화성공확률을 40%로 수정한다. 강화에 누적2회 실패하면 강화상태가 초기화 된다고 하자. (따라서 강화실패 누적횟수를 카운트하는 변수가 필요하다) 단, 강화실패 누적횟수는 누적2회 달성시 0으로 초기화 된다. 또한 강화상태가 +0인 경우는 실패하여도 강화실패 누적횟수가 추가되지 않는다.\n\n\n\n시도횟수\n강화성공여부\n강화상태\n강화실패누적\n비고\n\n\n\n\n1\n강화성공\n+0 \\(\\to\\) +1\n0 \\(\\to\\) 0\n-\n\n\n2\n강화성공\n+1 \\(\\to\\) +2\n0 \\(\\to\\) 0\n-\n\n\n3\n강화실패\n+2 \\(\\to\\) +2\n0 \\(\\to\\) 1\n-\n\n\n4\n강화성공\n+2 \\(\\to\\) +3\n1 \\(\\to\\) 1\n-\n\n\n5\n강화실패\n+3 \\(\\to\\) +0\n1 \\(\\to\\) 0\n강화실패로 누적2회로 인한 초기화\n\n\n6\n강화실패\n+0 \\(\\to\\) +0\n0 \\(\\to\\) 0\n강화실패 누적횟수 증가하지 않음\n\n\n7\n강화성공\n+0 \\(\\to\\) +1\n0 \\(\\to\\) 0\n-\n\n\n8\n강화성공\n+1 \\(\\to\\) +2\n0 \\(\\to\\) 0\n-\n\n\n9\n강화성공\n+2 \\(\\to\\) +3\n0 \\(\\to\\) 0\n-\n\n\n10\n강화성공\n+3 \\(\\to\\) +4\n0 \\(\\to\\) 0\n-\n\n\n11\n강화성공\n+4 \\(\\to\\) +5\n0 \\(\\to\\) 0\n모든 강화 성공\n\n\n12\n-\n+5 \\(\\to\\) +5\n0 \\(\\to\\) 0\n더 이상 강화시도 하지 않음\n\n\n13\n\\(\\dots\\)\n\\(\\dots\\)\n\\(\\dots\\)\n\\(\\dots\\)\n\n\n\n(1) 이 경우 62일의 방학뒤에 100명의 유저중 대략 몇명정도 +5 강화상태에 있겠는가? 시뮬레이션을 활용하여 추론하라. (단, +5강화에 성공하지 못한 모든 유저는 반드시 하루에 한번 강화를 시도해야 한다고 가정하자.)\n(2) 31번째 시도 이후 대략 몇명의 유저가 +5 강화상태에 있겠는가?\n\n# 2-1,2 \ns2=ExecutionSword(0.4)\n\n\nfor i in range(62):\n    s2.addday()\n    s2.attempt()\n    s2.update()\n    s2.reset() ## 초기화가 되는 조건이 있으므로 문제1에서 reset함수만 추가하면 된다. \n\n\n# 2-1\nsum(s2.upgradestate.day31==5)/s2.nuser\n\n0.36392\n\n\n\n# 2-2\nsum(s2.upgradestate.day62==5)/s2.nuser\n\n0.61803\n\n\n(3) 100명의 유저중 50명이상의 유저가 +5 강화상태에 도달하는 순간 모든 유저의 강화성공확률을 90%로 증가시킨다고 하자. 62일의 방학뒤에 100명의 유저 중 몇명 정도가 +5 강화상태에 있겠는가?\n\n# 2-3 \ns3=ExecutionSword(0.4)\n\n\nfor i in range(62):\n    s3.addday()\n    s3.attempt()\n    s3.update()\n    s3.reset() ## 초기화가 되는 조건이 있으므로 reset함수 추가\n    s3.arrangeprob() ## 전체유저의 50%가 강화성공하면 강화확률이 조정되는 조건이 있으므로 arragneprob 추가 \n\n\nsum(s3.upgradestate.day62==5)/s3.nuser\n\n0.9993"
  },
  {
    "objectID": "posts/V. Appendix/2022-05-03-mid.html",
    "href": "posts/V. Appendix/2022-05-03-mid.html",
    "title": "참고자료: 2022-04-mid",
    "section": "",
    "text": "오픈 북, 2시간, 문제유형만 공개"
  },
  {
    "objectID": "posts/V. Appendix/2022-05-03-mid.html#imports",
    "href": "posts/V. Appendix/2022-05-03-mid.html#imports",
    "title": "참고자료: 2022-04-mid",
    "section": "0. imports",
    "text": "0. imports\n아래코드를 이용하여 numpy 와 matplotlib을 import하라.\n\nimport numpy as np\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts/V. Appendix/2022-05-03-mid.html#코드구현-i-40점",
    "href": "posts/V. Appendix/2022-05-03-mid.html#코드구현-i-40점",
    "title": "참고자료: 2022-04-mid",
    "section": "1. 코드구현 I (40점)",
    "text": "1. 코드구현 I (40점)\n주의: 문제에 조건이 있는 경우 조건을 준수할 것\n(1) a의 type을 bool로 바꾸어라.\n\na=1.0\n\n\nnote: 출제의도: 자료형의 변환\n\n(풀이)\n\nbool(a)\n\nTrue\n\n\n\n(2)-(6)\n아래의 문자열을 고려하자.\n\ntest_arr = 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSUGPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XAt3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/EnmZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbxNrRFi9wrf+M7Q== schacon@mylaptop.local'\n\n(2) 위 문자열에서 짝수번째 원소를 출력하는 코드를 작성하라.\n\nnote: 출제의도: 인덱싱, 스트라이딩\n\n(풀이)\n\ntest_arr[1::2]\n\n's-s AA3zCy2AABwAQAlUkHfY7bmINTKTo/WSGlnflDY7d4Ze1J4WjhFvQMxEEfhlXQkPpw0d3b7OJMylXC+A3XiBxXnhpAscL86jNQddFSV/XtFoosc19530w8eFbzUlQKrX8yNvYb6wP0wr/nZA4ZnP8ZmMuyDc8Zi8+wr+namkns10QalqSbNRiwfMQ=shcnmlpo.oa'\n\n\n(3) 위 문자열에서 마지막 10개의 원소를 출력하는 코드를 작성하라.\n\nnote: 출제의도: -인덱싱\n\n(풀이)\n\ntest_arr[-10:]\n\n'ptop.local'\n\n\n(4) 위 문자열을 뒤집은 문자열을 구하는 코드를 작성하라. 즉 아래를 출력하는 코드를 작성하라.\n'lacol.potpalym@nocahcs ==Q7M+frw9iFRrNxbsSVqMlTarQ10d1os2njkImtaKn1+3r3wg+b8li/Z68Ec2DryauLMVmPZ98IPTnPZO4WA+ZmnE/trewr0bP/wv6ybNYjvDNpyX88XrrpKJQjlFUuz1bmFIe/86wW0V3+5x9Q1McnsAoJoaF3tAX7/KVlSvFMdsdwQANsjR6V8qLicMsZAHpXhKn1XixqBtiRXF3oAH+RCFXWlByTM/JdOk7vbP3adc0gwSppPbkVQ5XFl9h4fVELElx7MzQivrFUhbj9WJ4HJ81we5Zy4Idh7WYTDHlzfan+lPGUSDWB/mojT9KGTLNpITmrbS71YHfrHDkpUOlkAEQAAAwIBAAAAE2cy1CazN3BAAAA asr-hss'\n\nnote: 출제의도: -1 스트라이딩\n\n(풀이)\n\ntest_arr[::-1]\n\n'lacol.potpalym@nocahcs ==Q7M+frw9iFRrNxbsSVqMlTarQ10d1os2njkImtaKn1+3r3wg+b8li/Z68Ec2DryauLMVmPZ98IPTnPZO4WA+ZmnE/trewr0bP/wv6ybNYjvDNpyX88XrrpKJQjlFUuz1bmFIe/86wW0V3+5x9Q1McnsAoJoaF3tAX7/KVlSvFMdsdwQANsjR6V8qLicMsZAHpXhKn1XixqBtiRXF3oAH+RCFXWlByTM/JdOk7vbP3adc0gwSppPbkVQ5XFl9h4fVELElx7MzQivrFUhbj9WJ4HJ81we5Zy4Idh7WYTDHlzfan+lPGUSDWB/mojT9KGTLNpITmrbS71YHfrHDkpUOlkAEQAAAwIBAAAAE2cy1CazN3BAAAA asr-hss'\n\n\n(5) 위 문자열에서 대문자의 수를 count하라.\nhint .isupper() 메소드를 이용할 것.\n\n'a'.isupper()\n\nFalse\n\n\n\n'A'.isupper()\n\nTrue\n\n\n\n'='.isupper()\n\nFalse\n\n\n\n'@'.isupper()\n\nFalse\n\n\n\nnote: 출제의도: 리스트컴프리헨션, bool자료형의 sum\n\n(풀이)\n\nsum([s.isupper() for s in test_arr])\n\n155\n\n\n(6) 위 문자열에서 사용된 문자 및 특수문자의 종류는 모두 몇가지 인가?\nnote1: 문자열 ‘AAB @ab’ 에서 사용된 문자는 ‘A’, ‘B’, ’ ‘,’@‘, ’a’, ‘b’ 이므로 모두 6종류의 문자 및 특수문자가 사용되었다.\nnote2: ’ ‘,’+‘,’-‘,’.’, ‘/’, ‘=’, ‘@’, ‘1’, ‘a’, ‘A’ 등을 모두 다른 문자로 취급한다.\n\nnote: 출제의도: set 자료형의 이해\n\n(풀이)\n\nlen(set(test_arr))\n\n69\n\n\n\n(7) 리스트컴프리헨션을 이용하여 아래와 같은 리스트를 생성하라\n['a',\n 'aa',\n 'aaa',\n 'aaaa',\n 'aaaaa',\n 'aaaaaa',\n 'aaaaaaa',\n 'aaaaaaaa',\n 'aaaaaaaaa',\n 'aaaaaaaaaa'] <- a가 10개있음 \n\nnote: 출제의도: 문자열의 * 연산, 리스트컴프리헨션\n\n(풀이)\n\n['a'*i for i in range(1,11)]\n\n['a',\n 'aa',\n 'aaa',\n 'aaaa',\n 'aaaaa',\n 'aaaaaa',\n 'aaaaaaa',\n 'aaaaaaaa',\n 'aaaaaaaaa',\n 'aaaaaaaaaa']\n\n\n(8) 길이가 1인 튜플을 만들어 자신의 학번을 저장하라. 길이가 1인 튜플을 만들어 자신의 영문이름을 저장하라. 두 튜플을 + 연산자로 합쳐아래와 같은 출력결과를 얻어라.\n(202143052,'guebin')\n\nnote: 출제의도: 튜플의 + 연산, 길이가 1인 튜플\n\n(풀이)\n\na=(202143052,)\nb=('guebin',)\na+b\n\n(202143052, 'guebin')\n\n\n(9) 아래와 같은 list가 있다고 하자.\ntest_lst = [['g',1],['u',5],['e',2],['b',8],['i',2],['n',9]]\ntest_lst와 리스트컴프리헨션을 이용하여 아래를 출력하는 코드를 구현하라.\n['g', 'uuuuu', 'ee', 'bbbbbbbb', 'ii', 'nnnnnnnnn']\n\nnote: 출제의도: 스트링의 + 연산, 리스트 컴프리헨션\n\n(풀이)\n\ntest_lst = [['g',1],['u',5],['e',2],['b',8],['i',2],['n',9]]\n[i*j for i,j in test_lst]\n\n['g', 'uuuuu', 'ee', 'bbbbbbbb', 'ii', 'nnnnnnnnn']\n\n\n(10) 다음은 학생들의 출석,레포트,중간고사,기말고사 점수를 입력으로 하여 학점을 계산하는 함수이다.\n\ndef grade(attendance, report, mid, final): \n    if attendance<70: \n        credit = 'F' \n    else: \n        total_score = attendance * 0.1 + report * 0.2 + mid * 0.3 + final * 0.4 \n        if total_score > 80: \n            credit = 'A+' \n        else:\n            credit = 'B0' \n    return credit \n\n아래는 학생들의 학번, 출석점수, 레포트, 중간고사, 기말고사 점수가 입력된 리스트이다.\n\ndata = [['202212345', [100,95,25,90]],\n        ['202212346', [60,90,95,95]],\n        ['202212347', [50,90,45,35]],\n        ['202212348', [90,90,50,75]],\n        ['202212349', [100,95,85,85]],\n        ['202212350', [90,90,100,95]],\n        ['202212351', [100,95,100,95]],\n        ['202212352', [95,85,80,60]],\n        ['202212353', [100,90,60,55]],\n        ['202212354', [100,85,70,95]],\n        ['202212355', [100,95,40,100]]]\n\n아래의 ???를 적절하게 완성하여 학생들의 학점을 계산하는 코드를 완성하라.\n[grade(???) for _, scores in data] \n\nnote: 출제의도: dummy variable _, 언패킹연산자 *, for문과 튜플언패킹, 리스트컴프리헨션\n\n(풀이)\n\n[grade(*scores) for _, scores in data] \n\n['B0', 'F', 'F', 'B0', 'A+', 'A+', 'A+', 'B0', 'B0', 'A+', 'A+']\n\n\n(11) 길이가 0인 문자열을 선언하라.\n\nnote: 출제의도: 길이가 0인 문자열\n\n(풀이)\n\nlen('')\n\n0\n\n\n\n(12)-(15)\n(12) dir(plt)와 dir(np)를 각각 실행하라. 실행결과를 각각 a,b로 저장하라. a,b의 type은 무엇인가?\n\nnote: 출제의도: type사용법\n\n(풀이)\n\na=dir(plt)\nb=dir(np)\ntype(a),type(b)\n\n(list, list)\n\n\n(13) a의 원소와 b의 원소의 수를 각각 구하라.\n\nnote: 출제의도: len의 사용법 및 응용\n\n(풀이)\n\nlen(a),len(b)\n\n(254, 611)\n\n\n(14) a와 b의 공통원소의 수를 구하라.\n\nnote: 출제의도: set에서 & 연산자 이용\n\n(풀이)\n\nlen(set(a)&set(b))\n\n9\n\n\n(15) a와 b의 원소를 합친 리스트를 만들어라. (공통원소는 중복하여 합치지 않는다)\n\nnote: 출제의도: set에서 | 연산자 이용\n\n(풀이)\n\nlst = list(set(a)|set(b))\n\n\n(16)-(18) 아래와 같은 dictionary가 있다.\n\ntest_dic = {'202212345': {'att':100,'rep':95,'mid':25,'fin':90},\n            '202212346': {'att':60,'rep':90,'mid':95,'fin':95},\n            '202212347': {'att':50,'rep':90,'mid':45,'fin':35},\n            '202212348': {'att':90,'rep':90,'mid':50,'fin':75},\n            '202212349': {'att':100,'rep':95,'mid':85,'fin':85},\n            '202212350': {'att':90,'rep':90,'mid':100,'fin':95},\n            '202212351': {'att':100,'rep':95,'mid':100,'fin':95},\n            '202212352': {'att':95,'rep':85,'mid':80,'fin':60},\n            '202212353': {'att':100,'rep':90,'mid':60,'fin':55},\n            '202212354': {'att':100,'rep':85,'mid':70,'fin':95},\n            '202212355': {'att':100,'rep':95,'mid':40,'fin':100}}\n\n여기에서 202212345등은 학번을, att는 출석점수, rep는 레포트점수, mid는 중간고사점수, fin은 기말고사 점수를 의미한다.\n(16) get 메소드를 이용하여 202212353에 해당하는 학생의 성적을 아래와 같이 리턴하라.\n{'att': 100, 'rep': 90, 'mid': 60, 'fin': 55}\n\nnote: 출제의도: 딕셔너리에서 get 메소드 이용\n\n(풀이)\n\ntest_dic.get('202212353')\n\n{'att': 100, 'rep': 90, 'mid': 60, 'fin': 55}\n\n\n(17) 202212354의 레포트 점수를 리턴하라.\n\nnote: 출제의도: 딕셔너리에서 key를 이용한 원소추출\n\n(풀이)\n\ntest_dic['202212354']['rep']\n\n85\n\n\n(18) 학생들의 학번을 리턴하는 코드를 작성하라.\n\nnote: 출제의도: 딕셔너리와 for문\n\n(풀이)\n\n[k for k in test_dic]\n\n['202212345',\n '202212346',\n '202212347',\n '202212348',\n '202212349',\n '202212350',\n '202212351',\n '202212352',\n '202212353',\n '202212354',\n '202212355']\n\n\n\n(19) shape이 ()인 numpy이 array를 만들어라. (즉 차원이 0인 np.array를 만들어라)\n\nnote: 출제의도: 0차원인 numpy array\n\n(풀이)\n\nnp.array(3).shape\n\n()\n\n\n(20) shape이 (2,2)인 단위행렬을 만들어라.\n\nnote: 출제의도: 넘파이에서의 배열선언\n\n(풀이)\n\nnp.array([[1,0],[0,1]])\n\narray([[1, 0],\n       [0, 1]])\n\n\n(21) a의 모든 원소에 1을 더하는 코드를 작성하라.\na=[1,3,2,5,-3,3,8,2,3,1] \n\nnote: 출제의도: 브로드캐스팅\n\n(풀이)\n\nnp.array([1,3,2,5,-3,3,8,2,3,1])+1\n\narray([ 2,  4,  3,  6, -2,  4,  9,  3,  4,  2])\n\n\n(22) 아래와 같은 수열을 생성하라.\n1,3,6,10,15,21,28,36,45, ... , 378, 406, 435\nhint: 이 수열에서 \\(a_n-a_{n-1}=n, ~n\\geq 2\\) 이다. 즉 3-1=2, 6-3=3, 10-6=4, …\n\nnote: 출제의도: np.arange, cumsum\n\n(풀이)\n\n435-406\n\n29\n\n\n\nnp.arange(1,30).cumsum()\n\narray([  1,   3,   6,  10,  15,  21,  28,  36,  45,  55,  66,  78,  91,\n       105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 325, 351,\n       378, 406, 435])\n\n\n(23) 아래와 같은 수열을 생생성하라.\n0,1,2,3,4,5,...,99 \n위의 수열에서 1,4,7,10,13,… 번째의 원소를 뽑아라. (첫번째 원소는 0이다)\n\nnote: 출제의도: np.arange, 스트라이딩\n\n(풀이)\n\nnp.arange(100)[::3]\n\narray([ 0,  3,  6,  9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48,\n       51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99])\n\n\n(24) numpy를 이용하여 아래의 역행렬을 구하라. \\[\\begin{bmatrix}\n1&  0 \\\\\n0&  3\n\\end{bmatrix}\\]\n\nnote: 출제의도: np.linalg.inv\n\n(풀이)\n\nnp.linalg.inv(np.array([[1,0],[0,3]]))\n\narray([[1.        , 0.        ],\n       [0.        , 0.33333333]])\n\n\n\n(25)-(30)\na,b가 아래와 같이 주어졌다고 하자.\n\na=[1]*10 \nb=[2]*10 \n\n(25) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n\nnote: 출제의도: np.concatenate\n\n(풀이)\n\nnp.concatenate([a,b])\n\narray([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n\n\n(26) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([[1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2]])\n\nnote: 출제의도: np.concatenate\n\n(풀이)\n\nnp.concatenate([np.array(a).reshape(-1,1),np.array(b).reshape(-1,1)])\n\narray([[1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2],\n       [2]])\n\n\n(27) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]\n\nnote: 출제의도: np.concatenate\n\n(풀이)\n\nnp.concatenate([np.array(a).reshape(1,-1),np.array(b).reshape(1,-1)])\n\narray([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]])\n\n\n(28) a,b와 np.concatenate를 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2]])\n\nnote: 출제의도: np.concatenate\n\n(풀이)\n\nnp.concatenate([np.array(a).reshape(-1,1),np.array(b).reshape(-1,1)],axis=1)\n\narray([[1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2]])\n\n\n(29) a,b와 np.stack을 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]\n(풀이)\n\nnp.stack([a,b])\n\narray([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]])\n\n\n\nnote: 출제의도: np.stack\n\n(30) a,b와 np.stack을 이용하여 아래와 같은 배열을 만들어라.\narray([[1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2]])\n\nnote: 출제의도: np.stack\n\n(풀이)\n\nnp.stack([a,b],axis=1)\n\narray([[1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2],\n       [1, 2]])\n\n\n(31) 아래와 같은 배열이 있다고 하자.\n\na=np.array([1,2,3,4,5])\nb=np.array([3,2,1,1,2])\n\nnumpy의 @ 연산자를 이용하여 \\(\\sum_{i=1}^{5}a_ib_i\\)를 계산하라.\n\nnote: 출제의도: @연산자의 계산 및 해석\n\n(풀이)\n\na@b\n\n24\n\n\n(32) 아래와 같은 배열을 생성하라.\nx=np.random.randn(100)\nnumpy의 @연산자를 이용하여 \\(\\sum_{i=1}^{100}x_i^2\\)을 계산하라.\n\nnote: 출제의도: @연산자의 계산 및 해석\n\n(풀이)\n\nx=np.random.randn(100)\nx@x\n\n69.28009497479688\n\n\n(33) 아래와 같은 배열을 생성하라.\na=np.array([1/100]*100)\nx=np.random.randn(100)\nnumpy의 @연산자를 이용하여 \\(\\frac{1}{n}\\sum_{i=1}^{n}x_i\\)를 계산하라.\n\nnote: 출제의도: @연산자의 계산 및 해석\n\n(풀이)\n\na=np.array([1/100]*100)\nx=np.random.randn(100)\na@x\n\n-0.010052841585430794\n\n\n(34) 표준정규분포에서 100개의 난수를 생성하라.\n\nnote: 출제의도: 표준정규분포 생성\n\n(풀이)\n\nnp.random.randn(100)\n\narray([ 1.85418429,  1.74095494,  1.84238756,  0.11833414,  0.50517813,\n       -0.69557289, -1.72748266, -0.26601374,  0.57719853,  0.18027158,\n       -0.42542364,  0.85536403, -0.58893928,  0.55397097, -1.5535881 ,\n       -0.88229423, -0.71875421, -0.43570715, -0.30980515, -0.36179948,\n       -0.17548155,  1.44052988, -0.59466028,  0.17292887, -0.59491904,\n       -1.9695988 ,  0.11928747,  1.28964429,  0.53823904, -1.18030647,\n       -0.20558282, -1.08160482,  0.83372329,  0.28800561,  0.15599112,\n       -1.03586037, -1.06770958, -2.71210449,  0.58241292,  0.69235475,\n        1.37391505, -0.0326631 , -0.12266586, -0.20292358, -0.27657851,\n        0.56420234,  0.40045754, -0.63219726,  0.40820948, -0.612829  ,\n       -1.28695191,  0.46508036,  0.2463253 , -0.27429529, -0.65675501,\n       -1.01875321, -0.69944952, -0.31570476,  0.3646879 , -1.1631018 ,\n       -1.20414629, -0.90456531,  0.89434359, -0.29053615,  1.16408738,\n        0.71108284, -0.52138787,  1.07033411,  1.72342412,  0.90605155,\n       -0.28896114, -1.89628331, -1.71603025,  1.21529517,  0.23833153,\n       -0.52176073, -0.49144623, -0.75427022,  0.10468367,  0.36750664,\n        0.24346823,  0.20762347,  1.08915492,  1.89502878,  1.91479936,\n       -0.4241885 , -1.05989046,  0.96622936,  0.40962212, -2.16589513,\n        0.45357349, -1.23802044,  0.39859558,  0.02910548,  1.44679724,\n        1.16285902, -0.1593022 , -2.14983146,  0.42739322, -0.94301164])\n\n\n(35) 아래와 동일한 코드를 np.random.rand()로 구현하라.\nnp.random.uniform(low=2,high=4,size=(5,)) \n\nnote: 출제의도: np.random.rand, np.random.uniform\n\n(풀이)\n\nnp.random.rand(5)*2+2\n\narray([3.62616239, 2.4038075 , 2.64420359, 2.80481305, 2.2678642 ])\n\n\n(36) 아래와 같은 배열을 선언하라.\na=np.random.randn(100) \nnp.where를 이용하여 a의 모든 음수를 0으로 바꾸는 코드를 작성하라.\n\nnote: 출제의도: np.where 을 이용한 마스킹\n\n(풀이)\n\na=np.random.randn(100)\nnp.where(a<0,0,a)\n\narray([0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.23392366e-01,\n       0.00000000e+00, 1.08600932e+00, 3.67178107e-01, 0.00000000e+00,\n       2.20251453e-01, 0.00000000e+00, 0.00000000e+00, 3.89764950e-02,\n       6.86794220e-01, 6.89479404e-01, 1.26211471e+00, 0.00000000e+00,\n       4.23611162e-01, 8.19460987e-01, 3.14530150e-01, 0.00000000e+00,\n       0.00000000e+00, 0.00000000e+00, 1.30354361e+00, 0.00000000e+00,\n       0.00000000e+00, 4.40581127e-01, 0.00000000e+00, 0.00000000e+00,\n       7.86386724e-01, 1.92151119e-02, 0.00000000e+00, 0.00000000e+00,\n       0.00000000e+00, 3.23260088e-01, 0.00000000e+00, 7.13352290e-01,\n       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.01771469e-01,\n       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.01926360e+00,\n       0.00000000e+00, 1.00933996e+00, 0.00000000e+00, 5.55528483e-01,\n       5.99763436e-01, 0.00000000e+00, 1.35136571e-01, 1.35928670e-02,\n       9.35722269e-01, 0.00000000e+00, 8.64547752e-01, 0.00000000e+00,\n       0.00000000e+00, 0.00000000e+00, 1.68682634e+00, 0.00000000e+00,\n       1.07091321e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n       8.27772542e-01, 0.00000000e+00, 7.65702396e-01, 0.00000000e+00,\n       0.00000000e+00, 3.29389519e-01, 0.00000000e+00, 2.51416616e-01,\n       0.00000000e+00, 8.17591580e-01, 0.00000000e+00, 1.09930438e-01,\n       8.71101099e-04, 2.17063699e-01, 2.06385934e-01, 0.00000000e+00,\n       0.00000000e+00, 0.00000000e+00, 3.19516814e-01, 5.92549379e-02,\n       1.92857588e+00, 1.39519785e+00, 3.77551912e-01, 0.00000000e+00,\n       0.00000000e+00, 0.00000000e+00, 5.16744013e-01, 0.00000000e+00,\n       1.87178822e+00, 1.75448718e+00, 3.40204387e-01, 7.69851631e-01])\n\n\n(37) 아래와 같은 배열을 선언하라.\na=np.random.randn(100) \n위 배열의 최소값이 위치한 index를 return하라.\n\nnote: 출제의도: np.where\n\n(풀이)\n\na=np.random.randn(100)\nnp.where(a==np.min(a))\n\n(array([92]),)\n\n\n(38) 아래와 같은 배열을 선언하라.\n\na=np.arange(12).reshape(3,4)\na\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n차원의 수를 유지하면서 1열을 추출하는 코드를 작성하라. 즉 결과가 아래와 같이 나오도록 하라.\narray([[0],\n       [4],\n       [8]])\n\nnote: 출제의도: 차원을 유지하는 인덱싱\n\n(풀이)\n\na[:,[0]]\n\narray([[0],\n       [4],\n       [8]])\n\n\n(39)-(40)\n(39) 자신의 학번으로 random seed 를 설정하라. [20,25)의 범위에서 100개의 정수를 랜덤으로 생성해 (10,10) shape의 배열을 만들어라.\n\nnote: 출제의도: np.random.randint\n\n(풀이)\n\nnp.random.seed(43052)\na=np.random.randint(low=20,high=25,size=(10,10))\n\n(40) 39의 결과에서 20,21,22 는 각각 몇개씩 있는가?\n\nnote: 출제의도: bool형의 sum\n\n(풀이)\n\nnp.sum(a==20),np.sum(a==21),np.sum(a==22)\n\n(17, 20, 19)"
  },
  {
    "objectID": "posts/V. Appendix/2022-05-03-mid.html#코드구현-ii-50점",
    "href": "posts/V. Appendix/2022-05-03-mid.html#코드구현-ii-50점",
    "title": "참고자료: 2022-04-mid",
    "section": "2. 코드구현 II (50점)",
    "text": "2. 코드구현 II (50점)\n\n(1)-(6) 아래의 코드를 실해하여 test_dic를 생성하라.\n\nnp.random.seed(43052)\natt = np.random.choice(np.arange(10,21)*5,200)\nrep = np.random.choice(np.arange(5,21)*5,200)\nmid = np.random.choice(np.arange(0,21)*5,200)\nfin = np.random.choice(np.arange(0,21)*5,200)\nkey = ['202212'+str(s) for s in np.random.choice(np.arange(300,501),200,replace=False)]\ntest_dic = {key[i] : {'att':att[i], 'rep':rep[i], 'mid':mid[i], 'fin':fin[i]} for i in range(200)}\ndel(att);del(rep);del(mid);del(fin);del(key)\n\n여기에서 202212345등은 학번을, att는 출석점수, rep는 레포트점수, mid는 중간고사점수, fin은 기말고사 점수를 의미한다.\n(1) test_dic에서 출석점수가 70이상(70>=)인 학생들의 학번을 출력하는 코드를 작성하라.\n\nnote: 출제의도: if문이 포함된 리스트컴프리헨션, for문과 딕셔너리\n\n(풀이)\n\nids= [k for k in test_dic if test_dic[k]['att']>=70]\n\n(2) test_dic에서 출석점수가 70미만(<70)인 학생들의 수를 구하라.\n\nnote: 출제의도: if문이 포함된 리스트컴프리헨션, for문과 딕셔너리\n\n(풀이)\n\nlen([k for k in test_dic if test_dic[k]['att']<70])\n\n70\n\n\n\nsum([test_dic[k]['att']<70 for k in test_dic])\n\n70\n\n\n(3) test_dic에서 출석점수가 70이상(70>=)인 학생들의 중간고사 점수의 평균을 계산하라.\n\nnote: 출제의도: if문이 포함된 리스트컴프리헨션, for문과 딕셔너리\n\n(풀이)\n\nnp.mean([test_dic[k]['mid'] for k in test_dic if test_dic[k]['att']>=70])\n\n57.15384615384615\n\n\n(4) test_dic에서 중간고사 점수를 출력하는 코드를 작성하라.\n\nnote: 출제의도: 리스트컴프리헨션, for문과 딕셔너리\n\n(풀이)\n\nmid=[test_dic[k]['mid'] for k in test_dic]\n\n(5) test_dic에서 중간고사 점수의 표준편차와 레포트점수의 표준편차를 구하여라. 어떤것이 더 큰가?\n\nnote: 출제의도: 리스트컴프리헨션, for문과 딕셔너리, np.std\n\n(풀이)\n\nnp.std([test_dic[k]['mid'] for k in test_dic]),np.std([test_dic[k]['rep'] for k in test_dic])\n\n(29.88243631299162, 22.626533097229014)\n\n\n(6) test_dic에서 중간고사 점수가 가장 높은 사람의 학번을 출력하라.\n주의: att,rep,mid,fin,key를 실행하여 소멸시키지 않고 그대로 이용하거나 np.random.choice()를 이용하여 재생성한 뒤 계산할 경우 0점 처리함. - 예를들면 (5)의 경우 np.std(mid), np.std(rep) 와 같은 식으로 구현하면 0점 처리함.\n\nnote: 출제의도: 리스트컴프리헨션, for문과 딕셔너리\n\n(풀이)\n\n[k for k in test_dic if test_dic[k]['mid']==max(mid)]\n\n['202212326',\n '202212463',\n '202212383',\n '202212341',\n '202212417',\n '202212401',\n '202212405',\n '202212369',\n '202212403',\n '202212407',\n '202212315']\n\n\n\n(7) 성공확률이 0.45인 시행이 있다고 하자. 이 시행을 100번의 시행하였을 경우 73번 이상 성공할 확률은 얼마인가? 시뮬레이션을 이용하여 근사계산하라.\n\nnote: 출제의도: np.random.binomial, bool형의 합\n\n(풀이)\n\nsum(np.random.binomial(n=100,p=0.45,size=(1000,)) >= 73)\n\n0\n\n\n(8) 성공확률이 0.45인 시행이 있다고 하자. 이 시행을 100번 시행하였을 경우 10번이하로 실패하거나 90번이상 성공할 확률은 얼마인가? 시뮬레이션을 이용하여 근사계산하라.\n\nnote: 출제의도: np.random.binomial, bool형의 합\n\n(풀이)\n\na=np.random.binomial(n=100,p=0.45,size=(1000,))\nsum((a>=90) | (a<=10))\n\n0\n\n\n\nsum(a>=90) + sum(a<=10) # 이것도 좋은 풀이\n\n0\n\n\n(9) 아래와 같은 행렬을 선언하자.\n\nA=np.arange(2*1).reshape(2,1)\nB=np.arange(2*2).reshape(2,2)\nC=np.arange(2*3).reshape(2,3)\nD=np.arange(3*3).reshape(3,3)\nE=np.arange(3*2).reshape(3,2)\nF=np.arange(3*1).reshape(3,1)\n\n아래의 블락매트릭스를 만들어라.\n\\(\\begin{bmatrix} a_{11} & b_{11} & b_{12} & c_{11} & c_{12} & c_{13} \\\\ a_{21} & b_{21} & b_{22} & c_{21} & c_{22} & c_{23} \\\\ d_{11} & d_{12} & d_{13} & e_{11} & e_{12} & f_{11} \\\\ d_{21} & d_{22} & d_{23} & e_{21} & e_{22} & f_{21} \\\\ d_{31} & d_{32} & d_{33} & e_{31} & e_{32} & f_{31} \\end{bmatrix}\\)\n여기에서 \\(a_{ij}\\)는 매트릭스 \\({\\bf A}\\)의 원소이다.\n\nnote: 출제의도: np.concatenate\n\n(풀이)\n\ntop = np.concatenate([A,B,C],axis=1)\nbottom = np.concatenate([D,E,F],axis=1)\nnp.concatenate([top,bottom],axis=0)\n\narray([[0, 0, 1, 0, 1, 2],\n       [1, 2, 3, 3, 4, 5],\n       [0, 1, 2, 0, 1, 0],\n       [3, 4, 5, 2, 3, 1],\n       [6, 7, 8, 4, 5, 2]])\n\n\n(10) 표준정규분포에 10000개의 난수를 아래와 같이 생성하라.\n\nx=np.random.randn(10000)\ny=np.random.randn(10000)\n\n\\((i,j)\\) 번째 원소가 \\((x_i-y_j)^2\\)인 (10000,10000) 매트릭스를 만들어라.\n\nnote: 출제의도: 브로드캐스팅\n\n(풀이)\n\n(x.reshape(10000,1) - y.reshape(1,10000))**2\n\narray([[9.94471594e-01, 1.59617444e+00, 4.89939117e-01, ...,\n        5.85763251e-02, 8.71831383e-01, 4.48231705e-02],\n       [3.82650425e-01, 7.82788668e-01, 1.16338019e+00, ...,\n        3.85231232e-01, 1.72229831e+00, 3.48524169e-01],\n       [2.19381916e-03, 4.81046770e-02, 3.04162913e+00, ...,\n        1.65404203e+00, 3.91165053e+00, 1.57699602e+00],\n       ...,\n       [4.06902110e-02, 4.15352671e-03, 3.60584637e+00, ...,\n        2.07641061e+00, 4.54827803e+00, 1.98997559e+00],\n       [6.35135252e-01, 1.13022358e+00, 8.10422594e-01, ...,\n        1.95632560e-01, 1.28594998e+00, 1.69738287e-01],\n       [3.93009857e+00, 5.05626325e+00, 8.13727798e-02, ...,\n        5.52331661e-01, 2.65189382e-03, 5.98303522e-01]])\n\n\n\n(11)-(16)\n아래와 같은 매트릭스를 생성하라.\n\nnp.random.seed(43052)\na=np.random.randn(10000).reshape(100,100)\na\n\narray([[ 0.38342049,  1.0841745 ,  1.14277825, ..., -0.18506968,\n         1.05538764,  1.18701443],\n       [-0.25027283, -1.58045215,  0.1124153 , ...,  1.0321894 ,\n         0.40438012, -0.13491595],\n       [-0.76763724, -0.64294232, -0.24782396, ..., -0.01530161,\n         0.89125897, -0.82683395],\n       ...,\n       [-1.41379028,  0.79611333, -0.71011837, ..., -0.9860352 ,\n         1.30755244,  2.18677233],\n       [ 1.33968105, -0.78457449, -0.10405858, ..., -0.71110186,\n         0.99841286,  2.34371635],\n       [-0.66422032, -0.07550233,  0.7405869 , ...,  1.03232398,\n        -0.18988252, -0.03578389]])\n\n\n(11) 각 행의 합을 구하라. 즉 1행의 합, 2행의 합, … 100행의 합을 계산하라. - 1행의합 = 0.38342049 + 1.0841745 + … + 1.18701443\n\nnote: 출제의도: np.sum with axis\n\n(풀이)\n\na.sum(axis=1)\n\narray([-8.13607922e+00,  9.87120533e+00, -1.41434956e+01, -2.21705363e+00,\n       -1.45535236e+01, -9.15821678e+00, -2.59866360e+00, -1.54562385e+01,\n       -1.42005088e+00, -3.51523111e+00,  9.70487578e+00, -1.26229105e+01,\n        1.66837113e+00,  2.43015457e+00,  2.72990184e+00, -7.99486429e+00,\n       -8.38305954e-01, -8.45002020e+00, -1.03610098e+00,  2.07251861e+01,\n        1.11461478e+01,  7.62144075e+00, -7.93734585e+00,  1.82844319e+01,\n       -2.63562392e+00, -8.97916930e+00, -1.88986183e+00, -9.32477049e+00,\n       -6.69074565e+00, -1.42463143e+01,  6.45540510e-01,  1.80911488e+00,\n        2.40997157e+00,  1.63367254e+01,  7.63990677e+00,  8.13524813e+00,\n        3.97159000e+00, -1.10542949e+00,  4.37564512e-01,  2.87299971e+00,\n       -4.01016768e+00,  5.71115215e+00, -4.64132698e+00, -9.13987753e+00,\n       -6.78326000e+00,  3.36308150e+00, -5.13704342e+00, -5.09782466e+00,\n        6.54192465e-03,  7.19722660e+00, -4.64674820e+00, -9.24124039e+00,\n        6.73530841e+00,  1.12168921e+00,  1.61615988e+00,  1.37602200e+01,\n        6.67289840e-01, -2.09578108e+00, -2.81826564e-01, -8.52416541e+00,\n       -7.21970047e+00,  2.27146777e+01, -1.40341974e+01,  1.69263136e+01,\n       -1.80568372e+01,  6.52142336e+00, -1.73092812e+01, -1.34999285e+01,\n       -7.85539317e+00, -4.74940393e-01, -2.75765037e+01,  8.74991555e+00,\n       -9.77324158e+00,  1.42854121e+01, -1.10130356e+00, -1.39206483e-01,\n       -1.54638921e+01,  1.36814794e+00,  8.41394160e+00, -2.42153833e+00,\n       -2.57155344e+01, -6.72423820e+00, -9.49366257e-01,  3.79493472e+00,\n       -6.23508582e+00,  7.75657189e+00,  9.69403620e+00,  1.46847519e+01,\n        7.36500792e+00, -2.54755192e+01,  1.22792449e+01, -1.02497847e+01,\n        1.30452028e+01,  3.92943038e+00, -3.27227585e+00, -1.06633071e+01,\n       -1.56942302e+01,  8.01451222e+00,  2.81546938e+00,  5.56774384e+00])\n\n\n(12) (11)의 결과로 나온 배열의 표준편차를 구하라.\n\nnote: 출제의도: np.sum with axis, np.std\n\n(풀이)\n\na.sum(axis=1).std()\n\n9.98012658863081\n\n\n(13) 각 열의 평균을 구하라. 즉 1열의 평균, 2열의 평균, … , 100열의 평균을 계산하라.\n\nnote: 출제의도: np.sum with axis\n\n(풀이)\n\na.sum(axis=0)\n\narray([ 5.05543481e-01, -8.11250975e-01, -7.27142023e-01,  9.64876493e+00,\n        5.64186324e+00, -2.22728206e+00,  1.32808256e-02, -9.60905067e+00,\n        9.42144096e+00, -1.21946518e+01, -2.21878576e+00, -3.77018716e+00,\n        2.35739166e-01, -1.13202128e+01, -9.00374437e+00, -3.09372275e+00,\n       -2.18029121e+00,  7.04210003e+00, -4.12563112e+00,  2.58233488e+00,\n        1.16578817e+01, -1.59430241e+01, -1.53668953e+00,  9.21879710e+00,\n       -1.11346500e+01, -1.20131585e+01,  5.94139652e+00, -3.27022797e+00,\n       -1.46466366e+00, -1.78386785e+00, -1.06650333e+01, -9.04542721e+00,\n       -8.52586244e+00,  5.52166280e+00,  1.94115122e+01,  4.64389603e+00,\n        5.13636914e+00,  1.11424801e+01, -4.18629084e+00,  9.23822150e+00,\n       -2.00433998e+00, -5.73784795e+00, -8.79928414e+00, -3.01766235e+00,\n        6.47256326e+00,  3.14419234e+00, -1.16146865e+01, -1.04800787e+01,\n        3.17924308e+00,  5.51687322e+00,  1.04913214e+01, -2.79741703e-01,\n        2.56767141e+01, -1.35620430e+01, -9.59492302e+00,  1.23241275e+01,\n       -5.26436946e-01, -3.14823093e+00, -4.00286104e+00, -1.48618576e+01,\n        4.85988487e+00, -1.37972086e+01, -1.04715966e+01, -7.13893940e+00,\n        4.35483376e+00, -2.10610822e+01, -1.03231108e+01, -1.62132451e+01,\n        2.85187037e+01, -8.25697744e+00,  4.33723229e+00,  1.32763889e+00,\n       -1.61919484e+01, -5.07924036e+00,  6.62243327e+00, -9.72863991e+00,\n        2.71962223e+01, -5.97710822e+00,  1.54580795e+01, -5.46739064e+00,\n       -1.08611574e+01, -1.56520706e+01, -1.40476317e+01,  1.06067589e+01,\n       -3.46141736e+00, -6.07673046e+00,  5.33471760e-01,  8.10276105e+00,\n       -1.31994569e+01, -1.00936968e+00,  6.13944222e+00, -9.72765699e+00,\n        1.61342793e+01,  1.02634369e+01, -5.03038014e+00, -7.50604837e+00,\n        2.63992605e+00,  6.98470602e+00, -1.89567885e+01,  7.91910813e+00])\n\n\n(14) (13)의 결과로 나온 배열의 표준편차를 구하라.\n\nnote: 출제의도: np.sum with axis, np.std\n\n(풀이)\n\na.sum(axis=0).std()\n\n9.944992000065781\n\n\n(15) a의 원소중 a>0 을 만족하는 원소의 평균을 구하여라.\n\nnote: 출제의도: bool을 이용한 인덱싱\n\n(풀이)\n\na[a>0].mean()\n\n0.7879030416692301\n\n\n(16) a의 원소중 a>3을 만족하는 원소의 수를 count하라.\n\nnote: 출제의도: bool의 sum\n\n(풀이)\n\nnp.sum(a>3)\n\n17\n\n\n\n(17)-(18)\n아래와 같은 배열 a를 고려하자.\n\nnp.random.seed(43052)\na=np.random.binomial(1,0.2,size=(10000,))\na\n\narray([1, 0, 1, ..., 1, 1, 0])\n\n\n(17) 0에서 1로 바뀌는 부분을 count하라.\n\nnote: 출제의도: np.diff 응용\n\n(풀이)\n\nnp.sum(np.diff(a)==1)\n\n1617\n\n\n(18) 1에서 0으로 바뀌는 부분을 count하라.\n[예시] 아래의 배열에서 0에서 1로 부분은 모두 세 군데이고, 1에서 0으로 바뀌는 부분은 모두 두 군데 이다.\n0 0 0 1 0 1 0 0 0 1 1 1 \n\nnote: 출제의도: np.diff 응용\n\n(풀이)\n\nnp.sum(np.diff(a)==-1)\n\n1618\n\n\n\n(19)-(25)\n(19) \\(i=1,2,\\dots,1000\\)에 대하여 아래를 각각 구하라.\n\\[x_i= \\cos(t_i)+\\cos(3t_i)+\\cos(5t_i)\\]\n\\[y_i= \\sin(t_i)+\\sin(4t_i)\\]\n여기에서 \\(t_i=\\frac{2\\pi i }{1000}\\) 이다.\n\nnote: 출제의도: numpy를 이용한 수식표현\n\n(풀이)\n\ni=np.arange(1,1001)\nt=i*2*np.pi/1000\nx=np.cos(t)+np.cos(3*t)+np.cos(5*t) \ny=np.sin(t)+np.sin(4*t) \n\n(20) \\((x_i,y_i)\\)를 그려라.\n\nnote: 출제의도: plt.plot\n\n(풀이)\n\nplt.plot(x,y)\n\n\n\n\n(21) 아래와 같은 변환을 통하여 \\((w_i,z_i)\\)를 얻어라.\n\\[w_i= \\frac{1}{\\sqrt{2}}x_i - \\frac{1}{\\sqrt{2}}y_i\\]\n\\[z_i= \\frac{1}{\\sqrt{2}}x_i + \\frac{1}{\\sqrt{2}}y_i\\]\n\\((w_i,z_i)\\)를 시각화 하라.\n\nnote: 출제의도: numpy를 이용한 연산, plt.plot\n\n(풀이)\n\nw = 1/np.sqrt(2)*x -  1/np.sqrt(2)*y\nz = 1/np.sqrt(2)*x +  1/np.sqrt(2)*y\nplt.plot(w,z)\n\n\n\n\n(22) 아래와 같은 매트릭스를 만들어라.\n\\[{\\bf A}=\\begin{bmatrix}\nx_1 & y_1 \\\\\nx_2 & y_2 \\\\\n\\dots & \\dots \\\\\nx_n & y_n\n\\end{bmatrix}\\]\n\nnote: 출제의도: np.stack\n\n(풀이)\n\nA=np.stack([x,y]).T\nA\n\narray([[ 2.99930917e+00,  3.14132394e-02],\n       [ 2.99723725e+00,  6.28103581e-02],\n       [ 2.99378587e+00,  9.41752452e-02],\n       ...,\n       [ 2.99723725e+00, -6.28103581e-02],\n       [ 2.99930917e+00, -3.14132394e-02],\n       [ 3.00000000e+00, -1.22464680e-15]])\n\n\n\nA=np.stack([x,y],axis=1)\nA\n\narray([[ 2.99930917e+00,  3.14132394e-02],\n       [ 2.99723725e+00,  6.28103581e-02],\n       [ 2.99378587e+00,  9.41752452e-02],\n       ...,\n       [ 2.99723725e+00, -6.28103581e-02],\n       [ 2.99930917e+00, -3.14132394e-02],\n       [ 3.00000000e+00, -1.22464680e-15]])\n\n\n(23) \\({\\bf A} {\\bf B}\\)의 첫번째 열과 두번째 열을 시각화한 결과가 \\((w_i,z_i)\\)과 동일하도록 적당한 (2,2) 매트릭스 \\({\\bf B}\\)를 만들어라.\n\nnote: 출제의도: 행렬의 수식표현, 행렬의 곱\n\n(풀이)\n\nB= np.array([[1/np.sqrt(2), 1/np.sqrt(2)],[-1/np.sqrt(2), 1/np.sqrt(2)]])\n#B= np.array([[1, 1],[-1, 1]])/np.sqrt(2)\nplt.plot(A@B[:,0],A@B[:,1])\n\n\n\n\n(24) \\({\\bf A}{\\bf B}^2\\)의 첫번째 열과 두번째 열을 시각화 하라.\n\nnote: 출제의도: 행렬의 곱\n\n(풀이)\n\nplt.plot((A@B@B)[:,0],(A@B@B)[:,1])\n\n\n\n\n(25) \\(n=3,4,5,6,\\dots\\) 에 대하여 \\({\\bf A}{\\bf B}^n\\)을 반복적으로 그려보라. \\((x_i,y_i)\\)의 시각화 결과와 동일한 가장 작은 \\(n\\)은 얼마인가? \\((w_i,z_i)\\)의 시각화 결과와 동일한 가장 작은 \\(n\\)은 얼마인가?\n\nnote: 출제의도: 회전변환의 유추, 역행렬의 개념응용\n\n(풀이)\n\nplt.plot((A@B@B@B)[:,0],(A@B@B@B)[:,1]) ## n=3\n\n\n\n\n\nplt.plot((A@B@B@B@B)[:,0],(A@B@B@B@B)[:,1]) ## n=4\n\n\n\n\n\n(B@B)@(B@B)@(B@B)@(B@B)\n\narray([[1., 0.],\n       [0., 1.]])\n\n\n\n(B@B)@(B@B)@(B@B)@(B@B)@B\n\narray([[ 0.70710678,  0.70710678],\n       [-0.70710678,  0.70710678]])\n\n\n\n답: \\((x_i,y_i)\\)의 시각화 결과와 동일한 가장 작은 \\(n=8\\) 이고 \\((w_i,z_i)\\)의 시각화 결과와 동일한 가장 작은 \\(n=9\\) 이다."
  },
  {
    "objectID": "posts/V. Appendix/2022-05-03-mid.html#다음을-잘-읽고-물음에-답하라.-10점",
    "href": "posts/V. Appendix/2022-05-03-mid.html#다음을-잘-읽고-물음에-답하라.-10점",
    "title": "참고자료: 2022-04-mid",
    "section": "3. 다음을 잘 읽고 물음에 답하라. (10점)",
    "text": "3. 다음을 잘 읽고 물음에 답하라. (10점)\n(1) 아래는 python을 설치하는 방법을 소개한 url 이다. 직접 url에 들어가서 설치하는 방법을 읽어보고 곤이, 철용, 아귀, 짝귀 중 옳은말을 한 사람을 모두 골라라.\n\nhttps://www.pythonlikeyoumeanit.com/Module1_GettingStartedWithPython/Installing_Python.html\n\n(곤이) 해당 방법은 아나콘다를 이용하여 파이썬을 설치하는 방법이다.\n(철용) 그래서 이 방법으로는 가상환경을 만들 수 없겠군.\n(아귀) 위 url에 제시된 방법으로 설치하면 주피터가 자동설치 된다.\n(짝귀) 따라서 위의 방법으로 설치하면 IDE는 주피터만 사용할 수 있다.\n\nnote: 출제의도: 아나콘다를 이용한 설치\n\n(2) 곤이는 1부터 10까지의 합을 구하는 코드를 작성하기 위하여 아래와 같이 mysum.py 파일을 만들었다.\n## mysum.py\ntotal = 0 \nfor i in range(1,11): \n    total = total + i\nprint(total)\n곤이의 컴퓨터는 윈도우이며 아니콘다를 이용해 파이썬을 설치하였다고 가정한다. 다음중 옳은 설명을 한 사람을 모두 고르라.\n(곤이) mysum.py를 실행하기 위해서는 anaconda prompt 에서 mysum.py가 위치한 폴더로 이동한 뒤 %run mysum.py 를 실행하면 된다.\n(철용) anaconda prompt 에서 mysum.py가 위치한 폴더로 이동한 뒤 ipython을 실행하고 %run mysum.py을 실행해도 된다.\n(아귀) 철용의 방법에서 %run mysum.py 대신에 !python mysum.py를 쳐도 동작한다.\n(짝귀) 하지만 다른 가상환경을 만들 경우 철용과 아귀의 방법으로 실행할 수 없다는 단점이 있다.\n\nnote: 출제의도: *.py 의 사용방법"
  },
  {
    "objectID": "posts/V. Appendix/2021-04-20-mid.html",
    "href": "posts/V. Appendix/2021-04-20-mid.html",
    "title": "참고자료: 2021-04-mid",
    "section": "",
    "text": "클로즈 북, 40분, 문제미리공개X\n\n\n2021년 파이썬 입문 중간고사\n\n1 다음을 읽고 참인것을 모두 골라라. (10점)\n(ㄱ) 딕셔너리는 key와 value가 하나의 쌍으로 되어 {}로 둘러싸여 있다. \n(ㄴ) `abs(-20)`의 실행결과는 `20`이다. \n(ㄷ) `[1]+[2]`의 실행결과는 `[3]` 이다. \n(ㄹ) `(1,)`의 자료형은 tuple이다. \n(ㅁ) 자료형이 `str`이면 각 원소를 쉽게 바꿀 수 있다. \n\n\n2 아래의 실행결과 중 올바른 것은? (35점)\n\n(a)\na=1.0\nb=2\ntype(a+b)\n(ㄱ) int (ㄴ) float (ㄷ) bool  (ㄹ) complex \n(ㅁ) str (ㅂ) list  (ㅅ) tuple (ㅇ) dict \n\n\n(b)\na=1\nb=2\ntype(a==b)\n(ㄱ) int (ㄴ) float (ㄷ) bool  (ㄹ) complex \n(ㅁ) str (ㅂ) list  (ㅅ) tuple (ㅇ) dict \n\n\n(c)\na=1\nb=2\ntype(int(a==b))\n(ㄱ) int (ㄴ) float (ㄷ) bool  (ㄹ) complex \n(ㅁ) str (ㅂ) list  (ㅅ) tuple (ㅇ) dict \n\n\n(d)\ntype([1,2,3])\n(ㄱ) int (ㄴ) float (ㄷ) bool  (ㄹ) complex \n(ㅁ) str (ㅂ) list  (ㅅ) tuple (ㅇ) dict \n\n\n(e)\na=1\ntype(a)\n(ㄱ) int (ㄴ) float (ㄷ) bool  (ㄹ) complex \n(ㅁ) str (ㅂ) list  (ㅅ) tuple (ㅇ) dict \n\n\n(f)\na=(1)\ntype(a)\n(ㄱ) int (ㄴ) float (ㄷ) bool  (ㄹ) complex \n(ㅁ) str (ㅂ) list  (ㅅ) tuple (ㅇ) dict \n\n\n(g)\na=(1,)\ntype(a)\n(ㄱ) int (ㄴ) float (ㄷ) bool  (ㄹ) complex \n(ㅁ) str (ㅂ) list  (ㅅ) tuple (ㅇ) dict \n\n\n\n3 아래의 코드를 잘 읽고 물음에 답하라. (25점)\na=[1,[2],2,[1]]\n\ndef a_add(a,i,j): \n    if type(a[i])==type(a[j]): \n        rtn=a[i]+a[j]\n    else:\n        rtn=a[i],a[j]\n    return rtn\n\n(a) 아래의 출력결과 중 바른 것은?\na[0]==a[2]\n(ㄱ) True (ㄴ) False\n\n\n(b) 아래의 출력결과 중 바른 것은?\ntype(a[0])==type(a[2])\n(ㄱ) True (ㄴ) False\n\n\n(c) 아래의 출력결과를 쓰라.\na_add(a,0,2)\n\n\n(d) 아래의 출력결과를 쓰라.\na_add(a,1,3)\n\n\n(e) 아래의 출력결과중 적절한 것은?\ntype(a_add(a,0,1))\n(ㄱ) int (ㄴ) float (ㄷ) bool  (ㄹ) complex \n(ㅁ) str (ㅂ) list  (ㅅ) tuple (ㅇ) dict \n\n\n\n4 원주율을 출력하는 방법 중 올바른 것을 모두 고르시오 (10점)\n(ㄱ) \nimport math\nmath.pi\n\n(ㄴ) \nimport math\npi \n\n(ㄷ)\nfrom math import pi\npi\n\n(ㄹ)\nfrom math import *\npi\n\n\n5 아래의 에러메시지가 나오는 (잘못된) 코드는? (10점)\n\n(a)\nTypeError: object of type 'float' has no len()\n(ㄱ) len(3.14) \n(ㄴ) len([3.14]) \n(ㄷ) len((3.14,)) \n(ㄹ) len('3.14') \n\n\n(b) (a)의 에러가 나오는 이유에 대하여 설명하라.\n\n\n\n6 아래와 같이 a를 선언하였다고 하자. (ㄱ)-(ㄹ) 중 옳은 설명을 모두 골라라. (10점)\na='guebin'\n(ㄱ) a의 자료형은 str이다. 즉 type(a)의 출력결과는 str이다. \n(ㄴ) len(a)의 실행결과는 1이다. \n(ㄷ) a[0]='G'와 같은 방법으로 첫글자를 대문자로 바꿀 수 있다. \n(ㄹ) a*2의 실행결과는 'guebinguebin'이다. \n\n\n7 [예제코드]의 결과를 관찰하고 물음에 답하라. (10점)\n## 예제코드 ## \na=['G','u','e','b','i','n']\ndel a[0]\na\n## 실행결과 \n['u', 'e', 'b', 'i', 'n']\n\n(a) 아래코드의 출력결과를 쓰라.\na=['G','u','e','b','i','n']\ndel a[0]\ndel a[0]\n\n\n(b) 아래코드의 출력결과 중 올바른 것은?\nb=['1','2','3']\ndel b[-1]\nb\n(ㄱ) ['1', '2']\n(ㄴ) ['2', '3']\n(ㄷ) ['1', '3']\n(ㄹ) 에러메시지로 출력할 수 없음. \n\n\n\n8 다음을 읽고 물음에 답하라. (15점)\n\n(a) 아래는 .append에 대한 사용예시이다.\n### .append 예시 \na=[1,2]\na.append(3)\nprint(a)\n### 실행결과 \n[1, 2, 3]\n\n\n위의 코드를 참고하여 아래의 실행결과를 쓰라.\nx=[]\nfor i in [0,1,2,3,4,5]:\n    x.append(2**i)\nx\n\n\n(b) 리스트 컴프리헨션을 사용하여 (a)와 동일한 출력결과를 얻는 코드를 작성하라.\n\n\n(c) 리스트 컴프리헨션을 사용하여 아래의 출력결과를 얻는 코드를 작성하라.\n['X1','X2','X3','Y1','Y2','Y3']\n\n\n\n9 a,b에 저장된 두 값을 교환하고 싶다고 하자. 아래의 ???에 알맞은 내용을 적으시오. (10점)\na=10\nb=20\n???\na,b\n## 실행결과\n(20, 10)\n\n\n10 아래의 코드에 대한 출력결과를 쓰라. (10점)\nidlist=[('guebin', '202112345','M','Korea'), \n        ('iu', '202154321','F','Korea'), \n        ('hodong', '201812321','M','Korea')]\nfor name, _, _, _ in idlist: \n    print(name)        \n\n\n11 리스트를 활용하여 아래와 같은 배열을 만들었다고 하자. (15점)\na=[[11,12,13], \n   [21,22,23], \n   [31,32,33]]\n\n(a) 아래코드의 시행결과를 쓰라.\na[0][1]+a[1][2]\n\n\n(b) 아래코드의 시행결과를 쓰라.\na[0]+a[1]\n\n\n(c) 아래코드의 시행결과를 쓰라.\nimport numpy as np\na=np.array(a)\na[0]+a[1]\n\n\n\n12 아래와 같은 연립방정식을 만족하는 해 \\((w,x,y,z)\\)를 푸는 코드를 작성하라. (20점)\n\\(\\begin{cases} x+y+z=3 \\\\ w+y+z=3 \\\\ w+x+z=3 \\\\ w+x+y=3 \\end{cases}\\)\n\n\n13 아래와 같은 행렬을 numpy를 이용하여 선언했다고 하자. (15점)\nimport numpy as np\nA=np.array([[11,12,13,14,15],\n            [21,22,23,24,25],\n            [31,32,33,34,35]])\n\n(a) 다음 코드의 실행결과로 적절한 것은?\nA[1]\n(ㄱ) array([11, 12, 13, 14, 15])\n(ㄴ) array([21, 22, 23, 24, 25])\n(ㄷ) array([11, 21, 31])\n(ㄹ) array([12, 22, 32])\n\n\n(b) 다음 코드의 실행결과로 적절한 것은?\nA[1,:]\n(ㄱ) array([11, 12, 13, 14, 15])\n(ㄴ) array([21, 22, 23, 24, 25])\n(ㄷ) array([11, 21, 31])\n(ㄹ) array([12, 22, 32])\n\n\n(c) 다음 코드의 실행결과로 적절한 것은?\nA[np.ix_([0,1],[0,1])]\n(ㄱ)\narray([[11, 12],\n       [21, 22]]) \n(ㄴ) \narray([[11, 21],\n       [12, 22]]) \n(ㄷ) \narray([11, 12, 21, 22]) \n\n(ㄹ) \narray([12, 22, 11, 12])\n\n\n\n14 적당한 과정을 통하여 아래와 같은 데이터를 얻었다고 가정하자. (20점)\nimport pandas as pd\n#...적당한과정...\ndf\n\n#hide_input\nfrom IPython.display import HTML\nHTML('<table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>age</th>\\n      <th>toeic</th>\\n      <th>gpa</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>새로이</th>\\n      <td>30.0</td>\\n      <td>600</td>\\n      <td>4.0</td>\\n    </tr>\\n    <tr>\\n      <th>이서</th>\\n      <td>20.0</td>\\n      <td>950</td>\\n      <td>4.2</td>\\n    </tr>\\n    <tr>\\n      <th>일권</th>\\n      <td>28.0</td>\\n      <td>450</td>\\n      <td>2.3</td>\\n    </tr>\\n    <tr>\\n      <th>현이</th>\\n      <td>28.0</td>\\n      <td>650</td>\\n      <td>3.8</td>\\n    </tr>\\n  </tbody>\\n</table>')\n\n\n\n  \n    \n      \n      age\n      toeic\n      gpa\n    \n  \n  \n    \n      새로이\n      30.0\n      600\n      4.0\n    \n    \n      이서\n      20.0\n      950\n      4.2\n    \n    \n      일권\n      28.0\n      450\n      2.3\n    \n    \n      현이\n      28.0\n      650\n      3.8\n    \n  \n\n\n\n\n(a) 첫 두열(age,toeic)에 접근하는 코드를 써라.\n\n\n(b) 토익점수가 800이상인 사람을 불러오는 코드를 써라.\n\n\n(c) 세번째 열(gpa)에 접근하는 코드 중 적절한 것을 모두 골라라.\n(ㄱ) \ndf.loc['gpa']\n(ㄴ) \ndf.iloc[:,2]\n(ㄷ) \ndf.iloc[:,-1]\n(ㄹ) \ndf.iloc[2]\n\n\n(d) 나이가 23보다 많고 토익점수가 635이하 학점이 3.0 이상인 사람을 불러오는 코드를 작성하라.\n\n\n\n15 아래를 보고 적절한 설명을 한 사람을 모두 고르라. (10점)\nimport vec\nvec?\nType:        module\nString form: <module 'vec' from '/home/cgb2/vec/__init__.py'>\nFile:        ~/vec/__init__.py\nDocstring:   이 패키지는 현재 길이가 2,3인 벡터의 연산만 지원하지만 추후 업데이트하여 더욱 발전할 예정\n(로이) import vec이 실행되는 것을 보니 (1) 사용자가 vec이라는 패키지를 설치했거나 (2) 사용자가 현재 작업중인 폴더에 vec.py파일을 만들었거나 (3) 사용자가 현재 작업중인 폴더 아래 vec이라는 폴더가 존재하는 경우등 중 하나라고 볼 수 있겠군.\n(이서) 네, 그런데 vec?의 실행 결과중 File:을 확인해 보니 사용자가 작업중인 폴더아래 vec이라는 폴더가 있는것으로 판단됩니다.\n(일권) 이서가 말한대로 File:을 확인해보니 사용자가 vec폴더에 __init__.py도 만들어 놓았음을 알수 있군. __init__.py는 import vec을 수행하면 암시적으로 실행된다고 했었지?\n(현이) 그렇지, 그런데 사실 파일 이름이 꼭 __init__.py이어야 하는것은 아니야.\n(수아) vec?의 실행결과 Docstring:이 있는것으로 보아 __init__.py상단에 아래와 같은 내용이 있음을 유추할 수 있어.\n'''\n이 패키지는 현재 길이가 2,3인 벡터의 연산만 지원하지만 추후 업데이트하여 더욱 발전할 예정\n'''"
  },
  {
    "objectID": "posts/2023-03-06.html",
    "href": "posts/2023-03-06.html",
    "title": "Intro",
    "section": "",
    "text": "이 수업을 듣지 말아야 하는 이유\n1. F학점을 많이 준다.\n\n30%까지 F를 줄 수 있음.\nF학점은 태도점수+시험성적을 종합하여 부여함 (태도점수로만 부여하지 않음)\n\n2. 파이썬을 배울 수 있는 다른 대안이 많다.\n\nchatGPT\n패스트캠퍼스\n학원\n각종 캠프\n\n3. cost-effective 하지 않음\n\n열심히 공부해도 시험성적이 안 좋을 수 있음. \\(\\to\\) 학점도 안좋아짐\n왜? (1) 타전공 고수들이 많음 (2) 시험문제가 어려움 (3) 기출문제가 별 의미없음 (4) 적성에 안 맞음\n\n4. 꼭 파이썬을 배워야 할까?\n이거 꼭 들어야 졸업가능?\n\nhttps://stat.jbnu.ac.kr/stat/6453/subview.do\n\n통계학과는 뭐 해서 먹고사나..?\n\n의약계열: 전북대병원, XX병원, XX제약, 셀트리온, 삼성바이오\n\n금융계열: 전북은행, XX은행, XX증권, XX화재\n공무원,공기업: 통계청, 9급공무원, 국민연금 등\n기타 대기업: 삼성전자 (인사과)…\n국책연구기관: 에트리, 한국교통연구원 등\n금융공기업: 한국은행, 금융감독원, 한국거래소 등\n제조업: 삼성전자, 하이닉스, LG전자, 현대자동차 등 (스마트팩토리)\n통신사: SKT, KT, LGU\n컨설팅: 베가스, 삼성SDS, LG-CNS 등\n게임회사: 엔씨, 넷마블, 위메이드 등\n인공지능, 빅데이터: 네이버, 카카오, 라인, 쿠팡, 배민(?), SKT, 삼성, LG, …\n순수IT:\n\n\n\n수업진행\n\n다음시간부터 개인 노트북 지참\nwifi: 218-5G-1. 218-5G-2\n강의노트: https://guebin.github.io/PP2023/\n가급적 영상 올릴 생각… (복습용도)\n질문: 카톡, 이메일, 직접방문, 줌, 등등~"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "파이썬 프로그래밍 (2023)",
    "section": "",
    "text": "질문하는 방법\n\n카카오톡: 질문하러 가기 // 학기종료이후 폐쇄함\n이메일: guebin@jbnu.ac.kr\n직접방문: 자연과학대학 본관 205호\nZoom: 카카오톡이나 이메일로 미리 시간을 정할 것\nLMS:\n\n강의노트\n\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nMar 6, 2023\n\n\nIntro\n\n\n최규빈\n\n\n\n\nJun 6, 2022\n\n\n참고자료: 2022-06-final\n\n\n최규빈\n\n\n\n\nApr 1, 2022\n\n\n참고자료: 2022-04-mid\n\n\n최규빈\n\n\n\n\nJun 6, 2021\n\n\n참고자료: 2021-06-final\n\n\n최규빈\n\n\n\n\nApr 1, 2021\n\n\n참고자료: 2021-04-mid\n\n\n최규빈\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "파이썬프로그래밍\nguebin@jbnu.ac.kr\n자연과학대학 본관 205호"
  }
]